
music_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  0800ecb8  0800ecb8  0001ecb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4dc  0800f4dc  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800f4dc  0800f4dc  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f4dc  0800f4dc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4dc  0800f4dc  0001f4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4e0  0800f4e0  0001f4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800f4e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037f0  20000098  0800f57c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003888  0800f57c  00023888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dcfb  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dda  00000000  00000000  0003ddc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  00041ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d8  00000000  00000000  00043520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204af  00000000  00000000  00044cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a74  00000000  00000000  000651a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b52d0  00000000  00000000  00087c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ceeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074f8  00000000  00000000  0013cf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eca0 	.word	0x0800eca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800eca0 	.word	0x0800eca0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027a:	4804      	ldr	r0, [pc, #16]	; (800028c <SELECT+0x1c>)
 800027c:	f003 ffc6 	bl	800420c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000280:	2001      	movs	r0, #1
 8000282:	f002 fc27 	bl	8002ad4 <HAL_Delay>
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	48000400 	.word	0x48000400

08000290 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029a:	4804      	ldr	r0, [pc, #16]	; (80002ac <DESELECT+0x1c>)
 800029c:	f003 ffb6 	bl	800420c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f002 fc17 	bl	8002ad4 <HAL_Delay>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	48000400 	.word	0x48000400

080002b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002ba:	bf00      	nop
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <SPI_TxByte+0x30>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d1f8      	bne.n	80002bc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80002ca:	1df9      	adds	r1, r7, #7
 80002cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d0:	2201      	movs	r2, #1
 80002d2:	4803      	ldr	r0, [pc, #12]	; (80002e0 <SPI_TxByte+0x30>)
 80002d4:	f006 f8a7 	bl	8006426 <HAL_SPI_Transmit>
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	200001bc 	.word	0x200001bc

080002e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002f0:	bf00      	nop
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <SPI_TxBuffer+0x34>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f003 0302 	and.w	r3, r3, #2
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	d1f8      	bne.n	80002f2 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000300:	887a      	ldrh	r2, [r7, #2]
 8000302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000306:	6879      	ldr	r1, [r7, #4]
 8000308:	4803      	ldr	r0, [pc, #12]	; (8000318 <SPI_TxBuffer+0x34>)
 800030a:	f006 f88c 	bl	8006426 <HAL_SPI_Transmit>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	200001bc 	.word	0x200001bc

0800031c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000322:	23ff      	movs	r3, #255	; 0xff
 8000324:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000326:	bf00      	nop
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <SPI_RxByte+0x38>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	2b02      	cmp	r3, #2
 8000334:	d1f8      	bne.n	8000328 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000336:	1dba      	adds	r2, r7, #6
 8000338:	1df9      	adds	r1, r7, #7
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	2301      	movs	r3, #1
 8000342:	4804      	ldr	r0, [pc, #16]	; (8000354 <SPI_RxByte+0x38>)
 8000344:	f006 f9e4 	bl	8006710 <HAL_SPI_TransmitReceive>

  return data;
 8000348:	79bb      	ldrb	r3, [r7, #6]
}
 800034a:	4618      	mov	r0, r3
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200001bc 	.word	0x200001bc

08000358 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000360:	f7ff ffdc 	bl	800031c <SPI_RxByte>
 8000364:	4603      	mov	r3, r0
 8000366:	461a      	mov	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	701a      	strb	r2, [r3, #0]
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <SD_ReadyWait+0x30>)
 800037c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000380:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000382:	f7ff ffcb 	bl	800031c <SPI_RxByte>
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2bff      	cmp	r3, #255	; 0xff
 800038e:	d003      	beq.n	8000398 <SD_ReadyWait+0x24>
 8000390:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SD_ReadyWait+0x30>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d1f4      	bne.n	8000382 <SD_ReadyWait+0xe>

  return res;
 8000398:	79fb      	ldrb	r3, [r7, #7]
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200000b6 	.word	0x200000b6

080003a8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80003ae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80003b2:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80003b4:	f7ff ff6c 	bl	8000290 <DESELECT>
  for(int i = 0; i < 10; i++)
 80003b8:	2300      	movs	r3, #0
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	e005      	b.n	80003ca <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80003be:	20ff      	movs	r0, #255	; 0xff
 80003c0:	f7ff ff76 	bl	80002b0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	3301      	adds	r3, #1
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	2b09      	cmp	r3, #9
 80003ce:	ddf6      	ble.n	80003be <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80003d0:	f7ff ff4e 	bl	8000270 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80003d4:	2340      	movs	r3, #64	; 0x40
 80003d6:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80003e8:	2395      	movs	r3, #149	; 0x95
 80003ea:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80003ec:	463b      	mov	r3, r7
 80003ee:	2106      	movs	r1, #6
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff ff77 	bl	80002e4 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80003f6:	e002      	b.n	80003fe <SD_PowerOn+0x56>
  {
    cnt--;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80003fe:	f7ff ff8d 	bl	800031c <SPI_RxByte>
 8000402:	4603      	mov	r3, r0
 8000404:	2b01      	cmp	r3, #1
 8000406:	d002      	beq.n	800040e <SD_PowerOn+0x66>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1f4      	bne.n	80003f8 <SD_PowerOn+0x50>
  }

  DESELECT();
 800040e:	f7ff ff3f 	bl	8000290 <DESELECT>
  SPI_TxByte(0XFF);
 8000412:	20ff      	movs	r0, #255	; 0xff
 8000414:	f7ff ff4c 	bl	80002b0 <SPI_TxByte>

  PowerFlag = 1;
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <SD_PowerOn+0x80>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200000b9 	.word	0x200000b9

0800042c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <SD_PowerOff+0x14>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	200000b9 	.word	0x200000b9

08000444 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <SD_CheckPower+0x14>)
 800044a:	781b      	ldrb	r3, [r3, #0]
}
 800044c:	4618      	mov	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	200000b9 	.word	0x200000b9

0800045c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <SD_RxDataBlock+0x58>)
 8000468:	22c8      	movs	r2, #200	; 0xc8
 800046a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800046c:	f7ff ff56 	bl	800031c <SPI_RxByte>
 8000470:	4603      	mov	r3, r0
 8000472:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	2bff      	cmp	r3, #255	; 0xff
 8000478:	d103      	bne.n	8000482 <SD_RxDataBlock+0x26>
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <SD_RxDataBlock+0x58>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1f4      	bne.n	800046c <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	2bfe      	cmp	r3, #254	; 0xfe
 8000486:	d001      	beq.n	800048c <SD_RxDataBlock+0x30>
 8000488:	2300      	movs	r3, #0
 800048a:	e00f      	b.n	80004ac <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff60 	bl	8000358 <SPI_RxBytePtr>
  } while(len--);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	1e5a      	subs	r2, r3, #1
 800049c:	603a      	str	r2, [r7, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d1f4      	bne.n	800048c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80004a2:	f7ff ff3b 	bl	800031c <SPI_RxByte>
  SPI_RxByte();
 80004a6:	f7ff ff39 	bl	800031c <SPI_RxByte>

  return TRUE;
 80004aa:	2301      	movs	r3, #1
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200000b4 	.word	0x200000b4

080004b8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80004c8:	f7ff ff54 	bl	8000374 <SD_ReadyWait>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2bff      	cmp	r3, #255	; 0xff
 80004d0:	d001      	beq.n	80004d6 <SD_TxDataBlock+0x1e>
 80004d2:	2300      	movs	r3, #0
 80004d4:	e02f      	b.n	8000536 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fee9 	bl	80002b0 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80004de:	78fb      	ldrb	r3, [r7, #3]
 80004e0:	2bfd      	cmp	r3, #253	; 0xfd
 80004e2:	d020      	beq.n	8000526 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80004e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff fefb 	bl	80002e4 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80004ee:	f7ff ff15 	bl	800031c <SPI_RxByte>
    SPI_RxByte();
 80004f2:	f7ff ff13 	bl	800031c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80004f6:	e00b      	b.n	8000510 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80004f8:	f7ff ff10 	bl	800031c <SPI_RxByte>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f003 031f 	and.w	r3, r3, #31
 8000506:	2b05      	cmp	r3, #5
 8000508:	d006      	beq.n	8000518 <SD_TxDataBlock+0x60>
      i++;
 800050a:	7bbb      	ldrb	r3, [r7, #14]
 800050c:	3301      	adds	r3, #1
 800050e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000510:	7bbb      	ldrb	r3, [r7, #14]
 8000512:	2b40      	cmp	r3, #64	; 0x40
 8000514:	d9f0      	bls.n	80004f8 <SD_TxDataBlock+0x40>
 8000516:	e000      	b.n	800051a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000518:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800051a:	bf00      	nop
 800051c:	f7ff fefe 	bl	800031c <SPI_RxByte>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0fa      	beq.n	800051c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	2b05      	cmp	r3, #5
 800052e:	d101      	bne.n	8000534 <SD_TxDataBlock+0x7c>
 8000530:	2301      	movs	r3, #1
 8000532:	e000      	b.n	8000536 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	4603      	mov	r3, r0
 8000546:	6039      	str	r1, [r7, #0]
 8000548:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800054a:	f7ff ff13 	bl	8000374 <SD_ReadyWait>
 800054e:	4603      	mov	r3, r0
 8000550:	2bff      	cmp	r3, #255	; 0xff
 8000552:	d001      	beq.n	8000558 <SD_SendCmd+0x1a>
 8000554:	23ff      	movs	r3, #255	; 0xff
 8000556:	e042      	b.n	80005de <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fea8 	bl	80002b0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	0e1b      	lsrs	r3, r3, #24
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fea2 	bl	80002b0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fe9c 	bl	80002b0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	0a1b      	lsrs	r3, r3, #8
 800057c:	b2db      	uxtb	r3, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fe96 	bl	80002b0 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe91 	bl	80002b0 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b40      	cmp	r3, #64	; 0x40
 8000592:	d102      	bne.n	800059a <SD_SendCmd+0x5c>
 8000594:	2395      	movs	r3, #149	; 0x95
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e007      	b.n	80005aa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b48      	cmp	r3, #72	; 0x48
 800059e:	d102      	bne.n	80005a6 <SD_SendCmd+0x68>
 80005a0:	2387      	movs	r3, #135	; 0x87
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	e001      	b.n	80005aa <SD_SendCmd+0x6c>
  else crc = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe7f 	bl	80002b0 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b4c      	cmp	r3, #76	; 0x4c
 80005b6:	d101      	bne.n	80005bc <SD_SendCmd+0x7e>
 80005b8:	f7ff feb0 	bl	800031c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80005bc:	230a      	movs	r3, #10
 80005be:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80005c0:	f7ff feac 	bl	800031c <SPI_RxByte>
 80005c4:	4603      	mov	r3, r0
 80005c6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80005c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da05      	bge.n	80005dc <SD_SendCmd+0x9e>
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	73bb      	strb	r3, [r7, #14]
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1f1      	bne.n	80005c0 <SD_SendCmd+0x82>

  return res;
 80005dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SD_disk_initialize+0x14>
 80005f8:	2301      	movs	r3, #1
 80005fa:	e0d1      	b.n	80007a0 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80005fc:	4b6a      	ldr	r3, [pc, #424]	; (80007a8 <SD_disk_initialize+0x1c0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	2b00      	cmp	r3, #0
 8000608:	d003      	beq.n	8000612 <SD_disk_initialize+0x2a>
 800060a:	4b67      	ldr	r3, [pc, #412]	; (80007a8 <SD_disk_initialize+0x1c0>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	e0c6      	b.n	80007a0 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000612:	f7ff fec9 	bl	80003a8 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000616:	f7ff fe2b 	bl	8000270 <SELECT>

  /* check disk type */
  type = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800061e:	2100      	movs	r1, #0
 8000620:	2040      	movs	r0, #64	; 0x40
 8000622:	f7ff ff8c 	bl	800053e <SD_SendCmd>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	f040 80a1 	bne.w	8000770 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800062e:	4b5f      	ldr	r3, [pc, #380]	; (80007ac <SD_disk_initialize+0x1c4>)
 8000630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000634:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000636:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800063a:	2048      	movs	r0, #72	; 0x48
 800063c:	f7ff ff7f 	bl	800053e <SD_SendCmd>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d155      	bne.n	80006f2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e00c      	b.n	8000666 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800064c:	7bfc      	ldrb	r4, [r7, #15]
 800064e:	f7ff fe65 	bl	800031c <SPI_RxByte>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	f104 0310 	add.w	r3, r4, #16
 800065a:	443b      	add	r3, r7
 800065c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	3301      	adds	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d9ef      	bls.n	800064c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800066c:	7abb      	ldrb	r3, [r7, #10]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d17e      	bne.n	8000770 <SD_disk_initialize+0x188>
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	2baa      	cmp	r3, #170	; 0xaa
 8000676:	d17b      	bne.n	8000770 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000678:	2100      	movs	r1, #0
 800067a:	2077      	movs	r0, #119	; 0x77
 800067c:	f7ff ff5f 	bl	800053e <SD_SendCmd>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d807      	bhi.n	8000696 <SD_disk_initialize+0xae>
 8000686:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800068a:	2069      	movs	r0, #105	; 0x69
 800068c:	f7ff ff57 	bl	800053e <SD_SendCmd>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d004      	beq.n	80006a0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000696:	4b45      	ldr	r3, [pc, #276]	; (80007ac <SD_disk_initialize+0x1c4>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1ec      	bne.n	8000678 <SD_disk_initialize+0x90>
 800069e:	e000      	b.n	80006a2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80006a0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80006a2:	4b42      	ldr	r3, [pc, #264]	; (80007ac <SD_disk_initialize+0x1c4>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d062      	beq.n	8000770 <SD_disk_initialize+0x188>
 80006aa:	2100      	movs	r1, #0
 80006ac:	207a      	movs	r0, #122	; 0x7a
 80006ae:	f7ff ff46 	bl	800053e <SD_SendCmd>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d15b      	bne.n	8000770 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	e00c      	b.n	80006d8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80006be:	7bfc      	ldrb	r4, [r7, #15]
 80006c0:	f7ff fe2c 	bl	800031c <SPI_RxByte>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	f104 0310 	add.w	r3, r4, #16
 80006cc:	443b      	add	r3, r7
 80006ce:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	3301      	adds	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d9ef      	bls.n	80006be <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80006de:	7a3b      	ldrb	r3, [r7, #8]
 80006e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SD_disk_initialize+0x104>
 80006e8:	230c      	movs	r3, #12
 80006ea:	e000      	b.n	80006ee <SD_disk_initialize+0x106>
 80006ec:	2304      	movs	r3, #4
 80006ee:	73bb      	strb	r3, [r7, #14]
 80006f0:	e03e      	b.n	8000770 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80006f2:	2100      	movs	r1, #0
 80006f4:	2077      	movs	r0, #119	; 0x77
 80006f6:	f7ff ff22 	bl	800053e <SD_SendCmd>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d808      	bhi.n	8000712 <SD_disk_initialize+0x12a>
 8000700:	2100      	movs	r1, #0
 8000702:	2069      	movs	r0, #105	; 0x69
 8000704:	f7ff ff1b 	bl	800053e <SD_SendCmd>
 8000708:	4603      	mov	r3, r0
 800070a:	2b01      	cmp	r3, #1
 800070c:	d801      	bhi.n	8000712 <SD_disk_initialize+0x12a>
 800070e:	2302      	movs	r3, #2
 8000710:	e000      	b.n	8000714 <SD_disk_initialize+0x12c>
 8000712:	2301      	movs	r3, #1
 8000714:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d10e      	bne.n	800073a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800071c:	2100      	movs	r1, #0
 800071e:	2077      	movs	r0, #119	; 0x77
 8000720:	f7ff ff0d 	bl	800053e <SD_SendCmd>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d80e      	bhi.n	8000748 <SD_disk_initialize+0x160>
 800072a:	2100      	movs	r1, #0
 800072c:	2069      	movs	r0, #105	; 0x69
 800072e:	f7ff ff06 	bl	800053e <SD_SendCmd>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d107      	bne.n	8000748 <SD_disk_initialize+0x160>
 8000738:	e00c      	b.n	8000754 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800073a:	2100      	movs	r1, #0
 800073c:	2041      	movs	r0, #65	; 0x41
 800073e:	f7ff fefe 	bl	800053e <SD_SendCmd>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <SD_disk_initialize+0x1c4>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e2      	bne.n	8000716 <SD_disk_initialize+0x12e>
 8000750:	e000      	b.n	8000754 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000752:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <SD_disk_initialize+0x1c4>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d007      	beq.n	800076c <SD_disk_initialize+0x184>
 800075c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000760:	2050      	movs	r0, #80	; 0x50
 8000762:	f7ff feec 	bl	800053e <SD_SendCmd>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SD_disk_initialize+0x188>
 800076c:	2300      	movs	r3, #0
 800076e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000770:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <SD_disk_initialize+0x1c8>)
 8000772:	7bbb      	ldrb	r3, [r7, #14]
 8000774:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000776:	f7ff fd8b 	bl	8000290 <DESELECT>
  SPI_RxByte();
 800077a:	f7ff fdcf 	bl	800031c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d008      	beq.n	8000796 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <SD_disk_initialize+0x1c0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	f023 0301 	bic.w	r3, r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SD_disk_initialize+0x1c0>)
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	e001      	b.n	800079a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000796:	f7ff fe49 	bl	800042c <SD_PowerOff>
  }

  return Stat;
 800079a:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <SD_disk_initialize+0x1c0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	20000000 	.word	0x20000000
 80007ac:	200000b4 	.word	0x200000b4
 80007b0:	200000b8 	.word	0x200000b8

080007b4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SD_disk_status+0x14>
 80007c4:	2301      	movs	r3, #1
 80007c6:	e002      	b.n	80007ce <SD_disk_status+0x1a>
  return Stat;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SD_disk_status+0x28>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000000 	.word	0x20000000

080007e0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4603      	mov	r3, r0
 80007ee:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d102      	bne.n	80007fc <SD_disk_read+0x1c>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <SD_disk_read+0x20>
 80007fc:	2304      	movs	r3, #4
 80007fe:	e051      	b.n	80008a4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000800:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <SD_disk_read+0xcc>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SD_disk_read+0x32>
 800080e:	2303      	movs	r3, #3
 8000810:	e048      	b.n	80008a4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <SD_disk_read+0xd0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	2b00      	cmp	r3, #0
 800081c:	d102      	bne.n	8000824 <SD_disk_read+0x44>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	025b      	lsls	r3, r3, #9
 8000822:	607b      	str	r3, [r7, #4]

  SELECT();
 8000824:	f7ff fd24 	bl	8000270 <SELECT>

  if (count == 1)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d111      	bne.n	8000852 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2051      	movs	r0, #81	; 0x51
 8000832:	f7ff fe84 	bl	800053e <SD_SendCmd>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d129      	bne.n	8000890 <SD_disk_read+0xb0>
 800083c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f7ff fe0b 	bl	800045c <SD_RxDataBlock>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d021      	beq.n	8000890 <SD_disk_read+0xb0>
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	e01e      	b.n	8000890 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	2052      	movs	r0, #82	; 0x52
 8000856:	f7ff fe72 	bl	800053e <SD_SendCmd>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d117      	bne.n	8000890 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000864:	68b8      	ldr	r0, [r7, #8]
 8000866:	f7ff fdf9 	bl	800045c <SD_RxDataBlock>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00a      	beq.n	8000886 <SD_disk_read+0xa6>
        buff += 512;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000876:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1ed      	bne.n	8000860 <SD_disk_read+0x80>
 8000884:	e000      	b.n	8000888 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000886:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000888:	2100      	movs	r1, #0
 800088a:	204c      	movs	r0, #76	; 0x4c
 800088c:	f7ff fe57 	bl	800053e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000890:	f7ff fcfe 	bl	8000290 <DESELECT>
  SPI_RxByte();
 8000894:	f7ff fd42 	bl	800031c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf14      	ite	ne
 800089e:	2301      	movne	r3, #1
 80008a0:	2300      	moveq	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000000 	.word	0x20000000
 80008b0:	200000b8 	.word	0x200000b8

080008b4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	4603      	mov	r3, r0
 80008c2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d102      	bne.n	80008d0 <SD_disk_write+0x1c>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d101      	bne.n	80008d4 <SD_disk_write+0x20>
 80008d0:	2304      	movs	r3, #4
 80008d2:	e06b      	b.n	80009ac <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008d4:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <SD_disk_write+0x100>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SD_disk_write+0x32>
 80008e2:	2303      	movs	r3, #3
 80008e4:	e062      	b.n	80009ac <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80008e6:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <SD_disk_write+0x100>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SD_disk_write+0x44>
 80008f4:	2302      	movs	r3, #2
 80008f6:	e059      	b.n	80009ac <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <SD_disk_write+0x104>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <SD_disk_write+0x56>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	025b      	lsls	r3, r3, #9
 8000908:	607b      	str	r3, [r7, #4]

  SELECT();
 800090a:	f7ff fcb1 	bl	8000270 <SELECT>

  if (count == 1)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d110      	bne.n	8000936 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	2058      	movs	r0, #88	; 0x58
 8000918:	f7ff fe11 	bl	800053e <SD_SendCmd>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d13a      	bne.n	8000998 <SD_disk_write+0xe4>
 8000922:	21fe      	movs	r1, #254	; 0xfe
 8000924:	68b8      	ldr	r0, [r7, #8]
 8000926:	f7ff fdc7 	bl	80004b8 <SD_TxDataBlock>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d033      	beq.n	8000998 <SD_disk_write+0xe4>
      count = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	e030      	b.n	8000998 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <SD_disk_write+0x104>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d007      	beq.n	8000952 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	2077      	movs	r0, #119	; 0x77
 8000946:	f7ff fdfa 	bl	800053e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800094a:	6839      	ldr	r1, [r7, #0]
 800094c:	2057      	movs	r0, #87	; 0x57
 800094e:	f7ff fdf6 	bl	800053e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	2059      	movs	r0, #89	; 0x59
 8000956:	f7ff fdf2 	bl	800053e <SD_SendCmd>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d11b      	bne.n	8000998 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000960:	21fc      	movs	r1, #252	; 0xfc
 8000962:	68b8      	ldr	r0, [r7, #8]
 8000964:	f7ff fda8 	bl	80004b8 <SD_TxDataBlock>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00a      	beq.n	8000984 <SD_disk_write+0xd0>
        buff += 512;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000974:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	3b01      	subs	r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1ee      	bne.n	8000960 <SD_disk_write+0xac>
 8000982:	e000      	b.n	8000986 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000984:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000986:	21fd      	movs	r1, #253	; 0xfd
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fd95 	bl	80004b8 <SD_TxDataBlock>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d101      	bne.n	8000998 <SD_disk_write+0xe4>
      {
        count = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000998:	f7ff fc7a 	bl	8000290 <DESELECT>
  SPI_RxByte();
 800099c:	f7ff fcbe 	bl	800031c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	200000b8 	.word	0x200000b8

080009bc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	603a      	str	r2, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	460b      	mov	r3, r1
 80009ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SD_disk_ioctl+0x1e>
 80009d6:	2304      	movs	r3, #4
 80009d8:	e115      	b.n	8000c06 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	d124      	bne.n	8000a30 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d012      	beq.n	8000a14 <SD_disk_ioctl+0x58>
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	dc1a      	bgt.n	8000a28 <SD_disk_ioctl+0x6c>
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <SD_disk_ioctl+0x40>
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d006      	beq.n	8000a08 <SD_disk_ioctl+0x4c>
 80009fa:	e015      	b.n	8000a28 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80009fc:	f7ff fd16 	bl	800042c <SD_PowerOff>
      res = RES_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a06:	e0fc      	b.n	8000c02 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8000a08:	f7ff fcce 	bl	80003a8 <SD_PowerOn>
      res = RES_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a12:	e0f6      	b.n	8000c02 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	1c5c      	adds	r4, r3, #1
 8000a18:	f7ff fd14 	bl	8000444 <SD_CheckPower>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000a20:	2300      	movs	r3, #0
 8000a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a26:	e0ec      	b.n	8000c02 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a2e:	e0e8      	b.n	8000c02 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a30:	4b77      	ldr	r3, [pc, #476]	; (8000c10 <SD_disk_ioctl+0x254>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SD_disk_ioctl+0x86>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e0e1      	b.n	8000c06 <SD_disk_ioctl+0x24a>

    SELECT();
 8000a42:	f7ff fc15 	bl	8000270 <SELECT>

    switch (ctrl)
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	2b0d      	cmp	r3, #13
 8000a4a:	f200 80cb 	bhi.w	8000be4 <SD_disk_ioctl+0x228>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <SD_disk_ioctl+0x98>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000b4f 	.word	0x08000b4f
 8000a58:	08000a8d 	.word	0x08000a8d
 8000a5c:	08000b3f 	.word	0x08000b3f
 8000a60:	08000be5 	.word	0x08000be5
 8000a64:	08000be5 	.word	0x08000be5
 8000a68:	08000be5 	.word	0x08000be5
 8000a6c:	08000be5 	.word	0x08000be5
 8000a70:	08000be5 	.word	0x08000be5
 8000a74:	08000be5 	.word	0x08000be5
 8000a78:	08000be5 	.word	0x08000be5
 8000a7c:	08000be5 	.word	0x08000be5
 8000a80:	08000b61 	.word	0x08000b61
 8000a84:	08000b85 	.word	0x08000b85
 8000a88:	08000ba9 	.word	0x08000ba9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2049      	movs	r0, #73	; 0x49
 8000a90:	f7ff fd55 	bl	800053e <SD_SendCmd>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 80a8 	bne.w	8000bec <SD_disk_ioctl+0x230>
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fcda 	bl	800045c <SD_RxDataBlock>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 809e 	beq.w	8000bec <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8000ab0:	7b3b      	ldrb	r3, [r7, #12]
 8000ab2:	099b      	lsrs	r3, r3, #6
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d10e      	bne.n	8000ad8 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000aba:	7d7b      	ldrb	r3, [r7, #21]
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	7d3b      	ldrb	r3, [r7, #20]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	3301      	adds	r3, #1
 8000acc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000ace:	8bfb      	ldrh	r3, [r7, #30]
 8000ad0:	029a      	lsls	r2, r3, #10
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e02e      	b.n	8000b36 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ad8:	7c7b      	ldrb	r3, [r7, #17]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	7dbb      	ldrb	r3, [r7, #22]
 8000ae2:	09db      	lsrs	r3, r3, #7
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	7d7b      	ldrb	r3, [r7, #21]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f003 0306 	and.w	r3, r3, #6
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	3302      	adds	r3, #2
 8000afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000b00:	7d3b      	ldrb	r3, [r7, #20]
 8000b02:	099b      	lsrs	r3, r3, #6
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	7cfb      	ldrb	r3, [r7, #19]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4413      	add	r3, r2
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	7cbb      	ldrb	r3, [r7, #18]
 8000b16:	029b      	lsls	r3, r3, #10
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	3301      	adds	r3, #1
 8000b26:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000b28:	8bfa      	ldrh	r2, [r7, #30]
 8000b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b2e:	3b09      	subs	r3, #9
 8000b30:	409a      	lsls	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000b3c:	e056      	b.n	8000bec <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b4c:	e055      	b.n	8000bfa <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000b4e:	f7ff fc11 	bl	8000374 <SD_ReadyWait>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2bff      	cmp	r3, #255	; 0xff
 8000b56:	d14b      	bne.n	8000bf0 <SD_disk_ioctl+0x234>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b5e:	e047      	b.n	8000bf0 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b60:	2100      	movs	r1, #0
 8000b62:	2049      	movs	r0, #73	; 0x49
 8000b64:	f7ff fceb 	bl	800053e <SD_SendCmd>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d142      	bne.n	8000bf4 <SD_disk_ioctl+0x238>
 8000b6e:	2110      	movs	r1, #16
 8000b70:	6a38      	ldr	r0, [r7, #32]
 8000b72:	f7ff fc73 	bl	800045c <SD_RxDataBlock>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d03b      	beq.n	8000bf4 <SD_disk_ioctl+0x238>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b82:	e037      	b.n	8000bf4 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b84:	2100      	movs	r1, #0
 8000b86:	204a      	movs	r0, #74	; 0x4a
 8000b88:	f7ff fcd9 	bl	800053e <SD_SendCmd>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d132      	bne.n	8000bf8 <SD_disk_ioctl+0x23c>
 8000b92:	2110      	movs	r1, #16
 8000b94:	6a38      	ldr	r0, [r7, #32]
 8000b96:	f7ff fc61 	bl	800045c <SD_RxDataBlock>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d02b      	beq.n	8000bf8 <SD_disk_ioctl+0x23c>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ba6:	e027      	b.n	8000bf8 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	207a      	movs	r0, #122	; 0x7a
 8000bac:	f7ff fcc7 	bl	800053e <SD_SendCmd>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d116      	bne.n	8000be4 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bbc:	e00b      	b.n	8000bd6 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8000bbe:	6a3c      	ldr	r4, [r7, #32]
 8000bc0:	1c63      	adds	r3, r4, #1
 8000bc2:	623b      	str	r3, [r7, #32]
 8000bc4:	f7ff fbaa 	bl	800031c <SPI_RxByte>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d9ef      	bls.n	8000bbe <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8000be4:	2304      	movs	r3, #4
 8000be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bea:	e006      	b.n	8000bfa <SD_disk_ioctl+0x23e>
      break;
 8000bec:	bf00      	nop
 8000bee:	e004      	b.n	8000bfa <SD_disk_ioctl+0x23e>
      break;
 8000bf0:	bf00      	nop
 8000bf2:	e002      	b.n	8000bfa <SD_disk_ioctl+0x23e>
      break;
 8000bf4:	bf00      	nop
 8000bf6:	e000      	b.n	8000bfa <SD_disk_ioctl+0x23e>
      break;
 8000bf8:	bf00      	nop
    }

    DESELECT();
 8000bfa:	f7ff fb49 	bl	8000290 <DESELECT>
    SPI_RxByte();
 8000bfe:	f7ff fb8d 	bl	800031c <SPI_RxByte>
  }

  return res;
 8000c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	372c      	adds	r7, #44	; 0x2c
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000

08000c14 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000c1e:	4a38      	ldr	r2, [pc, #224]	; (8000d00 <HD44780_Init+0xec>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <HD44780_Init+0xf0>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000c2a:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <HD44780_Init+0xf4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000c30:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <HD44780_Init+0xec>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d907      	bls.n	8000c48 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000c38:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <HD44780_Init+0xf4>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <HD44780_Init+0xf4>)
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e006      	b.n	8000c56 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <HD44780_Init+0xf4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <HD44780_Init+0xf4>)
 8000c54:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000c56:	f000 f9b1 	bl	8000fbc <DelayInit>
  HAL_Delay(50);
 8000c5a:	2032      	movs	r0, #50	; 0x32
 8000c5c:	f001 ff3a 	bl	8002ad4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <HD44780_Init+0xf0>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f96f 	bl	8000f48 <ExpanderWrite>
  HAL_Delay(1000);
 8000c6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6e:	f001 ff31 	bl	8002ad4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000c72:	2030      	movs	r0, #48	; 0x30
 8000c74:	f000 f957 	bl	8000f26 <Write4Bits>
  DelayUS(4500);
 8000c78:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c7c:	f000 f9c8 	bl	8001010 <DelayUS>

  Write4Bits(0x03 << 4);
 8000c80:	2030      	movs	r0, #48	; 0x30
 8000c82:	f000 f950 	bl	8000f26 <Write4Bits>
  DelayUS(4500);
 8000c86:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c8a:	f000 f9c1 	bl	8001010 <DelayUS>

  Write4Bits(0x03 << 4);
 8000c8e:	2030      	movs	r0, #48	; 0x30
 8000c90:	f000 f949 	bl	8000f26 <Write4Bits>
  DelayUS(4500);
 8000c94:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c98:	f000 f9ba 	bl	8001010 <DelayUS>

  Write4Bits(0x02 << 4);
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f000 f942 	bl	8000f26 <Write4Bits>
  DelayUS(100);
 8000ca2:	2064      	movs	r0, #100	; 0x64
 8000ca4:	f000 f9b4 	bl	8001010 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HD44780_Init+0xf4>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f8fa 	bl	8000eac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HD44780_Init+0xf8>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000cbe:	f000 f875 	bl	8000dac <HD44780_Display>
  HD44780_Clear();
 8000cc2:	f000 f82b 	bl	8000d1c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HD44780_Init+0xfc>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HD44780_Init+0xfc>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f8e8 	bl	8000eac <SendCommand>
  DelayUS(4500);
 8000cdc:	f241 1094 	movw	r0, #4500	; 0x1194
 8000ce0:	f000 f996 	bl	8001010 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000ce4:	490b      	ldr	r1, [pc, #44]	; (8000d14 <HD44780_Init+0x100>)
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f8a2 	bl	8000e30 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000cec:	490a      	ldr	r1, [pc, #40]	; (8000d18 <HD44780_Init+0x104>)
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 f89e 	bl	8000e30 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000cf4:	f000 f81d 	bl	8000d32 <HD44780_Home>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000bd 	.word	0x200000bd
 8000d04:	200000be 	.word	0x200000be
 8000d08:	200000ba 	.word	0x200000ba
 8000d0c:	200000bb 	.word	0x200000bb
 8000d10:	200000bc 	.word	0x200000bc
 8000d14:	20000004 	.word	0x20000004
 8000d18:	2000000c 	.word	0x2000000c

08000d1c <HD44780_Clear>:

void HD44780_Clear()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 f8c3 	bl	8000eac <SendCommand>
  DelayUS(2000);
 8000d26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d2a:	f000 f971 	bl	8001010 <DelayUS>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HD44780_Home>:

void HD44780_Home()
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000d36:	2002      	movs	r0, #2
 8000d38:	f000 f8b8 	bl	8000eac <SendCommand>
  DelayUS(2000);
 8000d3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d40:	f000 f966 	bl	8001010 <DelayUS>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HD44780_SetCursor+0x5c>)
 8000d5a:	f107 0408 	add.w	r4, r7, #8
 8000d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HD44780_SetCursor+0x60>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d303      	bcc.n	8000d76 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HD44780_SetCursor+0x60>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	3318      	adds	r3, #24
 8000d7c:	443b      	add	r3, r7
 8000d7e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f889 	bl	8000eac <SendCommand>
}
 8000d9a:	bf00      	nop
 8000d9c:	371c      	adds	r7, #28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	bf00      	nop
 8000da4:	0800ecb8 	.word	0x0800ecb8
 8000da8:	200000bd 	.word	0x200000bd

08000dac <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HD44780_Display+0x28>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HD44780_Display+0x28>)
 8000dbc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HD44780_Display+0x28>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f86f 	bl	8000eac <SendCommand>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000bb 	.word	0x200000bb

08000dd8 <HD44780_Cursor>:
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HD44780_Cursor+0x28>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HD44780_Cursor+0x28>)
 8000de8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HD44780_Cursor+0x28>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f859 	bl	8000eac <SendCommand>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000bb 	.word	0x200000bb

08000e04 <HD44780_Blink>:
  dpControl &= ~LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Blink()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HD44780_Blink+0x28>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HD44780_Blink+0x28>)
 8000e14:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HD44780_Blink+0x28>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f843 	bl	8000eac <SendCommand>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000bb 	.word	0x200000bb

08000e30 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f82a 	bl	8000eac <SendCommand>
  for (int i=0; i<8; i++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e009      	b.n	8000e72 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f82e 	bl	8000ec8 <SendChar>
  for (int i=0; i<8; i++)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2b07      	cmp	r3, #7
 8000e76:	ddf2      	ble.n	8000e5e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000e8a:	e006      	b.n	8000e9a <HD44780_PrintStr+0x18>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f817 	bl	8000ec8 <SendChar>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f4      	bne.n	8000e8c <HD44780_PrintStr+0xa>
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f812 	bl	8000ee4 <Send>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f804 	bl	8000ee4 <Send>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f023 030f 	bic.w	r3, r3, #15
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f80b 	bl	8000f26 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000f10:	7bba      	ldrb	r2, [r7, #14]
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f804 	bl	8000f26 <Write4Bits>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f808 	bl	8000f48 <ExpanderWrite>
  PulseEnable(value);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f820 	bl	8000f80 <PulseEnable>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <ExpanderWrite+0x30>)
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000f5e:	f107 020f 	add.w	r2, r7, #15
 8000f62:	230a      	movs	r3, #10
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	214e      	movs	r1, #78	; 0x4e
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <ExpanderWrite+0x34>)
 8000f6c:	f003 fa0e 	bl	800438c <HAL_I2C_Master_Transmit>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000be 	.word	0x200000be
 8000f7c:	20000168 	.word	0x20000168

08000f80 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffd8 	bl	8000f48 <ExpanderWrite>
  DelayUS(20);
 8000f98:	2014      	movs	r0, #20
 8000f9a:	f000 f839 	bl	8001010 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffce 	bl	8000f48 <ExpanderWrite>
  DelayUS(20);
 8000fac:	2014      	movs	r0, #20
 8000fae:	f000 f82f 	bl	8001010 <DelayUS>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <DelayInit>:

static void DelayInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <DelayInit+0x4c>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <DelayInit+0x4c>)
 8000fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <DelayInit+0x4c>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <DelayInit+0x4c>)
 8000fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <DelayInit+0x50>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <DelayInit+0x50>)
 8000fde:	f023 0301 	bic.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <DelayInit+0x50>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <DelayInit+0x50>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <DelayInit+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000ff6:	bf00      	nop
  __ASM volatile ("NOP");
 8000ff8:	bf00      	nop
  __ASM volatile ("NOP");
 8000ffa:	bf00      	nop
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000edf0 	.word	0xe000edf0
 800100c:	e0001000 	.word	0xe0001000

08001010 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <DelayUS+0x44>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <DelayUS+0x48>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	0c9a      	lsrs	r2, r3, #18
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <DelayUS+0x4c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <DelayUS+0x4c>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f6      	bhi.n	8001032 <DelayUS+0x22>
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000014 	.word	0x20000014
 8001058:	431bde83 	.word	0x431bde83
 800105c:	e0001000 	.word	0xe0001000

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memset(buff_music, 0, sizeof(buff_music));
 8001064:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001068:	2100      	movs	r1, #0
 800106a:	481c      	ldr	r0, [pc, #112]	; (80010dc <main+0x7c>)
 800106c:	f00c fc30 	bl	800d8d0 <memset>
	tim17_counter = 0;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <main+0x80>)
 8001072:	2200      	movs	r2, #0
 8001074:	801a      	strh	r2, [r3, #0]
	adc_counter = 0;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <main+0x84>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f001 fcc4 	bl	8002a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f834 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 faa0 	bl	80015c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001088:	f000 f91c 	bl	80012c4 <MX_I2C1_Init>
  MX_SPI2_Init();
 800108c:	f000 f95a 	bl	8001344 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001090:	f000 fa44 	bl	800151c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001094:	f008 f806 	bl	80090a4 <MX_FATFS_Init>
  MX_DMA_Init();
 8001098:	f000 fa70 	bl	800157c <MX_DMA_Init>
  MX_TIM17_Init();
 800109c:	f000 f9c6 	bl	800142c <MX_TIM17_Init>
  MX_TIM6_Init();
 80010a0:	f000 f98e 	bl	80013c0 <MX_TIM6_Init>
  MX_ADC1_Init();
 80010a4:	f000 f880 	bl	80011a8 <MX_ADC1_Init>
  MX_DAC_Init();
 80010a8:	f000 f8e2 	bl	8001270 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  process_SD_card();
 80010ac:	f000 fb24 	bl	80016f8 <process_SD_card>

	HD44780_Init(2);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff fdaf 	bl	8000c14 <HD44780_Init>
	HD44780_Clear();
 80010b6:	f7ff fe31 	bl	8000d1c <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80010ba:	2100      	movs	r1, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fe43 	bl	8000d48 <HD44780_SetCursor>
	HD44780_PrintStr("     HELLO");
 80010c2:	4809      	ldr	r0, [pc, #36]	; (80010e8 <main+0x88>)
 80010c4:	f7ff fedd 	bl	8000e82 <HD44780_PrintStr>
	HD44780_SetCursor(10,1);
 80010c8:	2101      	movs	r1, #1
 80010ca:	200a      	movs	r0, #10
 80010cc:	f7ff fe3c 	bl	8000d48 <HD44780_SetCursor>
	HAL_Delay(2000);
 80010d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010d4:	f001 fcfe 	bl	8002ad4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <main+0x78>
 80010da:	bf00      	nop
 80010dc:	20003430 	.word	0x20003430
 80010e0:	20003634 	.word	0x20003634
 80010e4:	20003638 	.word	0x20003638
 80010e8:	0800ecc8 	.word	0x0800ecc8

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09c      	sub	sp, #112	; 0x70
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f6:	2228      	movs	r2, #40	; 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00c fbe8 	bl	800d8d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2234      	movs	r2, #52	; 0x34
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f00c fbda 	bl	800d8d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111c:	2302      	movs	r3, #2
 800111e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	2301      	movs	r3, #1
 8001122:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001124:	2310      	movs	r3, #16
 8001126:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001128:	2302      	movs	r3, #2
 800112a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800112c:	2300      	movs	r3, #0
 800112e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001130:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001134:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fcc2 	bl	8004ac4 <HAL_RCC_OscConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001146:	f000 ff4d 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114e:	2302      	movs	r3, #2
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001160:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fcea 	bl	8005b40 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001172:	f000 ff37 	bl	8001fe4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <SystemClock_Config+0xb8>)
 8001178:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800117e:	2310      	movs	r3, #16
 8001180:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_PLLCLK;
 8001182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4618      	mov	r0, r3
 800118c:	f004 ff0e 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001196:	f000 ff25 	bl	8001fe4 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3770      	adds	r7, #112	; 0x70
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	00100021 	.word	0x00100021

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */
  hadc1.Init.ContinuousConvMode = ENABLE;   ////// !!!!!!!!!!!!!!!!!
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <MX_ADC1_Init+0xc4>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DMAContinuousRequests = ENABLE; //////////!!!!!!!!!!   ENABLE is from lcd displej
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_ADC1_Init+0xc4>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <MX_ADC1_Init+0xc4>)
 80011ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <MX_ADC1_Init+0xc4>)
 80011d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <MX_ADC1_Init+0xc4>)
 80011de:	2210      	movs	r2, #16
 80011e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <MX_ADC1_Init+0xc4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <MX_ADC1_Init+0xc4>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_ADC1_Init+0xc4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_ADC1_Init+0xc4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_ADC1_Init+0xc4>)
 80011fe:	2201      	movs	r2, #1
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_ADC1_Init+0xc4>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_ADC1_Init+0xc4>)
 800120a:	2201      	movs	r2, #1
 800120c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_ADC1_Init+0xc4>)
 8001210:	2204      	movs	r2, #4
 8001212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_ADC1_Init+0xc4>)
 8001218:	2204      	movs	r2, #4
 800121a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_ADC1_Init+0xc4>)
 800121e:	2200      	movs	r2, #0
 8001220:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_ADC1_Init+0xc4>)
 8001224:	2200      	movs	r2, #0
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001228:	4810      	ldr	r0, [pc, #64]	; (800126c <MX_ADC1_Init+0xc4>)
 800122a:	f001 fc77 	bl	8002b1c <HAL_ADC_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001234:	f000 fed6 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001238:	2304      	movs	r3, #4
 800123a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123c:	2301      	movs	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001244:	2303      	movs	r3, #3
 8001246:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001248:	2301      	movs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 154;
 800124c:	239a      	movs	r3, #154	; 0x9a
 800124e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_ADC1_Init+0xc4>)
 8001256:	f001 fe89 	bl	8002f6c <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001260:	f000 fec0 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200000c0 	.word	0x200000c0

08001270 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_DAC_Init+0x4c>)
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <MX_DAC_Init+0x50>)
 8001284:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_DAC_Init+0x4c>)
 8001288:	f002 fbb7 	bl	80039fa <HAL_DAC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001292:	f000 fea7 	bl	8001fe4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_DAC_Init+0x4c>)
 80012a6:	f002 fc05 	bl	8003ab4 <HAL_DAC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80012b0:	f000 fe98 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000154 	.word	0x20000154
 80012c0:	40007400 	.word	0x40007400

080012c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <MX_I2C1_Init+0x74>)
 80012ca:	4a1c      	ldr	r2, [pc, #112]	; (800133c <MX_I2C1_Init+0x78>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_I2C1_Init+0x74>)
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <MX_I2C1_Init+0x7c>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_I2C1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_I2C1_Init+0x74>)
 80012dc:	2201      	movs	r2, #1
 80012de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <MX_I2C1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_I2C1_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_I2C1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <MX_I2C1_Init+0x74>)
 8001300:	f002 ffb4 	bl	800426c <HAL_I2C_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800130a:	f000 fe6b 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <MX_I2C1_Init+0x74>)
 8001312:	f003 fb3f 	bl	8004994 <HAL_I2CEx_ConfigAnalogFilter>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800131c:	f000 fe62 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001320:	2100      	movs	r1, #0
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_I2C1_Init+0x74>)
 8001324:	f003 fb81 	bl	8004a2a <HAL_I2CEx_ConfigDigitalFilter>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800132e:	f000 fe59 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000168 	.word	0x20000168
 800133c:	40005400 	.word	0x40005400
 8001340:	10707dbc 	.word	0x10707dbc

08001344 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_SPI2_Init+0x74>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_SPI2_Init+0x78>)
 800134c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_SPI2_Init+0x74>)
 8001350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001354:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_SPI2_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_SPI2_Init+0x74>)
 800135e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001362:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_SPI2_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <MX_SPI2_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_SPI2_Init+0x74>)
 8001372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001376:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_SPI2_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_SPI2_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_SPI2_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_SPI2_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_SPI2_Init+0x74>)
 8001392:	2207      	movs	r2, #7
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_SPI2_Init+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_SPI2_Init+0x74>)
 800139e:	2208      	movs	r2, #8
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_SPI2_Init+0x74>)
 80013a4:	f004 ff94 	bl	80062d0 <HAL_SPI_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 fe19 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001bc 	.word	0x200001bc
 80013bc:	40003800 	.word	0x40003800

080013c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_TIM6_Init+0x64>)
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <MX_TIM6_Init+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 128;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_TIM6_Init+0x64>)
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_TIM6_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_TIM6_Init+0x64>)
 80013e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80013e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_TIM6_Init+0x64>)
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_TIM6_Init+0x64>)
 80013f2:	f005 fd13 	bl	8006e1c <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013fc:	f000 fdf2 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_TIM6_Init+0x64>)
 800140e:	f007 f929 	bl	8008664 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001418:	f000 fde4 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000220 	.word	0x20000220
 8001428:	40001000 	.word	0x40001000

0800142c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b092      	sub	sp, #72	; 0x48
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	615a      	str	r2, [r3, #20]
 8001444:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001446:	463b      	mov	r3, r7
 8001448:	222c      	movs	r2, #44	; 0x2c
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f00c fa3f 	bl	800d8d0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <MX_TIM17_Init+0xe8>)
 8001454:	4a30      	ldr	r2, [pc, #192]	; (8001518 <MX_TIM17_Init+0xec>)
 8001456:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 30;
 8001458:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <MX_TIM17_Init+0xe8>)
 800145a:	221e      	movs	r2, #30
 800145c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <MX_TIM17_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <MX_TIM17_Init+0xe8>)
 8001466:	22ff      	movs	r2, #255	; 0xff
 8001468:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <MX_TIM17_Init+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <MX_TIM17_Init+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <MX_TIM17_Init+0xe8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800147c:	4825      	ldr	r0, [pc, #148]	; (8001514 <MX_TIM17_Init+0xe8>)
 800147e:	f005 fccd 	bl	8006e1c <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001488:	f000 fdac 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800148c:	4821      	ldr	r0, [pc, #132]	; (8001514 <MX_TIM17_Init+0xe8>)
 800148e:	f005 fda0 	bl	8006fd2 <HAL_TIM_PWM_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001498:	f000 fda4 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149c:	2360      	movs	r3, #96	; 0x60
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014bc:	2200      	movs	r2, #0
 80014be:	4619      	mov	r1, r3
 80014c0:	4814      	ldr	r0, [pc, #80]	; (8001514 <MX_TIM17_Init+0xe8>)
 80014c2:	f006 fb69 	bl	8007b98 <HAL_TIM_PWM_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80014cc:	f000 fd8a 	bl	8001fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	4619      	mov	r1, r3
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <MX_TIM17_Init+0xe8>)
 80014f8:	f007 f91a 	bl	8008730 <HAL_TIMEx_ConfigBreakDeadTime>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8001502:	f000 fd6f 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001506:	4803      	ldr	r0, [pc, #12]	; (8001514 <MX_TIM17_Init+0xe8>)
 8001508:	f000 ff46 	bl	8002398 <HAL_TIM_MspPostInit>

}
 800150c:	bf00      	nop
 800150e:	3748      	adds	r7, #72	; 0x48
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000026c 	.word	0x2000026c
 8001518:	40014800 	.word	0x40014800

0800151c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <MX_USART1_UART_Init+0x5c>)
 8001524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART1_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART1_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART1_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001560:	f007 f97c 	bl	800885c <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800156a:	f000 fd3b 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002fc 	.word	0x200002fc
 8001578:	40013800 	.word	0x40013800

0800157c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_DMA_Init+0x48>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <MX_DMA_Init+0x48>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <MX_DMA_Init+0x48>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2102      	movs	r1, #2
 800159e:	200b      	movs	r0, #11
 80015a0:	f002 f9f5 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015a4:	200b      	movs	r0, #11
 80015a6:	f002 fa0e 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2102      	movs	r1, #2
 80015ae:	2011      	movs	r0, #17
 80015b0:	f002 f9ed 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80015b4:	2011      	movs	r0, #17
 80015b6:	f002 fa06 	bl	80039c6 <HAL_NVIC_EnableIRQ>

}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6153      	str	r3, [r2, #20]
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_GPIO_Init+0x100>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2108      	movs	r1, #8
 800162a:	4828      	ldr	r0, [pc, #160]	; (80016cc <MX_GPIO_Init+0x104>)
 800162c:	f002 fdee 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f641 4101 	movw	r1, #7169	; 0x1c01
 8001636:	4826      	ldr	r0, [pc, #152]	; (80016d0 <MX_GPIO_Init+0x108>)
 8001638:	f002 fde8 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800163c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001642:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	481e      	ldr	r0, [pc, #120]	; (80016cc <MX_GPIO_Init+0x104>)
 8001654:	f002 fc50 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001658:	2308      	movs	r3, #8
 800165a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4619      	mov	r1, r3
 800166e:	4817      	ldr	r0, [pc, #92]	; (80016cc <MX_GPIO_Init+0x104>)
 8001670:	f002 fc42 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001674:	f641 4301 	movw	r3, #7169	; 0x1c01
 8001678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4619      	mov	r1, r3
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <MX_GPIO_Init+0x108>)
 800168e:	f002 fc33 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001692:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001698:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800169c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800169e:	2302      	movs	r3, #2
 80016a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	4619      	mov	r1, r3
 80016a8:	4808      	ldr	r0, [pc, #32]	; (80016cc <MX_GPIO_Init+0x104>)
 80016aa:	f002 fc25 	bl	8003ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2104      	movs	r1, #4
 80016b2:	2028      	movs	r0, #40	; 0x28
 80016b4:	f002 f96b 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016b8:	2028      	movs	r0, #40	; 0x28
 80016ba:	f002 f984 	bl	80039c6 <HAL_NVIC_EnableIRQ>

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48000800 	.word	0x48000800
 80016d0:	48000400 	.word	0x48000400

080016d4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80016dc:	1d39      	adds	r1, r7, #4
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	2201      	movs	r2, #1
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <__io_putchar+0x20>)
 80016e6:	f007 f907 	bl	80088f8 <HAL_UART_Transmit>
  return ch;
 80016ea:	687b      	ldr	r3, [r7, #4]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200002fc 	.word	0x200002fc

080016f8 <process_SD_card>:

void process_SD_card( void )
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	4936      	ldr	r1, [pc, #216]	; (80017dc <process_SD_card+0xe4>)
 8001702:	2000      	movs	r0, #0
 8001704:	f00a fb98 	bl	800be38 <f_mount>
	fres = f_mount(&FatFs, "", 1);
 8001708:	2201      	movs	r2, #1
 800170a:	4934      	ldr	r1, [pc, #208]	; (80017dc <process_SD_card+0xe4>)
 800170c:	4834      	ldr	r0, [pc, #208]	; (80017e0 <process_SD_card+0xe8>)
 800170e:	f00a fb93 	bl	800be38 <f_mount>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <process_SD_card+0xec>)
 8001718:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "0:/data/data_file.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 800171a:	220b      	movs	r2, #11
 800171c:	4932      	ldr	r1, [pc, #200]	; (80017e8 <process_SD_card+0xf0>)
 800171e:	4833      	ldr	r0, [pc, #204]	; (80017ec <process_SD_card+0xf4>)
 8001720:	f00a fbd4 	bl	800becc <f_open>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <process_SD_card+0xec>)
 800172a:	701a      	strb	r2, [r3, #0]
	fil.fsize = old_fsize;
 800172c:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <process_SD_card+0xf8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a2e      	ldr	r2, [pc, #184]	; (80017ec <process_SD_card+0xf4>)
 8001732:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001736:	60d3      	str	r3, [r2, #12]
	if (fres == FR_OK) {
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <process_SD_card+0xec>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d13c      	bne.n	80017ba <process_SD_card+0xc2>
	    UINT bytesWritten;
	    f_lseek(&fil, f_size(&fil));
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <process_SD_card+0xf4>)
 8001742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4619      	mov	r1, r3
 800174a:	4828      	ldr	r0, [pc, #160]	; (80017ec <process_SD_card+0xf4>)
 800174c:	f00b fbf0 	bl	800cf30 <f_lseek>
	    DWORD size_of_fil;
	    size_of_fil = f_size(&fil);
 8001750:	4b26      	ldr	r3, [pc, #152]	; (80017ec <process_SD_card+0xf4>)
 8001752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	607b      	str	r3, [r7, #4]
	    printf("size of file 1 : %d \r\n", size_of_fil);
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4825      	ldr	r0, [pc, #148]	; (80017f4 <process_SD_card+0xfc>)
 800175e:	f00c f8bf 	bl	800d8e0 <iprintf>
		memset(buff_music, 'A', sizeof(buff_music));
 8001762:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001766:	2141      	movs	r1, #65	; 0x41
 8001768:	4823      	ldr	r0, [pc, #140]	; (80017f8 <process_SD_card+0x100>)
 800176a:	f00c f8b1 	bl	800d8d0 <memset>
		fres = f_write(&fil, buff_music, sizeof(buff_music), &bytesWritten);
 800176e:	463b      	mov	r3, r7
 8001770:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001774:	4920      	ldr	r1, [pc, #128]	; (80017f8 <process_SD_card+0x100>)
 8001776:	481d      	ldr	r0, [pc, #116]	; (80017ec <process_SD_card+0xf4>)
 8001778:	f00b f8a8 	bl	800c8cc <f_write>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <process_SD_card+0xec>)
 8001782:	701a      	strb	r2, [r3, #0]
		size_of_fil = f_size(&fil);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <process_SD_card+0xf4>)
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	607b      	str	r3, [r7, #4]
		printf("size of file 2: %d \r\n", size_of_fil);
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	481a      	ldr	r0, [pc, #104]	; (80017fc <process_SD_card+0x104>)
 8001792:	f00c f8a5 	bl	800d8e0 <iprintf>
		 if (fres == FR_OK) {
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <process_SD_card+0xec>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <process_SD_card+0xb4>
				// Data written successfully
				f_close(&fil);  // Close the file
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <process_SD_card+0xf4>)
 80017a0:	f00b fb9b 	bl	800ceda <f_close>
				printf("Data written to file: data_file.txt \r\n");
 80017a4:	4816      	ldr	r0, [pc, #88]	; (8001800 <process_SD_card+0x108>)
 80017a6:	f00c f921 	bl	800d9ec <puts>
 80017aa:	e009      	b.n	80017c0 <process_SD_card+0xc8>
			} else {
				// Error occurred while writing data
				f_close(&fil);  // Close the file
 80017ac:	480f      	ldr	r0, [pc, #60]	; (80017ec <process_SD_card+0xf4>)
 80017ae:	f00b fb94 	bl	800ceda <f_close>
				printf("Error writing data to file: data_file.txt \r\n");
 80017b2:	4814      	ldr	r0, [pc, #80]	; (8001804 <process_SD_card+0x10c>)
 80017b4:	f00c f91a 	bl	800d9ec <puts>
 80017b8:	e002      	b.n	80017c0 <process_SD_card+0xc8>
			}
		    } else {
		        // Error occurred while opening the file
		        printf("Error opening file: data_file.txt \r\n");
 80017ba:	4813      	ldr	r0, [pc, #76]	; (8001808 <process_SD_card+0x110>)
 80017bc:	f00c f916 	bl	800d9ec <puts>
		    }
		  f_close(&fil);
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <process_SD_card+0xf4>)
 80017c2:	f00b fb8a 	bl	800ceda <f_close>
		  old_fsize = fil.fsize;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <process_SD_card+0xf4>)
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <process_SD_card+0xf8>)
 80017d0:	6013      	str	r3, [r2, #0]
		  //f_mount(NULL, "", 0);
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	0800ecd4 	.word	0x0800ecd4
 80017e0:	20000384 	.word	0x20000384
 80017e4:	20003428 	.word	0x20003428
 80017e8:	0800ecd8 	.word	0x0800ecd8
 80017ec:	200013b4 	.word	0x200013b4
 80017f0:	2000342c 	.word	0x2000342c
 80017f4:	0800ecf0 	.word	0x0800ecf0
 80017f8:	20003430 	.word	0x20003430
 80017fc:	0800ed08 	.word	0x0800ed08
 8001800:	0800ed20 	.word	0x0800ed20
 8001804:	0800ed48 	.word	0x0800ed48
 8001808:	0800ed74 	.word	0x0800ed74

0800180c <HAL_GPIO_EXTI_Callback>:

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b094      	sub	sp, #80	; 0x50
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)  //Esc
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800181c:	d123      	bne.n	8001866 <HAL_GPIO_EXTI_Callback+0x5a>
	{
		//Start menu
		HD44780_Clear();
 800181e:	f7ff fa7d 	bl	8000d1c <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8001822:	2100      	movs	r1, #0
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff fa8f 	bl	8000d48 <HD44780_SetCursor>
		HD44780_PrintStr("1. Music");
 800182a:	4876      	ldr	r0, [pc, #472]	; (8001a04 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800182c:	f7ff fb29 	bl	8000e82 <HD44780_PrintStr>
		HD44780_SetCursor(0,1);
 8001830:	2101      	movs	r1, #1
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fa88 	bl	8000d48 <HD44780_SetCursor>
		HD44780_PrintStr("2. Recording");
 8001838:	4873      	ldr	r0, [pc, #460]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800183a:	f7ff fb22 	bl	8000e82 <HD44780_PrintStr>
	    HD44780_Cursor();
 800183e:	f7ff facb 	bl	8000dd8 <HD44780_Cursor>
	    HD44780_Blink();
 8001842:	f7ff fadf 	bl	8000e04 <HD44780_Blink>
	    HD44780_SetCursor(0,0);
 8001846:	2100      	movs	r1, #0
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff fa7d 	bl	8000d48 <HD44780_SetCursor>
	    display_status.page = 0;
 800184e:	4a6f      	ldr	r2, [pc, #444]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001850:	7813      	ldrb	r3, [r2, #0]
 8001852:	f36f 0303 	bfc	r3, #0, #4
 8001856:	7013      	strb	r3, [r2, #0]
	    display_status.cursor_line = 0;
 8001858:	4b6c      	ldr	r3, [pc, #432]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 800185a:	2200      	movs	r2, #0
 800185c:	705a      	strb	r2, [r3, #1]

	    stop_play_music(&fil);
 800185e:	486c      	ldr	r0, [pc, #432]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x204>)
 8001860:	f000 fb96 	bl	8001f90 <stop_play_music>
		{
			HD44780_SetCursor(0,0);
			display_status.cursor_line =0;
		}
	}
}
 8001864:	e33f      	b.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
	else if(GPIO_Pin == GPIO_PIN_10)  // Enter
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186c:	f040 81d6 	bne.w	8001c1c <HAL_GPIO_EXTI_Callback+0x410>
		if(display_status.page == 0 && display_status.cursor_line ==0) // Music
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d168      	bne.n	8001950 <HAL_GPIO_EXTI_Callback+0x144>
 800187e:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d164      	bne.n	8001950 <HAL_GPIO_EXTI_Callback+0x144>
			HD44780_Clear();
 8001886:	f7ff fa49 	bl	8000d1c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 800188a:	2100      	movs	r1, #0
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff fa5b 	bl	8000d48 <HD44780_SetCursor>
			display_status.page = 1;
 8001892:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001894:	7813      	ldrb	r3, [r2, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	f361 0303 	bfi	r3, r1, #0, #4
 800189c:	7013      	strb	r3, [r2, #0]
			display_status.cursor_line = 0;
 800189e:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	705a      	strb	r2, [r3, #1]
			fres = f_mount(&FatFs, "", 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	495b      	ldr	r1, [pc, #364]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x208>)
 80018a8:	485b      	ldr	r0, [pc, #364]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x20c>)
 80018aa:	f00a fac5 	bl	800be38 <f_mount>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x210>)
 80018b4:	701a      	strb	r2, [r3, #0]
			fres=f_opendir(&dp,"0:/music");
 80018b6:	495a      	ldr	r1, [pc, #360]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x214>)
 80018b8:	485a      	ldr	r0, [pc, #360]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x218>)
 80018ba:	f00b fe2b 	bl	800d514 <f_opendir>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x210>)
 80018c4:	701a      	strb	r2, [r3, #0]
			printf("fres = %d \r\n", fres);
 80018c6:	4b55      	ldr	r3, [pc, #340]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x210>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4856      	ldr	r0, [pc, #344]	; (8001a28 <HAL_GPIO_EXTI_Callback+0x21c>)
 80018ce:	f00c f807 	bl	800d8e0 <iprintf>
			display_status.file_number = 0;
 80018d2:	4b4e      	ldr	r3, [pc, #312]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	709a      	strb	r2, [r3, #2]
				fres=f_readdir(&dp, &fno);
 80018d8:	4954      	ldr	r1, [pc, #336]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x220>)
 80018da:	4852      	ldr	r0, [pc, #328]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x218>)
 80018dc:	f00b feb4 	bl	800d648 <f_readdir>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x210>)
 80018e6:	701a      	strb	r2, [r3, #0]
				printf("file name: %s \r\n", fno.fname);
 80018e8:	4951      	ldr	r1, [pc, #324]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x224>)
 80018ea:	4852      	ldr	r0, [pc, #328]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x228>)
 80018ec:	f00b fff8 	bl	800d8e0 <iprintf>
				sprintf(buff_music,"%d. %s", display_status.file_number+1, fno.fname);
 80018f0:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 80018f2:	789b      	ldrb	r3, [r3, #2]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x224>)
 80018f8:	494f      	ldr	r1, [pc, #316]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x22c>)
 80018fa:	4850      	ldr	r0, [pc, #320]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x230>)
 80018fc:	f00c f87e 	bl	800d9fc <siprintf>
				if(display_status.file_number<2)
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001902:	789b      	ldrb	r3, [r3, #2]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d808      	bhi.n	800191a <HAL_GPIO_EXTI_Callback+0x10e>
					HD44780_SetCursor(0,display_status.file_number);
 8001908:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 800190a:	789b      	ldrb	r3, [r3, #2]
 800190c:	4619      	mov	r1, r3
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fa1a 	bl	8000d48 <HD44780_SetCursor>
					HD44780_PrintStr(buff_music);
 8001914:	4849      	ldr	r0, [pc, #292]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x230>)
 8001916:	f7ff fab4 	bl	8000e82 <HD44780_PrintStr>
				display_status.file_number++;
 800191a:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 800191c:	789b      	ldrb	r3, [r3, #2]
 800191e:	3301      	adds	r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001924:	709a      	strb	r2, [r3, #2]
			while (fres == FR_OK && fno.fname[0] !='\0');
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x210>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <HAL_GPIO_EXTI_Callback+0x12a>
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x220>)
 8001930:	7a5b      	ldrb	r3, [r3, #9]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1d0      	bne.n	80018d8 <HAL_GPIO_EXTI_Callback+0xcc>
			display_status.file_number =1; //Display can show only 2 lines
 8001936:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001938:	2201      	movs	r2, #1
 800193a:	709a      	strb	r2, [r3, #2]
			f_mount(NULL, "", 0);
 800193c:	2200      	movs	r2, #0
 800193e:	4935      	ldr	r1, [pc, #212]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x208>)
 8001940:	2000      	movs	r0, #0
 8001942:	f00a fa79 	bl	800be38 <f_mount>
			HD44780_SetCursor(0,0);
 8001946:	2100      	movs	r1, #0
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff f9fd 	bl	8000d48 <HD44780_SetCursor>
 800194e:	e0d6      	b.n	8001afe <HAL_GPIO_EXTI_Callback+0x2f2>
		else if(display_status.page == 1 && display_status.cursor_line ==0)
 8001950:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d176      	bne.n	8001a4c <HAL_GPIO_EXTI_Callback+0x240>
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d172      	bne.n	8001a4c <HAL_GPIO_EXTI_Callback+0x240>
			fres = f_mount(&FatFs, "", 1);
 8001966:	2201      	movs	r2, #1
 8001968:	492a      	ldr	r1, [pc, #168]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x208>)
 800196a:	482b      	ldr	r0, [pc, #172]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x20c>)
 800196c:	f00a fa64 	bl	800be38 <f_mount>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x210>)
 8001976:	701a      	strb	r2, [r3, #0]
			fres=f_opendir(&dp,"0:/music");
 8001978:	4929      	ldr	r1, [pc, #164]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x214>)
 800197a:	482a      	ldr	r0, [pc, #168]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x218>)
 800197c:	f00b fdca 	bl	800d514 <f_opendir>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x210>)
 8001986:	701a      	strb	r2, [r3, #0]
			uint8_t n = display_status.file_number;
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			display_status.file_number=0;
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 8001992:	2200      	movs	r2, #0
 8001994:	709a      	strb	r2, [r3, #2]
				fres=f_readdir(&dp, &fno);
 8001996:	4925      	ldr	r1, [pc, #148]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x220>)
 8001998:	4822      	ldr	r0, [pc, #136]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x218>)
 800199a:	f00b fe55 	bl	800d648 <f_readdir>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x210>)
 80019a4:	701a      	strb	r2, [r3, #0]
				printf("file name: %s \r\n", fno.fname);
 80019a6:	4922      	ldr	r1, [pc, #136]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x224>)
 80019a8:	4822      	ldr	r0, [pc, #136]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x228>)
 80019aa:	f00b ff99 	bl	800d8e0 <iprintf>
				sprintf(display_status.music_name,"%s", fno.fname);
 80019ae:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x224>)
 80019b0:	4923      	ldr	r1, [pc, #140]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x234>)
 80019b2:	4824      	ldr	r0, [pc, #144]	; (8001a44 <HAL_GPIO_EXTI_Callback+0x238>)
 80019b4:	f00c f822 	bl	800d9fc <siprintf>
				display_status.file_number++;
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 80019ba:	789b      	ldrb	r3, [r3, #2]
 80019bc:	3301      	adds	r3, #1
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 80019c2:	709a      	strb	r2, [r3, #2]
			}while(fno.fname[0] !='\0' &&  display_status.file_number<=n-1);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x220>)
 80019c6:	7a5b      	ldrb	r3, [r3, #9]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_GPIO_EXTI_Callback+0x1cc>
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8de      	bhi.n	8001996 <HAL_GPIO_EXTI_Callback+0x18a>
			display_status.file_number=n;
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x200>)
 80019da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019de:	7093      	strb	r3, [r2, #2]
			f_mount(NULL, "", 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	490c      	ldr	r1, [pc, #48]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x208>)
 80019e4:	2000      	movs	r0, #0
 80019e6:	f00a fa27 	bl	800be38 <f_mount>
			sprintf(path, "0:/music/%s", display_status.music_name);
 80019ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ee:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <HAL_GPIO_EXTI_Callback+0x238>)
 80019f0:	4915      	ldr	r1, [pc, #84]	; (8001a48 <HAL_GPIO_EXTI_Callback+0x23c>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f00c f802 	bl	800d9fc <siprintf>
			start_play_music(path);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fa8d 	bl	8001f1c <start_play_music>
		{
 8001a02:	e07c      	b.n	8001afe <HAL_GPIO_EXTI_Callback+0x2f2>
 8001a04:	0800ed98 	.word	0x0800ed98
 8001a08:	0800eda4 	.word	0x0800eda4
 8001a0c:	20003624 	.word	0x20003624
 8001a10:	200013b4 	.word	0x200013b4
 8001a14:	0800ecd4 	.word	0x0800ecd4
 8001a18:	20000384 	.word	0x20000384
 8001a1c:	20003428 	.word	0x20003428
 8001a20:	0800edb4 	.word	0x0800edb4
 8001a24:	200023e0 	.word	0x200023e0
 8001a28:	0800edc0 	.word	0x0800edc0
 8001a2c:	20003408 	.word	0x20003408
 8001a30:	20003411 	.word	0x20003411
 8001a34:	0800edd0 	.word	0x0800edd0
 8001a38:	0800ede4 	.word	0x0800ede4
 8001a3c:	20003430 	.word	0x20003430
 8001a40:	0800edec 	.word	0x0800edec
 8001a44:	20003627 	.word	0x20003627
 8001a48:	0800edf0 	.word	0x0800edf0
		else if(display_status.page == 1 && display_status.cursor_line ==1)
 8001a4c:	4ba5      	ldr	r3, [pc, #660]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d151      	bne.n	8001afe <HAL_GPIO_EXTI_Callback+0x2f2>
 8001a5a:	4ba2      	ldr	r3, [pc, #648]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001a5c:	785b      	ldrb	r3, [r3, #1]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d14d      	bne.n	8001afe <HAL_GPIO_EXTI_Callback+0x2f2>
			fres = f_mount(&FatFs, "", 1);
 8001a62:	2201      	movs	r2, #1
 8001a64:	49a0      	ldr	r1, [pc, #640]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001a66:	48a1      	ldr	r0, [pc, #644]	; (8001cec <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001a68:	f00a f9e6 	bl	800be38 <f_mount>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b9f      	ldr	r3, [pc, #636]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001a72:	701a      	strb	r2, [r3, #0]
			fres=f_opendir(&dp,"0:/music");
 8001a74:	499f      	ldr	r1, [pc, #636]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001a76:	48a0      	ldr	r0, [pc, #640]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001a78:	f00b fd4c 	bl	800d514 <f_opendir>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b9b      	ldr	r3, [pc, #620]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001a82:	701a      	strb	r2, [r3, #0]
			uint8_t n = display_status.file_number;
 8001a84:	4b97      	ldr	r3, [pc, #604]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001a86:	789b      	ldrb	r3, [r3, #2]
 8001a88:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			display_status.file_number=0;
 8001a8c:	4b95      	ldr	r3, [pc, #596]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	709a      	strb	r2, [r3, #2]
				fres=f_readdir(&dp, &fno);
 8001a92:	499a      	ldr	r1, [pc, #616]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001a94:	4898      	ldr	r0, [pc, #608]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001a96:	f00b fdd7 	bl	800d648 <f_readdir>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b94      	ldr	r3, [pc, #592]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001aa0:	701a      	strb	r2, [r3, #0]
				printf("file name: %s \r\n", fno.fname);
 8001aa2:	4997      	ldr	r1, [pc, #604]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001aa4:	4897      	ldr	r0, [pc, #604]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001aa6:	f00b ff1b 	bl	800d8e0 <iprintf>
				sprintf(display_status.music_name,"%s", fno.fname);
 8001aaa:	4a95      	ldr	r2, [pc, #596]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001aac:	4996      	ldr	r1, [pc, #600]	; (8001d08 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8001aae:	4897      	ldr	r0, [pc, #604]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x500>)
 8001ab0:	f00b ffa4 	bl	800d9fc <siprintf>
				display_status.file_number++;
 8001ab4:	4b8b      	ldr	r3, [pc, #556]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001ab6:	789b      	ldrb	r3, [r3, #2]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b89      	ldr	r3, [pc, #548]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001abe:	709a      	strb	r2, [r3, #2]
			}while(fno.fname[0] !='\0' &&  display_status.file_number<=n);
 8001ac0:	4b8e      	ldr	r3, [pc, #568]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001ac2:	7a5b      	ldrb	r3, [r3, #9]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x2c8>
 8001ac8:	4b86      	ldr	r3, [pc, #536]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001aca:	789b      	ldrb	r3, [r3, #2]
 8001acc:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d2de      	bcs.n	8001a92 <HAL_GPIO_EXTI_Callback+0x286>
			display_status.file_number=n;
 8001ad4:	4a83      	ldr	r2, [pc, #524]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001ad6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001ada:	7093      	strb	r3, [r2, #2]
			f_mount(NULL, "", 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	4982      	ldr	r1, [pc, #520]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f00a f9a9 	bl	800be38 <f_mount>
			sprintf(path, "0:/music/%s", display_status.music_name);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4a88      	ldr	r2, [pc, #544]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x500>)
 8001aec:	4988      	ldr	r1, [pc, #544]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x504>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00b ff84 	bl	800d9fc <siprintf>
			start_play_music(path);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fa0f 	bl	8001f1c <start_play_music>
		if(display_status.page == 0 && display_status.cursor_line ==1) // Recording
 8001afe:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d121      	bne.n	8001b50 <HAL_GPIO_EXTI_Callback+0x344>
 8001b0c:	4b75      	ldr	r3, [pc, #468]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d11d      	bne.n	8001b50 <HAL_GPIO_EXTI_Callback+0x344>
			HD44780_Clear();
 8001b14:	f7ff f902 	bl	8000d1c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff f914 	bl	8000d48 <HD44780_SetCursor>
			HD44780_PrintStr("1.New Recording");
 8001b20:	487c      	ldr	r0, [pc, #496]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x508>)
 8001b22:	f7ff f9ae 	bl	8000e82 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8001b26:	2101      	movs	r1, #1
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff f90d 	bl	8000d48 <HD44780_SetCursor>
			HD44780_PrintStr("2.Listen Record");
 8001b2e:	487a      	ldr	r0, [pc, #488]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x50c>)
 8001b30:	f7ff f9a7 	bl	8000e82 <HD44780_PrintStr>
			display_status.page = 2;
 8001b34:	4a6b      	ldr	r2, [pc, #428]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001b36:	7813      	ldrb	r3, [r2, #0]
 8001b38:	2102      	movs	r1, #2
 8001b3a:	f361 0303 	bfi	r3, r1, #0, #4
 8001b3e:	7013      	strb	r3, [r2, #0]
			display_status.cursor_line = 0;
 8001b40:	4b68      	ldr	r3, [pc, #416]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	705a      	strb	r2, [r3, #1]
			HD44780_SetCursor(0,0);
 8001b46:	2100      	movs	r1, #0
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff f8fd 	bl	8000d48 <HD44780_SetCursor>
 8001b4e:	e1ca      	b.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
		else if(display_status.page == 2 && display_status.cursor_line ==0) //New recording
 8001b50:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d141      	bne.n	8001be2 <HAL_GPIO_EXTI_Callback+0x3d6>
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001b60:	785b      	ldrb	r3, [r3, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d13d      	bne.n	8001be2 <HAL_GPIO_EXTI_Callback+0x3d6>
			GPIOC->ODR |= GPIO_ODR_3;
 8001b66:	4b6d      	ldr	r3, [pc, #436]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x510>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	4a6c      	ldr	r2, [pc, #432]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x510>)
 8001b6c:	f043 0308 	orr.w	r3, r3, #8
 8001b70:	6153      	str	r3, [r2, #20]
			f_close(&fil);
 8001b72:	486b      	ldr	r0, [pc, #428]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x514>)
 8001b74:	f00b f9b1 	bl	800ceda <f_close>
			f_mount(NULL, "", 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	495b      	ldr	r1, [pc, #364]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f00a f95b 	bl	800be38 <f_mount>
			fres = f_mount(&FatFs, "", 1);
 8001b82:	2201      	movs	r2, #1
 8001b84:	4958      	ldr	r1, [pc, #352]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b86:	4859      	ldr	r0, [pc, #356]	; (8001cec <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001b88:	f00a f956 	bl	800be38 <f_mount>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001b92:	701a      	strb	r2, [r3, #0]
			fres = f_open(&fil, "0:/data/rec.wav", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001b94:	220b      	movs	r2, #11
 8001b96:	4963      	ldr	r1, [pc, #396]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x518>)
 8001b98:	4861      	ldr	r0, [pc, #388]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x514>)
 8001b9a:	f00a f997 	bl	800becc <f_open>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001ba4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8001ba6:	4860      	ldr	r0, [pc, #384]	; (8001d28 <HAL_GPIO_EXTI_Callback+0x51c>)
 8001ba8:	f005 f990 	bl	8006ecc <HAL_TIM_Base_Start_IT>
			ADC1->CFGR |= ADC_CFGR_DMACFG;
 8001bac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	60d3      	str	r3, [r2, #12]
			ADC1->CFGR |= ADC_CFGR_DMAEN;
 8001bbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	60d3      	str	r3, [r2, #12]
			HAL_ADC_Start(&hadc1);
 8001bcc:	4857      	ldr	r0, [pc, #348]	; (8001d2c <HAL_GPIO_EXTI_Callback+0x520>)
 8001bce:	f001 f92b 	bl	8002e28 <HAL_ADC_Start>
			HAL_DMA_Start_IT(&hdma_adc1, &(ADC1->DR), (uint32_t)buff_music, sizeof(buff_music));
 8001bd2:	4a57      	ldr	r2, [pc, #348]	; (8001d30 <HAL_GPIO_EXTI_Callback+0x524>)
 8001bd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bd8:	4956      	ldr	r1, [pc, #344]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x528>)
 8001bda:	4857      	ldr	r0, [pc, #348]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x52c>)
 8001bdc:	f001 fffe 	bl	8003bdc <HAL_DMA_Start_IT>
 8001be0:	e181      	b.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
		else if(display_status.page == 2 && display_status.cursor_line ==1) //Listen record
 8001be2:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	f040 817a 	bne.w	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	f040 8175 	bne.w	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
			GPIOB->ODR |= GPIO_ODR_0;
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x530>)
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	4a4e      	ldr	r2, [pc, #312]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x530>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6153      	str	r3, [r2, #20]
			HAL_Delay(10);
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f000 ff63 	bl	8002ad4 <HAL_Delay>
			GPIOB->ODR &= ~GPIO_ODR_0;
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x530>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	4a4a      	ldr	r2, [pc, #296]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x530>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6153      	str	r3, [r2, #20]
}
 8001c1a:	e164      	b.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
	else if(GPIO_Pin == GPIO_PIN_11)  // ->
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c22:	f040 80c7 	bne.w	8001db4 <HAL_GPIO_EXTI_Callback+0x5a8>
		if(display_status.page == 0) {HD44780_SetCursor(0,1); display_status.cursor_line =1;}
 8001c26:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d106      	bne.n	8001c42 <HAL_GPIO_EXTI_Callback+0x436>
 8001c34:	2101      	movs	r1, #1
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7ff f886 	bl	8000d48 <HD44780_SetCursor>
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	705a      	strb	r2, [r3, #1]
		if(display_status.page == 1)
 8001c42:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	f040 80a1 	bne.w	8001d94 <HAL_GPIO_EXTI_Callback+0x588>
			if(display_status.cursor_line == 1)
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f040 8095 	bne.w	8001d86 <HAL_GPIO_EXTI_Callback+0x57a>
				fres = f_mount(&FatFs, "", 1);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4922      	ldr	r1, [pc, #136]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001c60:	4822      	ldr	r0, [pc, #136]	; (8001cec <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001c62:	f00a f8e9 	bl	800be38 <f_mount>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001c6c:	701a      	strb	r2, [r3, #0]
				fres=f_opendir(&dp,"0:/music");
 8001c6e:	4921      	ldr	r1, [pc, #132]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001c70:	4821      	ldr	r0, [pc, #132]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001c72:	f00b fc4f 	bl	800d514 <f_opendir>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001c7c:	701a      	strb	r2, [r3, #0]
				display_status.file_number++;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001c80:	789b      	ldrb	r3, [r3, #2]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001c88:	709a      	strb	r2, [r3, #2]
				uint8_t n = display_status.file_number;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001c8c:	789b      	ldrb	r3, [r3, #2]
 8001c8e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				display_status.file_number=0;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	709a      	strb	r2, [r3, #2]
				HD44780_Clear();
 8001c98:	f7ff f840 	bl	8000d1c <HD44780_Clear>
					fres=f_readdir(&dp, &fno);
 8001c9c:	4917      	ldr	r1, [pc, #92]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001c9e:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001ca0:	f00b fcd2 	bl	800d648 <f_readdir>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001caa:	701a      	strb	r2, [r3, #0]
					printf("file name: %s \r\n", fno.fname);
 8001cac:	4914      	ldr	r1, [pc, #80]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001cae:	4815      	ldr	r0, [pc, #84]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001cb0:	f00b fe16 	bl	800d8e0 <iprintf>
					sprintf(buff_music,"%d. %s", display_status.file_number+1, fno.fname);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001cb6:	789b      	ldrb	r3, [r3, #2]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001cbc:	4920      	ldr	r1, [pc, #128]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x534>)
 8001cbe:	481c      	ldr	r0, [pc, #112]	; (8001d30 <HAL_GPIO_EXTI_Callback+0x524>)
 8001cc0:	f00b fe9c 	bl	800d9fc <siprintf>
					if(display_status.file_number == n-1)
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001cc6:	789b      	ldrb	r3, [r3, #2]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d137      	bne.n	8001d44 <HAL_GPIO_EXTI_Callback+0x538>
						HD44780_SetCursor(0,0);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff f836 	bl	8000d48 <HD44780_SetCursor>
						HD44780_PrintStr(buff_music);
 8001cdc:	4814      	ldr	r0, [pc, #80]	; (8001d30 <HAL_GPIO_EXTI_Callback+0x524>)
 8001cde:	f7ff f8d0 	bl	8000e82 <HD44780_PrintStr>
 8001ce2:	e03c      	b.n	8001d5e <HAL_GPIO_EXTI_Callback+0x552>
 8001ce4:	20003624 	.word	0x20003624
 8001ce8:	0800ecd4 	.word	0x0800ecd4
 8001cec:	20000384 	.word	0x20000384
 8001cf0:	20003428 	.word	0x20003428
 8001cf4:	0800edb4 	.word	0x0800edb4
 8001cf8:	200023e0 	.word	0x200023e0
 8001cfc:	20003408 	.word	0x20003408
 8001d00:	20003411 	.word	0x20003411
 8001d04:	0800edd0 	.word	0x0800edd0
 8001d08:	0800edec 	.word	0x0800edec
 8001d0c:	20003627 	.word	0x20003627
 8001d10:	0800edf0 	.word	0x0800edf0
 8001d14:	0800edfc 	.word	0x0800edfc
 8001d18:	0800ee0c 	.word	0x0800ee0c
 8001d1c:	48000800 	.word	0x48000800
 8001d20:	200013b4 	.word	0x200013b4
 8001d24:	0800ee1c 	.word	0x0800ee1c
 8001d28:	20000220 	.word	0x20000220
 8001d2c:	200000c0 	.word	0x200000c0
 8001d30:	20003430 	.word	0x20003430
 8001d34:	50000040 	.word	0x50000040
 8001d38:	20000110 	.word	0x20000110
 8001d3c:	48000400 	.word	0x48000400
 8001d40:	0800ede4 	.word	0x0800ede4
					else if(display_status.file_number == n)
 8001d44:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001d46:	789b      	ldrb	r3, [r3, #2]
 8001d48:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d106      	bne.n	8001d5e <HAL_GPIO_EXTI_Callback+0x552>
						HD44780_SetCursor(0,1);
 8001d50:	2101      	movs	r1, #1
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7fe fff8 	bl	8000d48 <HD44780_SetCursor>
						HD44780_PrintStr(buff_music);
 8001d58:	4866      	ldr	r0, [pc, #408]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8001d5a:	f7ff f892 	bl	8000e82 <HD44780_PrintStr>
					display_status.file_number++;
 8001d5e:	4b64      	ldr	r3, [pc, #400]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001d60:	789b      	ldrb	r3, [r3, #2]
 8001d62:	3301      	adds	r3, #1
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4b62      	ldr	r3, [pc, #392]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001d68:	709a      	strb	r2, [r3, #2]
				}while(fno.fname[0] !='\0' &&  display_status.file_number<=n);
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0x6ec>)
 8001d6c:	7a5b      	ldrb	r3, [r3, #9]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_GPIO_EXTI_Callback+0x572>
 8001d72:	4b5f      	ldr	r3, [pc, #380]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001d74:	789b      	ldrb	r3, [r3, #2]
 8001d76:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d28e      	bcs.n	8001c9c <HAL_GPIO_EXTI_Callback+0x490>
				display_status.file_number=n;
 8001d7e:	4a5c      	ldr	r2, [pc, #368]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001d80:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d84:	7093      	strb	r3, [r2, #2]
			HD44780_SetCursor(0,1);
 8001d86:	2101      	movs	r1, #1
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7fe ffdd 	bl	8000d48 <HD44780_SetCursor>
			display_status.cursor_line =1;
 8001d8e:	4b58      	ldr	r3, [pc, #352]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	705a      	strb	r2, [r3, #1]
		if(display_status.page == 2)
 8001d94:	4b56      	ldr	r3, [pc, #344]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	f040 80a1 	bne.w	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
			HD44780_SetCursor(0,1);
 8001da4:	2101      	movs	r1, #1
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7fe ffce 	bl	8000d48 <HD44780_SetCursor>
			display_status.cursor_line =1;
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	705a      	strb	r2, [r3, #1]
}
 8001db2:	e098      	b.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
	else if(GPIO_Pin == GPIO_PIN_12)  // <-
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dba:	f040 8094 	bne.w	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
		if(display_status.page == 0) {HD44780_SetCursor(0,0); display_status.cursor_line =0;}
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <HAL_GPIO_EXTI_Callback+0x5ce>
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7fe ffba 	bl	8000d48 <HD44780_SetCursor>
 8001dd4:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	705a      	strb	r2, [r3, #1]
		if(display_status.page == 1)
 8001dda:	4b45      	ldr	r3, [pc, #276]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d16f      	bne.n	8001ec8 <HAL_GPIO_EXTI_Callback+0x6bc>
			if(display_status.cursor_line == 0)
 8001de8:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001dea:	785b      	ldrb	r3, [r3, #1]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d164      	bne.n	8001eba <HAL_GPIO_EXTI_Callback+0x6ae>
				fres = f_mount(&FatFs, "", 1);
 8001df0:	2201      	movs	r2, #1
 8001df2:	4942      	ldr	r1, [pc, #264]	; (8001efc <HAL_GPIO_EXTI_Callback+0x6f0>)
 8001df4:	4842      	ldr	r0, [pc, #264]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x6f4>)
 8001df6:	f00a f81f 	bl	800be38 <f_mount>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x6f8>)
 8001e00:	701a      	strb	r2, [r3, #0]
				fres=f_opendir(&dp,"0:/music");
 8001e02:	4941      	ldr	r1, [pc, #260]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x6fc>)
 8001e04:	4841      	ldr	r0, [pc, #260]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x700>)
 8001e06:	f00b fb85 	bl	800d514 <f_opendir>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x6f8>)
 8001e10:	701a      	strb	r2, [r3, #0]
				display_status.file_number--;
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001e14:	789b      	ldrb	r3, [r3, #2]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001e1c:	709a      	strb	r2, [r3, #2]
				uint8_t n = display_status.file_number;
 8001e1e:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001e20:	789b      	ldrb	r3, [r3, #2]
 8001e22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				display_status.file_number=0;
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	709a      	strb	r2, [r3, #2]
				HD44780_Clear();
 8001e2c:	f7fe ff76 	bl	8000d1c <HD44780_Clear>
					fres=f_readdir(&dp, &fno);
 8001e30:	4931      	ldr	r1, [pc, #196]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0x6ec>)
 8001e32:	4836      	ldr	r0, [pc, #216]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x700>)
 8001e34:	f00b fc08 	bl	800d648 <f_readdir>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x6f8>)
 8001e3e:	701a      	strb	r2, [r3, #0]
					printf("file name: %s \r\n", fno.fname);
 8001e40:	4933      	ldr	r1, [pc, #204]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x704>)
 8001e42:	4834      	ldr	r0, [pc, #208]	; (8001f14 <HAL_GPIO_EXTI_Callback+0x708>)
 8001e44:	f00b fd4c 	bl	800d8e0 <iprintf>
					sprintf(buff_music,"%d. %s", display_status.file_number+1, fno.fname);
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001e4a:	789b      	ldrb	r3, [r3, #2]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x704>)
 8001e50:	4931      	ldr	r1, [pc, #196]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x70c>)
 8001e52:	4828      	ldr	r0, [pc, #160]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8001e54:	f00b fdd2 	bl	800d9fc <siprintf>
					if(display_status.file_number == n-1)
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001e5a:	789b      	ldrb	r3, [r3, #2]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e62:	3b01      	subs	r3, #1
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d107      	bne.n	8001e78 <HAL_GPIO_EXTI_Callback+0x66c>
						HD44780_SetCursor(0,0);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7fe ff6c 	bl	8000d48 <HD44780_SetCursor>
						HD44780_PrintStr(buff_music);
 8001e70:	4820      	ldr	r0, [pc, #128]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8001e72:	f7ff f806 	bl	8000e82 <HD44780_PrintStr>
 8001e76:	e00c      	b.n	8001e92 <HAL_GPIO_EXTI_Callback+0x686>
					else if(display_status.file_number == n)
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001e7a:	789b      	ldrb	r3, [r3, #2]
 8001e7c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_GPIO_EXTI_Callback+0x686>
						HD44780_SetCursor(0,1);
 8001e84:	2101      	movs	r1, #1
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7fe ff5e 	bl	8000d48 <HD44780_SetCursor>
						HD44780_PrintStr(buff_music);
 8001e8c:	4819      	ldr	r0, [pc, #100]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8001e8e:	f7fe fff8 	bl	8000e82 <HD44780_PrintStr>
					display_status.file_number++;
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001e94:	789b      	ldrb	r3, [r3, #2]
 8001e96:	3301      	adds	r3, #1
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001e9c:	709a      	strb	r2, [r3, #2]
				}while(fno.fname[0] !='\0' &&  display_status.file_number<=n);
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0x6ec>)
 8001ea0:	7a5b      	ldrb	r3, [r3, #9]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_GPIO_EXTI_Callback+0x6a6>
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001ea8:	789b      	ldrb	r3, [r3, #2]
 8001eaa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d2be      	bcs.n	8001e30 <HAL_GPIO_EXTI_Callback+0x624>
				display_status.file_number=n;
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001eb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001eb8:	7093      	strb	r3, [r2, #2]
			HD44780_SetCursor(0,0);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7fe ff43 	bl	8000d48 <HD44780_SetCursor>
			display_status.cursor_line =0;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	705a      	strb	r2, [r3, #1]
		if(display_status.page == 2)
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d107      	bne.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
			HD44780_SetCursor(0,0);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7fe ff35 	bl	8000d48 <HD44780_SetCursor>
			display_status.cursor_line =0;
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	705a      	strb	r2, [r3, #1]
}
 8001ee4:	e7ff      	b.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x6da>
 8001ee6:	bf00      	nop
 8001ee8:	3750      	adds	r7, #80	; 0x50
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20003624 	.word	0x20003624
 8001ef4:	20003430 	.word	0x20003430
 8001ef8:	20003408 	.word	0x20003408
 8001efc:	0800ecd4 	.word	0x0800ecd4
 8001f00:	20000384 	.word	0x20000384
 8001f04:	20003428 	.word	0x20003428
 8001f08:	0800edb4 	.word	0x0800edb4
 8001f0c:	200023e0 	.word	0x200023e0
 8001f10:	20003411 	.word	0x20003411
 8001f14:	0800edd0 	.word	0x0800edd0
 8001f18:	0800ede4 	.word	0x0800ede4

08001f1c <start_play_music>:

void start_play_music(const TCHAR* path)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	fres = f_mount(&FatFs, "", 1);    //1=mount now  "" == '\0' == 0
 8001f24:	2201      	movs	r2, #1
 8001f26:	4914      	ldr	r1, [pc, #80]	; (8001f78 <start_play_music+0x5c>)
 8001f28:	4814      	ldr	r0, [pc, #80]	; (8001f7c <start_play_music+0x60>)
 8001f2a:	f009 ff85 	bl	800be38 <f_mount>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <start_play_music+0x64>)
 8001f34:	701a      	strb	r2, [r3, #0]
  fres = f_open(&fil, path, FA_READ );
 8001f36:	2201      	movs	r2, #1
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4812      	ldr	r0, [pc, #72]	; (8001f84 <start_play_music+0x68>)
 8001f3c:	f009 ffc6 	bl	800becc <f_open>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <start_play_music+0x64>)
 8001f46:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <start_play_music+0x64>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10f      	bne.n	8001f70 <start_play_music+0x54>
	  if((TIM17->DIER &(1<<0)) == 0)
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <start_play_music+0x6c>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <start_play_music+0x54>
	  {
		  TIM17->DIER |=1;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <start_play_music+0x6c>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <start_play_music+0x6c>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	60d3      	str	r3, [r2, #12]
		  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4808      	ldr	r0, [pc, #32]	; (8001f8c <start_play_music+0x70>)
 8001f6c:	f005 f892 	bl	8007094 <HAL_TIM_PWM_Start>
	  }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	0800ecd4 	.word	0x0800ecd4
 8001f7c:	20000384 	.word	0x20000384
 8001f80:	20003428 	.word	0x20003428
 8001f84:	200013b4 	.word	0x200013b4
 8001f88:	40014800 	.word	0x40014800
 8001f8c:	2000026c 	.word	0x2000026c

08001f90 <stop_play_music>:

void stop_play_music()
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	TIM17->DIER &=~1;
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <stop_play_music+0x3c>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <stop_play_music+0x3c>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <stop_play_music+0x40>)
 8001fa4:	f005 f95c 	bl	8007260 <HAL_TIM_PWM_Stop>
	tim17_counter = 0;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <stop_play_music+0x44>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	801a      	strh	r2, [r3, #0]
	f_close(&fil);
 8001fae:	480a      	ldr	r0, [pc, #40]	; (8001fd8 <stop_play_music+0x48>)
 8001fb0:	f00a ff93 	bl	800ceda <f_close>
	fres = f_mount(NULL, "", 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4909      	ldr	r1, [pc, #36]	; (8001fdc <stop_play_music+0x4c>)
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f009 ff3d 	bl	800be38 <f_mount>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <stop_play_music+0x50>)
 8001fc4:	701a      	strb	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40014800 	.word	0x40014800
 8001fd0:	2000026c 	.word	0x2000026c
 8001fd4:	20003634 	.word	0x20003634
 8001fd8:	200013b4 	.word	0x200013b4
 8001fdc:	0800ecd4 	.word	0x0800ecd4
 8001fe0:	20003428 	.word	0x20003428

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_MspInit+0x44>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_MspInit+0x44>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6193      	str	r3, [r2, #24]
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_MspInit+0x44>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_MspInit+0x44>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <HAL_MspInit+0x44>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_MspInit+0x44>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002058:	d14b      	bne.n	80020f2 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_ADC_MspInit+0xc4>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4a27      	ldr	r2, [pc, #156]	; (80020fc <HAL_ADC_MspInit+0xc4>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	6153      	str	r3, [r2, #20]
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_ADC_MspInit+0xc4>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_ADC_MspInit+0xc4>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <HAL_ADC_MspInit+0xc4>)
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	6153      	str	r3, [r2, #20]
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_ADC_MspInit+0xc4>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800208a:	2308      	movs	r3, #8
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208e:	2303      	movs	r3, #3
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a0:	f001 ff2a 	bl	8003ef8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_ADC_MspInit+0xcc>)
 80020a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020ca:	2220      	movs	r2, #32
 80020cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020d6:	480a      	ldr	r0, [pc, #40]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020d8:	f001 fd39 	bl	8003b4e <HAL_DMA_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 80020e2:	f7ff ff7f 	bl	8001fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a05      	ldr	r2, [pc, #20]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_ADC_MspInit+0xc8>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	20000110 	.word	0x20000110
 8002104:	40020008 	.word	0x40020008

08002108 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_DAC_MspInit+0x84>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d12c      	bne.n	8002184 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_DAC_MspInit+0x88>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a18      	ldr	r2, [pc, #96]	; (8002190 <HAL_DAC_MspInit+0x88>)
 8002130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002134:	61d3      	str	r3, [r2, #28]
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_DAC_MspInit+0x88>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_DAC_MspInit+0x88>)
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <HAL_DAC_MspInit+0x88>)
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	6153      	str	r3, [r2, #20]
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_DAC_MspInit+0x88>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800215a:	2310      	movs	r3, #16
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215e:	2303      	movs	r3, #3
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002170:	f001 fec2 	bl	8003ef8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	2101      	movs	r1, #1
 8002178:	2036      	movs	r0, #54	; 0x36
 800217a:	f001 fc08 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800217e:	2036      	movs	r0, #54	; 0x36
 8002180:	f001 fc21 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002184:	bf00      	nop
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40007400 	.word	0x40007400
 8002190:	40021000 	.word	0x40021000

08002194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_I2C_MspInit+0x7c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d128      	bne.n	8002208 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4a16      	ldr	r2, [pc, #88]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6153      	str	r3, [r2, #20]
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d4:	2312      	movs	r3, #18
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e0:	2304      	movs	r3, #4
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	480b      	ldr	r0, [pc, #44]	; (8002218 <HAL_I2C_MspInit+0x84>)
 80021ec:	f001 fe84 	bl	8003ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021fa:	61d3      	str	r3, [r2, #28]
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	; 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40005400 	.word	0x40005400
 8002214:	40021000 	.word	0x40021000
 8002218:	48000400 	.word	0x48000400

0800221c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_SPI_MspInit+0x7c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d128      	bne.n	8002290 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_SPI_MspInit+0x80>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_SPI_MspInit+0x80>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	61d3      	str	r3, [r2, #28]
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_SPI_MspInit+0x80>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_SPI_MspInit+0x80>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_SPI_MspInit+0x80>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6153      	str	r3, [r2, #20]
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_SPI_MspInit+0x80>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800226e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002280:	2305      	movs	r3, #5
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4619      	mov	r1, r3
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <HAL_SPI_MspInit+0x84>)
 800228c:	f001 fe34 	bl	8003ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002290:	bf00      	nop
 8002292:	3728      	adds	r7, #40	; 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40003800 	.word	0x40003800
 800229c:	40021000 	.word	0x40021000
 80022a0:	48000400 	.word	0x48000400

080022a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a33      	ldr	r2, [pc, #204]	; (8002380 <HAL_TIM_Base_MspInit+0xdc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d114      	bne.n	80022e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_TIM_Base_MspInit+0xe0>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_TIM_Base_MspInit+0xe0>)
 80022bc:	f043 0310 	orr.w	r3, r3, #16
 80022c0:	61d3      	str	r3, [r2, #28]
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <HAL_TIM_Base_MspInit+0xe0>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2101      	movs	r1, #1
 80022d2:	2036      	movs	r0, #54	; 0x36
 80022d4:	f001 fb5b 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022d8:	2036      	movs	r0, #54	; 0x36
 80022da:	f001 fb74 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80022de:	e04a      	b.n	8002376 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM17)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a28      	ldr	r2, [pc, #160]	; (8002388 <HAL_TIM_Base_MspInit+0xe4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d145      	bne.n	8002376 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_TIM_Base_MspInit+0xe0>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	4a25      	ldr	r2, [pc, #148]	; (8002384 <HAL_TIM_Base_MspInit+0xe0>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6193      	str	r3, [r2, #24]
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <HAL_TIM_Base_MspInit+0xe0>)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    hdma_tim17_ch1_up.Instance = DMA1_Channel7;
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 8002304:	4a22      	ldr	r2, [pc, #136]	; (8002390 <HAL_TIM_Base_MspInit+0xec>)
 8002306:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 800230a:	2210      	movs	r2, #16
 800230c:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800230e:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1_up.Init.Mode = DMA_NORMAL;
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 8002332:	4816      	ldr	r0, [pc, #88]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 8002334:	f001 fc0b 	bl	8003b4e <HAL_DMA_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_TIM_Base_MspInit+0x9e>
      Error_Handler();
 800233e:	f7ff fe51 	bl	8001fe4 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM17_DMA1_CH7);
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_TIM_Base_MspInit+0xf0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a13      	ldr	r2, [pc, #76]	; (8002394 <HAL_TIM_Base_MspInit+0xf0>)
 8002348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234c:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1_up);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a0e      	ldr	r2, [pc, #56]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 8002352:	625a      	str	r2, [r3, #36]	; 0x24
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a0b      	ldr	r2, [pc, #44]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 800235e:	621a      	str	r2, [r3, #32]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_TIM_Base_MspInit+0xe8>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2102      	movs	r1, #2
 800236a:	201a      	movs	r0, #26
 800236c:	f001 fb0f 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002370:	201a      	movs	r0, #26
 8002372:	f001 fb28 	bl	80039c6 <HAL_NVIC_EnableIRQ>
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40001000 	.word	0x40001000
 8002384:	40021000 	.word	0x40021000
 8002388:	40014800 	.word	0x40014800
 800238c:	200002b8 	.word	0x200002b8
 8002390:	40020080 	.word	0x40020080
 8002394:	40010000 	.word	0x40010000

08002398 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_TIM_MspPostInit+0x64>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d11c      	bne.n	80023f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_TIM_MspPostInit+0x68>)
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_TIM_MspPostInit+0x68>)
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c4:	6153      	str	r3, [r2, #20]
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_TIM_MspPostInit+0x68>)
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80023e2:	2301      	movs	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f0:	f001 fd82 	bl	8003ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80023f4:	bf00      	nop
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40014800 	.word	0x40014800
 8002400:	40021000 	.word	0x40021000

08002404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a17      	ldr	r2, [pc, #92]	; (8002480 <HAL_UART_MspInit+0x7c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d127      	bne.n	8002476 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_UART_MspInit+0x80>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_UART_MspInit+0x80>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002430:	6193      	str	r3, [r2, #24]
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_UART_MspInit+0x80>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_UART_MspInit+0x80>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4a10      	ldr	r2, [pc, #64]	; (8002484 <HAL_UART_MspInit+0x80>)
 8002444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002448:	6153      	str	r3, [r2, #20]
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_UART_MspInit+0x80>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002456:	2330      	movs	r3, #48	; 0x30
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002466:	2307      	movs	r3, #7
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <HAL_UART_MspInit+0x84>)
 8002472:	f001 fd41 	bl	8003ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40013800 	.word	0x40013800
 8002484:	40021000 	.word	0x40021000
 8002488:	48000800 	.word	0x48000800

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <SysTick_Handler+0x34>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <SysTick_Handler+0x18>
	  Timer1--;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <SysTick_Handler+0x34>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <SysTick_Handler+0x34>)
 80024ea:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <SysTick_Handler+0x38>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <SysTick_Handler+0x2c>
	  Timer2--;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <SysTick_Handler+0x38>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <SysTick_Handler+0x38>)
 80024fe:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002500:	f000 fac8 	bl	8002a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200000b4 	.word	0x200000b4
 800250c:	200000b6 	.word	0x200000b6

08002510 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if(DMA1->ISR & DMA_ISR_TCIF1 == DMA_ISR_TCIF1)
 8002516:	4b39      	ldr	r3, [pc, #228]	; (80025fc <DMA1_Channel1_IRQHandler+0xec>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d065      	beq.n	80025ee <DMA1_Channel1_IRQHandler+0xde>
	{
		DMA1->IFCR |= DMA_IFCR_CTCIF1;
 8002522:	4b36      	ldr	r3, [pc, #216]	; (80025fc <DMA1_Channel1_IRQHandler+0xec>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a35      	ldr	r2, [pc, #212]	; (80025fc <DMA1_Channel1_IRQHandler+0xec>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6053      	str	r3, [r2, #4]
		fil.fsize = old_fsize;
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <DMA1_Channel1_IRQHandler+0xf0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a34      	ldr	r2, [pc, #208]	; (8002604 <DMA1_Channel1_IRQHandler+0xf4>)
 8002534:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002538:	60d3      	str	r3, [r2, #12]
		if (fres == FR_OK) {
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <DMA1_Channel1_IRQHandler+0xf8>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d128      	bne.n	8002594 <DMA1_Channel1_IRQHandler+0x84>
			UINT bytesWritten;
			// Move the file pointer to the end of the file
			f_lseek(&fil, f_size(&fil) /*sizeof(fil)*/);
 8002542:	4b30      	ldr	r3, [pc, #192]	; (8002604 <DMA1_Channel1_IRQHandler+0xf4>)
 8002544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	4619      	mov	r1, r3
 800254c:	482d      	ldr	r0, [pc, #180]	; (8002604 <DMA1_Channel1_IRQHandler+0xf4>)
 800254e:	f00a fcef 	bl	800cf30 <f_lseek>
			DWORD size_of_fil;
			size_of_fil = f_size(&fil);
 8002552:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <DMA1_Channel1_IRQHandler+0xf4>)
 8002554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	607b      	str	r3, [r7, #4]
			printf("_ f_size(&fil) == %d \r\n", size_of_fil);
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	482b      	ldr	r0, [pc, #172]	; (800260c <DMA1_Channel1_IRQHandler+0xfc>)
 8002560:	f00b f9be 	bl	800d8e0 <iprintf>
			printf("    %d    ", buff_music[10]);
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <DMA1_Channel1_IRQHandler+0x100>)
 8002566:	7a9b      	ldrb	r3, [r3, #10]
 8002568:	4619      	mov	r1, r3
 800256a:	482a      	ldr	r0, [pc, #168]	; (8002614 <DMA1_Channel1_IRQHandler+0x104>)
 800256c:	f00b f9b8 	bl	800d8e0 <iprintf>
			// Write data to the file
			fres = f_write(&fil, buff_music, sizeof(buff_music), &bytesWritten);
 8002570:	463b      	mov	r3, r7
 8002572:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002576:	4926      	ldr	r1, [pc, #152]	; (8002610 <DMA1_Channel1_IRQHandler+0x100>)
 8002578:	4822      	ldr	r0, [pc, #136]	; (8002604 <DMA1_Channel1_IRQHandler+0xf4>)
 800257a:	f00a f9a7 	bl	800c8cc <f_write>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <DMA1_Channel1_IRQHandler+0xf8>)
 8002584:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <DMA1_Channel1_IRQHandler+0xf8>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <DMA1_Channel1_IRQHandler+0x84>
				// Data written successfully
				//f_close(&fil);  // Close the file
				printf("Data written to file: \r\n");
 800258e:	4822      	ldr	r0, [pc, #136]	; (8002618 <DMA1_Channel1_IRQHandler+0x108>)
 8002590:	f00b fa2c 	bl	800d9ec <puts>
			}
		} else {
			// Error occurred while opening the file
			//printf("Error opening file: data_file.txt \r\n");
		}
	  old_fsize = fil.fsize;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <DMA1_Channel1_IRQHandler+0xf4>)
 8002596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a18      	ldr	r2, [pc, #96]	; (8002600 <DMA1_Channel1_IRQHandler+0xf0>)
 800259e:	6013      	str	r3, [r2, #0]
	  adc_counter++;
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <DMA1_Channel1_IRQHandler+0x10c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3301      	adds	r3, #1
 80025a6:	4a1d      	ldr	r2, [pc, #116]	; (800261c <DMA1_Channel1_IRQHandler+0x10c>)
 80025a8:	6013      	str	r3, [r2, #0]
		if(((GPIOC->IDR & GPIO_ODR_10) == 0) || !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10))
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <DMA1_Channel1_IRQHandler+0x110>)
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <DMA1_Channel1_IRQHandler+0xb6>
 80025b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ba:	4819      	ldr	r0, [pc, #100]	; (8002620 <DMA1_Channel1_IRQHandler+0x110>)
 80025bc:	f001 fe0e 	bl	80041dc <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d113      	bne.n	80025ee <DMA1_Channel1_IRQHandler+0xde>
		{
			f_close(&fil);
 80025c6:	480f      	ldr	r0, [pc, #60]	; (8002604 <DMA1_Channel1_IRQHandler+0xf4>)
 80025c8:	f00a fc87 	bl	800ceda <f_close>
			HAL_Delay(10);
 80025cc:	200a      	movs	r0, #10
 80025ce:	f000 fa81 	bl	8002ad4 <HAL_Delay>
			f_mount(NULL, "", 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	4913      	ldr	r1, [pc, #76]	; (8002624 <DMA1_Channel1_IRQHandler+0x114>)
 80025d6:	2000      	movs	r0, #0
 80025d8:	f009 fc2e 	bl	800be38 <f_mount>
			HAL_TIM_Base_Stop_IT(&htim6);
 80025dc:	4812      	ldr	r0, [pc, #72]	; (8002628 <DMA1_Channel1_IRQHandler+0x118>)
 80025de:	f004 fcc9 	bl	8006f74 <HAL_TIM_Base_Stop_IT>
			HAL_DMA_Abort_IT(&hdma_adc1);
 80025e2:	4812      	ldr	r0, [pc, #72]	; (800262c <DMA1_Channel1_IRQHandler+0x11c>)
 80025e4:	f001 fb59 	bl	8003c9a <HAL_DMA_Abort_IT>
			HAL_ADC_Stop(&hadc1);
 80025e8:	4811      	ldr	r0, [pc, #68]	; (8002630 <DMA1_Channel1_IRQHandler+0x120>)
 80025ea:	f000 fc8a 	bl	8002f02 <HAL_ADC_Stop>
		}

	}
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025ee:	480f      	ldr	r0, [pc, #60]	; (800262c <DMA1_Channel1_IRQHandler+0x11c>)
 80025f0:	f001 fb91 	bl	8003d16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40020000 	.word	0x40020000
 8002600:	2000342c 	.word	0x2000342c
 8002604:	200013b4 	.word	0x200013b4
 8002608:	20003428 	.word	0x20003428
 800260c:	0800ee2c 	.word	0x0800ee2c
 8002610:	20003430 	.word	0x20003430
 8002614:	0800ee44 	.word	0x0800ee44
 8002618:	0800ee50 	.word	0x0800ee50
 800261c:	20003638 	.word	0x20003638
 8002620:	48000800 	.word	0x48000800
 8002624:	0800ee68 	.word	0x0800ee68
 8002628:	20000220 	.word	0x20000220
 800262c:	20000110 	.word	0x20000110
 8002630:	200000c0 	.word	0x200000c0

08002634 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(DMA1->ISR & DMA_ISR_TCIF7 == DMA_ISR_TCIF7)
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <DMA1_Channel7_IRQHandler+0x70>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d026      	beq.n	8002694 <DMA1_Channel7_IRQHandler+0x60>
	{
		DMA1->IFCR |= DMA_IFCR_CTCIF7;
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <DMA1_Channel7_IRQHandler+0x70>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <DMA1_Channel7_IRQHandler+0x70>)
 800264c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002650:	6053      	str	r3, [r2, #4]
		HAL_TIM_PWM_Stop_DMA(&htim17, TIM_CHANNEL_1);
 8002652:	2100      	movs	r1, #0
 8002654:	4814      	ldr	r0, [pc, #80]	; (80026a8 <DMA1_Channel7_IRQHandler+0x74>)
 8002656:	f005 f88f 	bl	8007778 <HAL_TIM_PWM_Stop_DMA>
		UINT bytesRead;
		fres = f_read(&fil, buff_music, sizeof(buff_music), &bytesRead);
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002660:	4912      	ldr	r1, [pc, #72]	; (80026ac <DMA1_Channel7_IRQHandler+0x78>)
 8002662:	4813      	ldr	r0, [pc, #76]	; (80026b0 <DMA1_Channel7_IRQHandler+0x7c>)
 8002664:	f009 ff4a 	bl	800c4fc <f_read>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <DMA1_Channel7_IRQHandler+0x80>)
 800266e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)buff_music, sizeof(buff_music));
 8002670:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <DMA1_Channel7_IRQHandler+0x78>)
 8002676:	2100      	movs	r1, #0
 8002678:	480b      	ldr	r0, [pc, #44]	; (80026a8 <DMA1_Channel7_IRQHandler+0x74>)
 800267a:	f004 fe7f 	bl	800737c <HAL_TIM_PWM_Start_DMA>

		if(fres != FR_OK)
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <DMA1_Channel7_IRQHandler+0x80>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <DMA1_Channel7_IRQHandler+0x60>
		{
			HAL_TIM_PWM_Stop_DMA(&htim17, TIM_CHANNEL_1);
 8002686:	2100      	movs	r1, #0
 8002688:	4807      	ldr	r0, [pc, #28]	; (80026a8 <DMA1_Channel7_IRQHandler+0x74>)
 800268a:	f005 f875 	bl	8007778 <HAL_TIM_PWM_Stop_DMA>
			stop_play_music(&fil);
 800268e:	4808      	ldr	r0, [pc, #32]	; (80026b0 <DMA1_Channel7_IRQHandler+0x7c>)
 8002690:	f7ff fc7e 	bl	8001f90 <stop_play_music>
		}
	}
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 8002694:	4808      	ldr	r0, [pc, #32]	; (80026b8 <DMA1_Channel7_IRQHandler+0x84>)
 8002696:	f001 fb3e 	bl	8003d16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40020000 	.word	0x40020000
 80026a8:	2000026c 	.word	0x2000026c
 80026ac:	20003430 	.word	0x20003430
 80026b0:	200013b4 	.word	0x200013b4
 80026b4:	20003428 	.word	0x20003428
 80026b8:	200002b8 	.word	0x200002b8

080026bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if((TIM17->SR & TIM_SR_UIF) == TIM_SR_UIF)
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <TIM1_TRG_COM_TIM17_IRQHandler+0x8c>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d135      	bne.n	800273a <TIM1_TRG_COM_TIM17_IRQHandler+0x7e>
	{
		TIM17->SR &= ~TIM_SR_UIF;
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <TIM1_TRG_COM_TIM17_IRQHandler+0x8c>)
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <TIM1_TRG_COM_TIM17_IRQHandler+0x8c>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6113      	str	r3, [r2, #16]
		if(tim17_counter == 500)
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026e2:	d102      	bne.n	80026ea <TIM1_TRG_COM_TIM17_IRQHandler+0x2e>
		{
			tim17_counter = 0;
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	801a      	strh	r2, [r3, #0]
		}

		if(tim17_counter == 0)
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d116      	bne.n	8002720 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>
		{
			UINT bytesRead = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
			fres = f_read(&fil, buff_music, sizeof(buff_music), &bytesRead);
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026fc:	4914      	ldr	r1, [pc, #80]	; (8002750 <TIM1_TRG_COM_TIM17_IRQHandler+0x94>)
 80026fe:	4815      	ldr	r0, [pc, #84]	; (8002754 <TIM1_TRG_COM_TIM17_IRQHandler+0x98>)
 8002700:	f009 fefc 	bl	800c4fc <f_read>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <TIM1_TRG_COM_TIM17_IRQHandler+0x9c>)
 800270a:	701a      	strb	r2, [r3, #0]
			if( bytesRead == 0 && fres == FR_OK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <TIM1_TRG_COM_TIM17_IRQHandler+0x9c>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>
			{
				stop_play_music(&fil);
 800271a:	480e      	ldr	r0, [pc, #56]	; (8002754 <TIM1_TRG_COM_TIM17_IRQHandler+0x98>)
 800271c:	f7ff fc38 	bl	8001f90 <stop_play_music>
			}
		}
		TIM17->CCR1 = buff_music[tim17_counter];
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <TIM1_TRG_COM_TIM17_IRQHandler+0x94>)
 8002728:	5c9a      	ldrb	r2, [r3, r2]
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <TIM1_TRG_COM_TIM17_IRQHandler+0x8c>)
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
		tim17_counter++;
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 8002738:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800273a:	4808      	ldr	r0, [pc, #32]	; (800275c <TIM1_TRG_COM_TIM17_IRQHandler+0xa0>)
 800273c:	f005 f90c 	bl	8007958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40014800 	.word	0x40014800
 800274c:	20003634 	.word	0x20003634
 8002750:	20003430 	.word	0x20003430
 8002754:	200013b4 	.word	0x200013b4
 8002758:	20003428 	.word	0x20003428
 800275c:	2000026c 	.word	0x2000026c

08002760 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_Delay(600);
 8002764:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002768:	f000 f9b4 	bl	8002ad4 <HAL_Delay>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800276c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002770:	f001 fd64 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002774:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002778:	f001 fd60 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800277c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002780:	f001 fd5c 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002784:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002788:	f001 fd58 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if((TIM6->SR & TIM_SR_UIF) == TIM_SR_UIF)
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <TIM6_DAC_IRQHandler+0x90>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d137      	bne.n	8002810 <TIM6_DAC_IRQHandler+0x80>
	{
		TIM16->SR &= ~TIM_SR_UIF;
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <TIM6_DAC_IRQHandler+0x94>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <TIM6_DAC_IRQHandler+0x94>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6113      	str	r3, [r2, #16]
		if(((GPIOC->IDR & GPIO_ODR_10) == 0) || !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10))
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <TIM6_DAC_IRQHandler+0x98>)
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <TIM6_DAC_IRQHandler+0x38>
 80027b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027bc:	481a      	ldr	r0, [pc, #104]	; (8002828 <TIM6_DAC_IRQHandler+0x98>)
 80027be:	f001 fd0d 	bl	80041dc <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d123      	bne.n	8002810 <TIM6_DAC_IRQHandler+0x80>
		{
			printf("%d \r\n", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10));
 80027c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027cc:	4816      	ldr	r0, [pc, #88]	; (8002828 <TIM6_DAC_IRQHandler+0x98>)
 80027ce:	f001 fd05 	bl	80041dc <HAL_GPIO_ReadPin>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4619      	mov	r1, r3
 80027d6:	4815      	ldr	r0, [pc, #84]	; (800282c <TIM6_DAC_IRQHandler+0x9c>)
 80027d8:	f00b f882 	bl	800d8e0 <iprintf>
			GPIOC->ODR &= ~GPIO_IDR_3;
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <TIM6_DAC_IRQHandler+0x98>)
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	4a11      	ldr	r2, [pc, #68]	; (8002828 <TIM6_DAC_IRQHandler+0x98>)
 80027e2:	f023 0308 	bic.w	r3, r3, #8
 80027e6:	6153      	str	r3, [r2, #20]
			f_close(&fil);
 80027e8:	4811      	ldr	r0, [pc, #68]	; (8002830 <TIM6_DAC_IRQHandler+0xa0>)
 80027ea:	f00a fb76 	bl	800ceda <f_close>
			HAL_Delay(10);
 80027ee:	200a      	movs	r0, #10
 80027f0:	f000 f970 	bl	8002ad4 <HAL_Delay>
			f_mount(NULL, "", 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	490f      	ldr	r1, [pc, #60]	; (8002834 <TIM6_DAC_IRQHandler+0xa4>)
 80027f8:	2000      	movs	r0, #0
 80027fa:	f009 fb1d 	bl	800be38 <f_mount>
			HAL_TIM_Base_Stop_IT(&htim6);
 80027fe:	480e      	ldr	r0, [pc, #56]	; (8002838 <TIM6_DAC_IRQHandler+0xa8>)
 8002800:	f004 fbb8 	bl	8006f74 <HAL_TIM_Base_Stop_IT>
			HAL_DMA_Abort_IT(&hdma_adc1);
 8002804:	480d      	ldr	r0, [pc, #52]	; (800283c <TIM6_DAC_IRQHandler+0xac>)
 8002806:	f001 fa48 	bl	8003c9a <HAL_DMA_Abort_IT>
			//HAL_ADC_Stop_DMA(&hadc1);
			HAL_ADC_Stop(&hadc1);
 800280a:	480d      	ldr	r0, [pc, #52]	; (8002840 <TIM6_DAC_IRQHandler+0xb0>)
 800280c:	f000 fb79 	bl	8002f02 <HAL_ADC_Stop>
		}
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002810:	4809      	ldr	r0, [pc, #36]	; (8002838 <TIM6_DAC_IRQHandler+0xa8>)
 8002812:	f005 f8a1 	bl	8007958 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8002816:	480b      	ldr	r0, [pc, #44]	; (8002844 <TIM6_DAC_IRQHandler+0xb4>)
 8002818:	f001 f91b 	bl	8003a52 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40001000 	.word	0x40001000
 8002824:	40014400 	.word	0x40014400
 8002828:	48000800 	.word	0x48000800
 800282c:	0800ee6c 	.word	0x0800ee6c
 8002830:	200013b4 	.word	0x200013b4
 8002834:	0800ee68 	.word	0x0800ee68
 8002838:	20000220 	.word	0x20000220
 800283c:	20000110 	.word	0x20000110
 8002840:	200000c0 	.word	0x200000c0
 8002844:	20000154 	.word	0x20000154

08002848 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e00a      	b.n	8002870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800285a:	f3af 8000 	nop.w
 800285e:	4601      	mov	r1, r0
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	60ba      	str	r2, [r7, #8]
 8002866:	b2ca      	uxtb	r2, r1
 8002868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3301      	adds	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	dbf0      	blt.n	800285a <_read+0x12>
	}

return len;
 8002878:	687b      	ldr	r3, [r7, #4]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e009      	b.n	80028a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	60ba      	str	r2, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe ff19 	bl	80016d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dbf1      	blt.n	8002894 <_write+0x12>
	}
	return len;
 80028b0:	687b      	ldr	r3, [r7, #4]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_close>:

int _close(int file)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
	return -1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e2:	605a      	str	r2, [r3, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_isatty>:

int _isatty(int file)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	return 1;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	return 0;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <_sbrk+0x5c>)
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <_sbrk+0x60>)
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <_sbrk+0x64>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <_sbrk+0x68>)
 8002944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	429a      	cmp	r2, r3
 8002952:	d207      	bcs.n	8002964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002954:	f00a ff92 	bl	800d87c <__errno>
 8002958:	4603      	mov	r3, r0
 800295a:	220c      	movs	r2, #12
 800295c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e009      	b.n	8002978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <_sbrk+0x64>)
 8002974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002976:	68fb      	ldr	r3, [r7, #12]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20004000 	.word	0x20004000
 8002984:	00000400 	.word	0x00000400
 8002988:	2000363c 	.word	0x2000363c
 800298c:	20003888 	.word	0x20003888

08002990 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <SystemInit+0x20>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <SystemInit+0x20>)
 800299c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80029b8:	f7ff ffea 	bl	8002990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029bc:	480c      	ldr	r0, [pc, #48]	; (80029f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80029be:	490d      	ldr	r1, [pc, #52]	; (80029f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <LoopForever+0xe>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c4:	e002      	b.n	80029cc <LoopCopyDataInit>

080029c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ca:	3304      	adds	r3, #4

080029cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d0:	d3f9      	bcc.n	80029c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80029d4:	4c0a      	ldr	r4, [pc, #40]	; (8002a00 <LoopForever+0x16>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d8:	e001      	b.n	80029de <LoopFillZerobss>

080029da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029dc:	3204      	adds	r2, #4

080029de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e0:	d3fb      	bcc.n	80029da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029e2:	f00a ff51 	bl	800d888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029e6:	f7fe fb3b 	bl	8001060 <main>

080029ea <LoopForever>:

LoopForever:
    b LoopForever
 80029ea:	e7fe      	b.n	80029ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80029f8:	0800f4e4 	.word	0x0800f4e4
  ldr r2, =_sbss
 80029fc:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002a00:	20003888 	.word	0x20003888

08002a04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a04:	e7fe      	b.n	8002a04 <ADC1_IRQHandler>
	...

08002a08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_Init+0x28>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_Init+0x28>)
 8002a12:	f043 0310 	orr.w	r3, r3, #16
 8002a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f000 ffad 	bl	8003978 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f000 f808 	bl	8002a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a24:	f7ff fae4 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40022000 	.word	0x40022000

08002a34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_InitTick+0x54>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_InitTick+0x58>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 ffc5 	bl	80039e2 <HAL_SYSTICK_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00e      	b.n	8002a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b0f      	cmp	r3, #15
 8002a66:	d80a      	bhi.n	8002a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f000 ff8d 	bl	800398e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a74:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <HAL_InitTick+0x5c>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000014 	.word	0x20000014
 8002a8c:	2000001c 	.word	0x2000001c
 8002a90:	20000018 	.word	0x20000018

08002a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_IncTick+0x20>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	2000001c 	.word	0x2000001c
 8002ab8:	20003640 	.word	0x20003640

08002abc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_GetTick+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20003640 	.word	0x20003640

08002ad4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff ffee 	bl	8002abc <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d005      	beq.n	8002afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_Delay+0x44>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002afa:	bf00      	nop
 8002afc:	f7ff ffde 	bl	8002abc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8f7      	bhi.n	8002afc <HAL_Delay+0x28>
  {
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2000001c 	.word	0x2000001c

08002b1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b09a      	sub	sp, #104	; 0x68
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e169      	b.n	8002e10 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d176      	bne.n	8002c3c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d152      	bne.n	8002bfc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fa61 	bl	8002038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d13b      	bne.n	8002bfc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fd0b 	bl	80035a0 <ADC_Disable>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d12f      	bne.n	8002bfc <HAL_ADC_Init+0xe0>
 8002b9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bac:	f023 0302 	bic.w	r3, r3, #2
 8002bb0:	f043 0202 	orr.w	r2, r3, #2
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bc6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bd6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd8:	4b8f      	ldr	r3, [pc, #572]	; (8002e18 <HAL_ADC_Init+0x2fc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a8f      	ldr	r2, [pc, #572]	; (8002e1c <HAL_ADC_Init+0x300>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0c9a      	lsrs	r2, r3, #18
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bee:	e002      	b.n	8002bf6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f9      	bne.n	8002bf0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c18:	d110      	bne.n	8002c3c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f023 0312 	bic.w	r3, r3, #18
 8002c22:	f043 0210 	orr.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 80d6 	bne.w	8002df6 <HAL_ADC_Init+0x2da>
 8002c4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 80d1 	bne.w	8002df6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 80c9 	bne.w	8002df6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c6c:	f043 0202 	orr.w	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c74:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <HAL_ADC_Init+0x304>)
 8002c76:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d108      	bne.n	8002c9c <HAL_ADC_Init+0x180>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_Init+0x180>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_ADC_Init+0x182>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11c      	bne.n	8002cdc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ca2:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_ADC_Init+0x1a8>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_Init+0x1a8>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_ADC_Init+0x1aa>
 8002cc4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d108      	bne.n	8002cdc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cda:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7e5b      	ldrb	r3, [r3, #25]
 8002ce0:	035b      	lsls	r3, r3, #13
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	d002      	beq.n	8002cf0 <HAL_ADC_Init+0x1d4>
 8002cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cee:	e000      	b.n	8002cf2 <HAL_ADC_Init+0x1d6>
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d02:	4313      	orrs	r3, r2
 8002d04:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d11b      	bne.n	8002d48 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7e5b      	ldrb	r3, [r3, #25]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	045a      	lsls	r2, r3, #17
 8002d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2a:	e00d      	b.n	8002d48 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d007      	beq.n	8002d60 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d114      	bne.n	8002d98 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7c:	f023 0302 	bic.w	r3, r3, #2
 8002d80:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7e1b      	ldrb	r3, [r3, #24]
 8002d86:	039a      	lsls	r2, r3, #14
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4313      	orrs	r3, r2
 8002d92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d94:	4313      	orrs	r3, r2
 8002d96:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <HAL_ADC_Init+0x308>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002da8:	430b      	orrs	r3, r1
 8002daa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10c      	bne.n	8002dce <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f023 010f 	bic.w	r1, r3, #15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	1e5a      	subs	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
 8002dcc:	e007      	b.n	8002dde <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 020f 	bic.w	r2, r2, #15
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f023 0303 	bic.w	r3, r3, #3
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
 8002df4:	e00a      	b.n	8002e0c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f023 0312 	bic.w	r3, r3, #18
 8002dfe:	f043 0210 	orr.w	r2, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002e0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3768      	adds	r7, #104	; 0x68
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000014 	.word	0x20000014
 8002e1c:	431bde83 	.word	0x431bde83
 8002e20:	50000300 	.word	0x50000300
 8002e24:	fff0c007 	.word	0xfff0c007

08002e28 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d158      	bne.n	8002ef4 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_Start+0x28>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e054      	b.n	8002efa <HAL_ADC_Start+0xd2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fb3d 	bl	80034d8 <ADC_Enable>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d140      	bne.n	8002eea <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb2:	d106      	bne.n	8002ec2 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	f023 0206 	bic.w	r2, r3, #6
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
 8002ec0:	e002      	b.n	8002ec8 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	221c      	movs	r2, #28
 8002ed6:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0204 	orr.w	r2, r2, #4
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e006      	b.n	8002ef8 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ef2:	e001      	b.n	8002ef8 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_Stop+0x1a>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e023      	b.n	8002f64 <HAL_ADC_Stop+0x62>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f24:	216c      	movs	r1, #108	; 0x6c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fba0 	bl	800366c <ADC_ConversionStop>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d111      	bne.n	8002f5a <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fb32 	bl	80035a0 <ADC_Disable>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b09b      	sub	sp, #108	; 0x6c
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x22>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e299      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x556>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 827d 	bne.w	80034a0 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d81c      	bhi.n	8002fe8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	231f      	movs	r3, #31
 8002fc4:	4093      	lsls	r3, r2
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	4019      	ands	r1, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fa00 f203 	lsl.w	r2, r0, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe6:	e063      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b09      	cmp	r3, #9
 8002fee:	d81e      	bhi.n	800302e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	3b1e      	subs	r3, #30
 8003004:	221f      	movs	r2, #31
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	4019      	ands	r1, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	3b1e      	subs	r3, #30
 8003020:	fa00 f203 	lsl.w	r2, r0, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
 800302c:	e040      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b0e      	cmp	r3, #14
 8003034:	d81e      	bhi.n	8003074 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	3b3c      	subs	r3, #60	; 0x3c
 800304a:	221f      	movs	r2, #31
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	4019      	ands	r1, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	3b3c      	subs	r3, #60	; 0x3c
 8003066:	fa00 f203 	lsl.w	r2, r0, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
 8003072:	e01d      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	3b5a      	subs	r3, #90	; 0x5a
 8003088:	221f      	movs	r2, #31
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	4019      	ands	r1, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	3b5a      	subs	r3, #90	; 0x5a
 80030a4:	fa00 f203 	lsl.w	r2, r0, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 80e5 	bne.w	800328a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	d91c      	bls.n	8003102 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6999      	ldr	r1, [r3, #24]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	3b1e      	subs	r3, #30
 80030da:	2207      	movs	r2, #7
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	4019      	ands	r1, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6898      	ldr	r0, [r3, #8]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	3b1e      	subs	r3, #30
 80030f4:	fa00 f203 	lsl.w	r2, r0, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	619a      	str	r2, [r3, #24]
 8003100:	e019      	b.n	8003136 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6959      	ldr	r1, [r3, #20]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	2207      	movs	r2, #7
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	4019      	ands	r1, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6898      	ldr	r0, [r3, #8]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	fa00 f203 	lsl.w	r2, r0, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	3b01      	subs	r3, #1
 8003154:	2b03      	cmp	r3, #3
 8003156:	d84f      	bhi.n	80031f8 <HAL_ADC_ConfigChannel+0x28c>
 8003158:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <HAL_ADC_ConfigChannel+0x1f4>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003171 	.word	0x08003171
 8003164:	08003193 	.word	0x08003193
 8003168:	080031b5 	.word	0x080031b5
 800316c:	080031d7 	.word	0x080031d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003176:	4b99      	ldr	r3, [pc, #612]	; (80033dc <HAL_ADC_ConfigChannel+0x470>)
 8003178:	4013      	ands	r3, r2
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	0691      	lsls	r1, r2, #26
 8003180:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003182:	430a      	orrs	r2, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800318e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003190:	e07e      	b.n	8003290 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003198:	4b90      	ldr	r3, [pc, #576]	; (80033dc <HAL_ADC_ConfigChannel+0x470>)
 800319a:	4013      	ands	r3, r2
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	0691      	lsls	r1, r2, #26
 80031a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031a4:	430a      	orrs	r2, r1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031b0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031b2:	e06d      	b.n	8003290 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_ADC_ConfigChannel+0x470>)
 80031bc:	4013      	ands	r3, r2
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	0691      	lsls	r1, r2, #26
 80031c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031c6:	430a      	orrs	r2, r1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031d2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031d4:	e05c      	b.n	8003290 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031dc:	4b7f      	ldr	r3, [pc, #508]	; (80033dc <HAL_ADC_ConfigChannel+0x470>)
 80031de:	4013      	ands	r3, r2
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	0691      	lsls	r1, r2, #26
 80031e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031e8:	430a      	orrs	r2, r1
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031f4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031f6:	e04b      	b.n	8003290 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	069b      	lsls	r3, r3, #26
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800321a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003222:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	069b      	lsls	r3, r3, #26
 800322c:	429a      	cmp	r2, r3
 800322e:	d107      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800323e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	069b      	lsls	r3, r3, #26
 8003250:	429a      	cmp	r2, r3
 8003252:	d107      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003262:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	069b      	lsls	r3, r3, #26
 8003274:	429a      	cmp	r2, r3
 8003276:	d10a      	bne.n	800328e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003286:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003288:	e001      	b.n	800328e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <HAL_ADC_ConfigChannel+0x324>
      break;
 800328e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d108      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x344>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x344>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x346>
 80032b0:	2300      	movs	r3, #0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 80ff 	bne.w	80034b6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d00f      	beq.n	80032e0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2201      	movs	r2, #1
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	400a      	ands	r2, r1
 80032da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80032de:	e049      	b.n	8003374 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	409a      	lsls	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b09      	cmp	r3, #9
 8003300:	d91c      	bls.n	800333c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6999      	ldr	r1, [r3, #24]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	3b1b      	subs	r3, #27
 8003314:	2207      	movs	r2, #7
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	4019      	ands	r1, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6898      	ldr	r0, [r3, #8]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	3b1b      	subs	r3, #27
 800332e:	fa00 f203 	lsl.w	r2, r0, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	619a      	str	r2, [r3, #24]
 800333a:	e01b      	b.n	8003374 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6959      	ldr	r1, [r3, #20]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	2207      	movs	r2, #7
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	4019      	ands	r1, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6898      	ldr	r0, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	fa00 f203 	lsl.w	r2, r0, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_ADC_ConfigChannel+0x474>)
 8003376:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b10      	cmp	r3, #16
 800337e:	d105      	bne.n	800338c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003388:	2b00      	cmp	r3, #0
 800338a:	d014      	beq.n	80033b6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003390:	2b11      	cmp	r3, #17
 8003392:	d105      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033a4:	2b12      	cmp	r3, #18
 80033a6:	f040 8086 	bne.w	80034b6 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80033aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d17f      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10d      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x478>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d106      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x478>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e005      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x47a>
 80033da:	bf00      	nop
 80033dc:	83fff000 	.word	0x83fff000
 80033e0:	50000300 	.word	0x50000300
 80033e4:	2300      	movs	r3, #0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d150      	bne.n	800348c <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_ADC_ConfigChannel+0x4a0>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x4a0>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_ADC_ConfigChannel+0x4a2>
 800340c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800340e:	2b00      	cmp	r3, #0
 8003410:	d13c      	bne.n	800348c <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b10      	cmp	r3, #16
 8003418:	d11d      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x4ea>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003422:	d118      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800342c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800342e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <HAL_ADC_ConfigChannel+0x564>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <HAL_ADC_ConfigChannel+0x568>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0c9a      	lsrs	r2, r3, #18
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003446:	e002      	b.n	800344e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	3b01      	subs	r3, #1
 800344c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f9      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003454:	e02e      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b11      	cmp	r3, #17
 800345c:	d10b      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x50a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003466:	d106      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003472:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003474:	e01e      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b12      	cmp	r3, #18
 800347c:	d11a      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800347e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003488:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800348a:	e013      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800349e:	e00a      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80034b2:	e000      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034b4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80034be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	376c      	adds	r7, #108	; 0x6c
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000014 	.word	0x20000014
 80034d4:	431bde83 	.word	0x431bde83

080034d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d108      	bne.n	8003504 <ADC_Enable+0x2c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <ADC_Enable+0x2c>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <ADC_Enable+0x2e>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d143      	bne.n	8003592 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	4b22      	ldr	r3, [pc, #136]	; (800359c <ADC_Enable+0xc4>)
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00d      	beq.n	8003534 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f043 0210 	orr.w	r2, r3, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e02f      	b.n	8003594 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003544:	f7ff faba 	bl	8002abc <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800354a:	e01b      	b.n	8003584 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800354c:	f7ff fab6 	bl	8002abc <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d914      	bls.n	8003584 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d00d      	beq.n	8003584 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f043 0210 	orr.w	r2, r3, #16
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d1dc      	bne.n	800354c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	8000003f 	.word	0x8000003f

080035a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d108      	bne.n	80035cc <ADC_Disable+0x2c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <ADC_Disable+0x2c>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <ADC_Disable+0x2e>
 80035cc:	2300      	movs	r3, #0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d047      	beq.n	8003662 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 030d 	and.w	r3, r3, #13
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10f      	bne.n	8003600 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0202 	orr.w	r2, r2, #2
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2203      	movs	r2, #3
 80035f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80035f8:	f7ff fa60 	bl	8002abc <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035fe:	e029      	b.n	8003654 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f043 0210 	orr.w	r2, r3, #16
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e023      	b.n	8003664 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800361c:	f7ff fa4e 	bl	8002abc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d914      	bls.n	8003654 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10d      	bne.n	8003654 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f043 0210 	orr.w	r2, r3, #16
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	f043 0201 	orr.w	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e007      	b.n	8003664 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d0dc      	beq.n	800361c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 809b 	beq.w	80037c8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a0:	d12a      	bne.n	80036f8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d126      	bne.n	80036f8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d122      	bne.n	80036f8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80036b2:	230c      	movs	r3, #12
 80036b4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80036b6:	e014      	b.n	80036e2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4a46      	ldr	r2, [pc, #280]	; (80037d4 <ADC_ConversionStop+0x168>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d90d      	bls.n	80036dc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f043 0210 	orr.w	r2, r3, #16
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e076      	b.n	80037ca <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	3301      	adds	r3, #1
 80036e0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d1e3      	bne.n	80036b8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2240      	movs	r2, #64	; 0x40
 80036f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b60      	cmp	r3, #96	; 0x60
 80036fc:	d015      	beq.n	800372a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d10e      	bne.n	800372a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0210 	orr.w	r2, r2, #16
 8003728:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b0c      	cmp	r3, #12
 800372e:	d015      	beq.n	800375c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b08      	cmp	r3, #8
 800373c:	d10e      	bne.n	800375c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0220 	orr.w	r2, r2, #32
 800375a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b60      	cmp	r3, #96	; 0x60
 8003760:	d005      	beq.n	800376e <ADC_ConversionStop+0x102>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b6c      	cmp	r3, #108	; 0x6c
 8003766:	d105      	bne.n	8003774 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003768:	230c      	movs	r3, #12
 800376a:	617b      	str	r3, [r7, #20]
        break;
 800376c:	e005      	b.n	800377a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800376e:	2308      	movs	r3, #8
 8003770:	617b      	str	r3, [r7, #20]
        break;
 8003772:	e002      	b.n	800377a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003774:	2304      	movs	r3, #4
 8003776:	617b      	str	r3, [r7, #20]
        break;
 8003778:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800377a:	f7ff f99f 	bl	8002abc <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003780:	e01b      	b.n	80037ba <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003782:	f7ff f99b 	bl	8002abc <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b0b      	cmp	r3, #11
 800378e:	d914      	bls.n	80037ba <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0210 	orr.w	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f043 0201 	orr.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e007      	b.n	80037ca <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1dc      	bne.n	8003782 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	000993ff 	.word	0x000993ff

080037d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f4:	4013      	ands	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380a:	4a04      	ldr	r2, [pc, #16]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__NVIC_GetPriorityGrouping+0x18>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f003 0307 	and.w	r3, r3, #7
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db0b      	blt.n	8003866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4907      	ldr	r1, [pc, #28]	; (8003874 <__NVIC_EnableIRQ+0x38>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000e100 	.word	0xe000e100

08003878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	db0a      	blt.n	80038a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	490c      	ldr	r1, [pc, #48]	; (80038c4 <__NVIC_SetPriority+0x4c>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	0112      	lsls	r2, r2, #4
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	440b      	add	r3, r1
 800389c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a0:	e00a      	b.n	80038b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4908      	ldr	r1, [pc, #32]	; (80038c8 <__NVIC_SetPriority+0x50>)
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	3b04      	subs	r3, #4
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	440b      	add	r3, r1
 80038b6:	761a      	strb	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000e100 	.word	0xe000e100
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f1c3 0307 	rsb	r3, r3, #7
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	bf28      	it	cs
 80038ea:	2304      	movcs	r3, #4
 80038ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3304      	adds	r3, #4
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d902      	bls.n	80038fc <NVIC_EncodePriority+0x30>
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3b03      	subs	r3, #3
 80038fa:	e000      	b.n	80038fe <NVIC_EncodePriority+0x32>
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43da      	mvns	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	401a      	ands	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003914:	f04f 31ff 	mov.w	r1, #4294967295
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fa01 f303 	lsl.w	r3, r1, r3
 800391e:	43d9      	mvns	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003924:	4313      	orrs	r3, r2
         );
}
 8003926:	4618      	mov	r0, r3
 8003928:	3724      	adds	r7, #36	; 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003944:	d301      	bcc.n	800394a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003946:	2301      	movs	r3, #1
 8003948:	e00f      	b.n	800396a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <SysTick_Config+0x40>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003952:	210f      	movs	r1, #15
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	f7ff ff8e 	bl	8003878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <SysTick_Config+0x40>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003962:	4b04      	ldr	r3, [pc, #16]	; (8003974 <SysTick_Config+0x40>)
 8003964:	2207      	movs	r2, #7
 8003966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	e000e010 	.word	0xe000e010

08003978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff29 	bl	80037d8 <__NVIC_SetPriorityGrouping>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a0:	f7ff ff3e 	bl	8003820 <__NVIC_GetPriorityGrouping>
 80039a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f7ff ff8e 	bl	80038cc <NVIC_EncodePriority>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff5d 	bl	8003878 <__NVIC_SetPriority>
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	4603      	mov	r3, r0
 80039ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff31 	bl	800383c <__NVIC_EnableIRQ>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ffa2 	bl	8003934 <SysTick_Config>
 80039f0:	4603      	mov	r3, r0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e014      	b.n	8003a36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	791b      	ldrb	r3, [r3, #4]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d105      	bne.n	8003a22 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fe fb73 	bl	8002108 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a68:	d120      	bne.n	8003aac <HAL_DAC_IRQHandler+0x5a>
  {  
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a78:	d118      	bne.n	8003aac <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a94:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aa4:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ffc9 	bl	8003a3e <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	795b      	ldrb	r3, [r3, #5]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_DAC_ConfigChannel+0x20>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e036      	b.n	8003b42 <HAL_DAC_ConfigChannel+0x8e>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2202      	movs	r2, #2
 8003ade:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ae8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4013      	ands	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	22c0      	movs	r2, #192	; 0xc0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	400a      	ands	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e037      	b.n	8003bd4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f97e 	bl	8003eb8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}  
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_DMA_Start_IT+0x20>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e04a      	b.n	8003c92 <HAL_DMA_Start_IT+0xb6>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d13a      	bne.n	8003c84 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f912 	bl	8003e5c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 020e 	orr.w	r2, r2, #14
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e00f      	b.n	8003c72 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 020a 	orr.w	r2, r2, #10
 8003c60:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0204 	bic.w	r2, r2, #4
 8003c70:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e005      	b.n	8003c90 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d005      	beq.n	8003cbc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	e027      	b.n	8003d0c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 020e 	bic.w	r2, r2, #14
 8003cca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cea:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
    } 
  }
  return status;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2204      	movs	r2, #4
 8003d34:	409a      	lsls	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d024      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x72>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01f      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0204 	bic.w	r2, r2, #4
 8003d64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	2104      	movs	r1, #4
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d06a      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003d86:	e065      	b.n	8003e54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdc>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 020a 	bic.w	r2, r2, #10
 8003dbe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d035      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003df0:	e030      	b.n	8003e54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2208      	movs	r2, #8
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d028      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x13e>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d023      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 020e 	bic.w	r2, r2, #14
 8003e1a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
    }
  }
}  
 8003e52:	e7ff      	b.n	8003e54 <HAL_DMA_IRQHandler+0x13e>
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d108      	bne.n	8003e9c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e9a:	e007      	b.n	8003eac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	60da      	str	r2, [r3, #12]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <DMA_CalcBaseAndBitshift+0x34>)
 8003ec8:	4413      	add	r3, r2
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <DMA_CalcBaseAndBitshift+0x38>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	009a      	lsls	r2, r3, #2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a06      	ldr	r2, [pc, #24]	; (8003ef4 <DMA_CalcBaseAndBitshift+0x3c>)
 8003edc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	bffdfff8 	.word	0xbffdfff8
 8003ef0:	cccccccd 	.word	0xcccccccd
 8003ef4:	40020000 	.word	0x40020000

08003ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f06:	e14e      	b.n	80041a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	fa01 f303 	lsl.w	r3, r1, r3
 8003f14:	4013      	ands	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8140 	beq.w	80041a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d005      	beq.n	8003f38 <HAL_GPIO_Init+0x40>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d130      	bne.n	8003f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2203      	movs	r2, #3
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f6e:	2201      	movs	r2, #1
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	091b      	lsrs	r3, r3, #4
 8003f84:	f003 0201 	and.w	r2, r3, #1
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d017      	beq.n	8003fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d123      	bne.n	800402a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	08da      	lsrs	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3208      	adds	r2, #8
 8003fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	220f      	movs	r2, #15
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	08da      	lsrs	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3208      	adds	r2, #8
 8004024:	6939      	ldr	r1, [r7, #16]
 8004026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	2203      	movs	r2, #3
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4013      	ands	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0203 	and.w	r2, r3, #3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 809a 	beq.w	80041a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406c:	4b55      	ldr	r3, [pc, #340]	; (80041c4 <HAL_GPIO_Init+0x2cc>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4a54      	ldr	r2, [pc, #336]	; (80041c4 <HAL_GPIO_Init+0x2cc>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6193      	str	r3, [r2, #24]
 8004078:	4b52      	ldr	r3, [pc, #328]	; (80041c4 <HAL_GPIO_Init+0x2cc>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004084:	4a50      	ldr	r2, [pc, #320]	; (80041c8 <HAL_GPIO_Init+0x2d0>)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	3302      	adds	r3, #2
 800408c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	220f      	movs	r2, #15
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040ae:	d013      	beq.n	80040d8 <HAL_GPIO_Init+0x1e0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a46      	ldr	r2, [pc, #280]	; (80041cc <HAL_GPIO_Init+0x2d4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00d      	beq.n	80040d4 <HAL_GPIO_Init+0x1dc>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a45      	ldr	r2, [pc, #276]	; (80041d0 <HAL_GPIO_Init+0x2d8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <HAL_GPIO_Init+0x1d8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a44      	ldr	r2, [pc, #272]	; (80041d4 <HAL_GPIO_Init+0x2dc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_GPIO_Init+0x1d4>
 80040c8:	2303      	movs	r3, #3
 80040ca:	e006      	b.n	80040da <HAL_GPIO_Init+0x1e2>
 80040cc:	2305      	movs	r3, #5
 80040ce:	e004      	b.n	80040da <HAL_GPIO_Init+0x1e2>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e002      	b.n	80040da <HAL_GPIO_Init+0x1e2>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_GPIO_Init+0x1e2>
 80040d8:	2300      	movs	r3, #0
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	f002 0203 	and.w	r2, r2, #3
 80040e0:	0092      	lsls	r2, r2, #2
 80040e2:	4093      	lsls	r3, r2
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040ea:	4937      	ldr	r1, [pc, #220]	; (80041c8 <HAL_GPIO_Init+0x2d0>)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	3302      	adds	r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040f8:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <HAL_GPIO_Init+0x2e0>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800411c:	4a2e      	ldr	r2, [pc, #184]	; (80041d8 <HAL_GPIO_Init+0x2e0>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <HAL_GPIO_Init+0x2e0>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004146:	4a24      	ldr	r2, [pc, #144]	; (80041d8 <HAL_GPIO_Init+0x2e0>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800414c:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_GPIO_Init+0x2e0>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004170:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <HAL_GPIO_Init+0x2e0>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004176:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <HAL_GPIO_Init+0x2e0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800419a:	4a0f      	ldr	r2, [pc, #60]	; (80041d8 <HAL_GPIO_Init+0x2e0>)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f aea9 	bne.w	8003f08 <HAL_GPIO_Init+0x10>
  }
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40010000 	.word	0x40010000
 80041cc:	48000400 	.word	0x48000400
 80041d0:	48000800 	.word	0x48000800
 80041d4:	48000c00 	.word	0x48000c00
 80041d8:	40010400 	.word	0x40010400

080041dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	e001      	b.n	80041fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
 8004218:	4613      	mov	r3, r2
 800421a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800421c:	787b      	ldrb	r3, [r7, #1]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004222:	887a      	ldrh	r2, [r7, #2]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004228:	e002      	b.n	8004230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd fad6 	bl	800180c <HAL_GPIO_EXTI_Callback>
  }
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40010400 	.word	0x40010400

0800426c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e081      	b.n	8004382 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fd ff7e 	bl	8002194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2224      	movs	r2, #36	; 0x24
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	e006      	b.n	80042f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d104      	bne.n	8004306 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004304:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004318:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004328:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69d9      	ldr	r1, [r3, #28]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	461a      	mov	r2, r3
 8004398:	460b      	mov	r3, r1
 800439a:	817b      	strh	r3, [r7, #10]
 800439c:	4613      	mov	r3, r2
 800439e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	f040 80da 	bne.w	8004562 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_I2C_Master_Transmit+0x30>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e0d3      	b.n	8004564 <HAL_I2C_Master_Transmit+0x1d8>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043c4:	f7fe fb7a 	bl	8002abc <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2319      	movs	r3, #25
 80043d0:	2201      	movs	r2, #1
 80043d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f8f0 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0be      	b.n	8004564 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2221      	movs	r2, #33	; 0x21
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2210      	movs	r2, #16
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	893a      	ldrh	r2, [r7, #8]
 8004406:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2bff      	cmp	r3, #255	; 0xff
 8004416:	d90e      	bls.n	8004436 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	22ff      	movs	r2, #255	; 0xff
 800441c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	b2da      	uxtb	r2, r3
 8004424:	8979      	ldrh	r1, [r7, #10]
 8004426:	4b51      	ldr	r3, [pc, #324]	; (800456c <HAL_I2C_Master_Transmit+0x1e0>)
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fa7e 	bl	8004930 <I2C_TransferConfig>
 8004434:	e06c      	b.n	8004510 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004444:	b2da      	uxtb	r2, r3
 8004446:	8979      	ldrh	r1, [r7, #10]
 8004448:	4b48      	ldr	r3, [pc, #288]	; (800456c <HAL_I2C_Master_Transmit+0x1e0>)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fa6d 	bl	8004930 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004456:	e05b      	b.n	8004510 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	6a39      	ldr	r1, [r7, #32]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f8fc 	bl	800465a <I2C_WaitOnTXISFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e07b      	b.n	8004564 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	781a      	ldrb	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d034      	beq.n	8004510 <HAL_I2C_Master_Transmit+0x184>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d130      	bne.n	8004510 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f87f 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e04d      	b.n	8004564 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2bff      	cmp	r3, #255	; 0xff
 80044d0:	d90e      	bls.n	80044f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	22ff      	movs	r2, #255	; 0xff
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	8979      	ldrh	r1, [r7, #10]
 80044e0:	2300      	movs	r3, #0
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fa21 	bl	8004930 <I2C_TransferConfig>
 80044ee:	e00f      	b.n	8004510 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	8979      	ldrh	r1, [r7, #10]
 8004502:	2300      	movs	r3, #0
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fa10 	bl	8004930 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d19e      	bne.n	8004458 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	6a39      	ldr	r1, [r7, #32]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f8e2 	bl	80046e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e01a      	b.n	8004564 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2220      	movs	r2, #32
 8004534:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_I2C_Master_Transmit+0x1e4>)
 8004542:	400b      	ands	r3, r1
 8004544:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004562:	2302      	movs	r3, #2
  }
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	80002000 	.word	0x80002000
 8004570:	fe00e800 	.word	0xfe00e800

08004574 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b02      	cmp	r3, #2
 8004588:	d103      	bne.n	8004592 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d007      	beq.n	80045b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	619a      	str	r2, [r3, #24]
  }
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045cc:	e031      	b.n	8004632 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d02d      	beq.n	8004632 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7fe fa71 	bl	8002abc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d122      	bne.n	8004632 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4013      	ands	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	429a      	cmp	r2, r3
 8004608:	d113      	bne.n	8004632 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e00f      	b.n	8004652 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	429a      	cmp	r2, r3
 800464e:	d0be      	beq.n	80045ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004666:	e033      	b.n	80046d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f87f 	bl	8004770 <I2C_IsErrorOccurred>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e031      	b.n	80046e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d025      	beq.n	80046d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004684:	f7fe fa1a 	bl	8002abc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	429a      	cmp	r2, r3
 8004692:	d302      	bcc.n	800469a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d11a      	bne.n	80046d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d013      	beq.n	80046d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e007      	b.n	80046e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d1c4      	bne.n	8004668 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f4:	e02f      	b.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f838 	bl	8004770 <I2C_IsErrorOccurred>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e02d      	b.n	8004766 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470a:	f7fe f9d7 	bl	8002abc <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d11a      	bne.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b20      	cmp	r3, #32
 800472c:	d013      	beq.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f043 0220 	orr.w	r2, r3, #32
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e007      	b.n	8004766 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b20      	cmp	r3, #32
 8004762:	d1c8      	bne.n	80046f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d068      	beq.n	800486e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2210      	movs	r2, #16
 80047a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047a4:	e049      	b.n	800483a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d045      	beq.n	800483a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fe f985 	bl	8002abc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <I2C_IsErrorOccurred+0x54>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d13a      	bne.n	800483a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e6:	d121      	bne.n	800482c <I2C_IsErrorOccurred+0xbc>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ee:	d01d      	beq.n	800482c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d01a      	beq.n	800482c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004804:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004806:	f7fe f959 	bl	8002abc <HAL_GetTick>
 800480a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800480c:	e00e      	b.n	800482c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800480e:	f7fe f955 	bl	8002abc <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b19      	cmp	r3, #25
 800481a:	d907      	bls.n	800482c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	f043 0320 	orr.w	r3, r3, #32
 8004822:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800482a:	e006      	b.n	800483a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b20      	cmp	r3, #32
 8004838:	d1e9      	bne.n	800480e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b20      	cmp	r3, #32
 8004846:	d003      	beq.n	8004850 <I2C_IsErrorOccurred+0xe0>
 8004848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0aa      	beq.n	80047a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2220      	movs	r2, #32
 800485e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f043 0304 	orr.w	r3, r3, #4
 8004866:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00b      	beq.n	8004898 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004890:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	f043 0308 	orr.w	r3, r3, #8
 80048a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	f043 0302 	orr.w	r3, r3, #2
 80048ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80048dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01c      	beq.n	800491e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fe45 	bl	8004574 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6859      	ldr	r1, [r3, #4]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <I2C_IsErrorOccurred+0x1bc>)
 80048f6:	400b      	ands	r3, r1
 80048f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	431a      	orrs	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800491e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004922:	4618      	mov	r0, r3
 8004924:	3728      	adds	r7, #40	; 0x28
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	fe00e800 	.word	0xfe00e800

08004930 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	817b      	strh	r3, [r7, #10]
 800493e:	4613      	mov	r3, r2
 8004940:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004948:	7a7b      	ldrb	r3, [r7, #9]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004950:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	4313      	orrs	r3, r2
 800495a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800495e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	0d5b      	lsrs	r3, r3, #21
 800496a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <I2C_TransferConfig+0x60>)
 8004970:	430b      	orrs	r3, r1
 8004972:	43db      	mvns	r3, r3
 8004974:	ea02 0103 	and.w	r1, r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	03ff63ff 	.word	0x03ff63ff

08004994 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d138      	bne.n	8004a1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e032      	b.n	8004a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2224      	movs	r2, #36	; 0x24
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6819      	ldr	r1, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d139      	bne.n	8004ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e033      	b.n	8004ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2224      	movs	r2, #36	; 0x24
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
  }
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ad4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ada:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f001 b823 	b.w	8005b30 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 817d 	beq.w	8004dfa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b00:	4bbc      	ldr	r3, [pc, #752]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d00c      	beq.n	8004b26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b0c:	4bb9      	ldr	r3, [pc, #740]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d15c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x10e>
 8004b18:	4bb6      	ldr	r3, [pc, #728]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b24:	d155      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x10e>
 8004b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004b32:	fa93 f3a3 	rbit	r3, r3
 8004b36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3e:	fab3 f383 	clz	r3, r3
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d102      	bne.n	8004b58 <HAL_RCC_OscConfig+0x94>
 8004b52:	4ba8      	ldr	r3, [pc, #672]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	e015      	b.n	8004b84 <HAL_RCC_OscConfig+0xc0>
 8004b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004b64:	fa93 f3a3 	rbit	r3, r3
 8004b68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004b74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004b78:	fa93 f3a3 	rbit	r3, r3
 8004b7c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004b80:	4b9c      	ldr	r3, [pc, #624]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004b8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004b90:	fa92 f2a2 	rbit	r2, r2
 8004b94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004b98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004b9c:	fab2 f282 	clz	r2, r2
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	f042 0220 	orr.w	r2, r2, #32
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	f002 021f 	and.w	r2, r2, #31
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 811f 	beq.w	8004df8 <HAL_RCC_OscConfig+0x334>
 8004bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 8116 	bne.w	8004df8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f000 bfaf 	b.w	8005b30 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x12e>
 8004be4:	4b83      	ldr	r3, [pc, #524]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a82      	ldr	r2, [pc, #520]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	e036      	b.n	8004c60 <HAL_RCC_OscConfig+0x19c>
 8004bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x158>
 8004c02:	4b7c      	ldr	r3, [pc, #496]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7b      	ldr	r2, [pc, #492]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b79      	ldr	r3, [pc, #484]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a78      	ldr	r2, [pc, #480]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e021      	b.n	8004c60 <HAL_RCC_OscConfig+0x19c>
 8004c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x184>
 8004c2e:	4b71      	ldr	r3, [pc, #452]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a70      	ldr	r2, [pc, #448]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	4b6e      	ldr	r3, [pc, #440]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6d      	ldr	r2, [pc, #436]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e00b      	b.n	8004c60 <HAL_RCC_OscConfig+0x19c>
 8004c48:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a69      	ldr	r2, [pc, #420]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4b67      	ldr	r3, [pc, #412]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a66      	ldr	r2, [pc, #408]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c60:	4b64      	ldr	r3, [pc, #400]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	f023 020f 	bic.w	r2, r3, #15
 8004c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	495f      	ldr	r1, [pc, #380]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d059      	beq.n	8004d3e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fd ff17 	bl	8002abc <HAL_GetTick>
 8004c8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fd ff12 	bl	8002abc <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b64      	cmp	r3, #100	; 0x64
 8004ca2:	d902      	bls.n	8004caa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	f000 bf43 	b.w	8005b30 <HAL_RCC_OscConfig+0x106c>
 8004caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004cbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d102      	bne.n	8004cdc <HAL_RCC_OscConfig+0x218>
 8004cd6:	4b47      	ldr	r3, [pc, #284]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	e015      	b.n	8004d08 <HAL_RCC_OscConfig+0x244>
 8004cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004ce8:	fa93 f3a3 	rbit	r3, r3
 8004cec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cf4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004cf8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004d04:	4b3b      	ldr	r3, [pc, #236]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d0c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004d10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004d14:	fa92 f2a2 	rbit	r2, r2
 8004d18:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004d1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004d20:	fab2 f282 	clz	r2, r2
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	f042 0220 	orr.w	r2, r2, #32
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	f002 021f 	and.w	r2, r2, #31
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f202 	lsl.w	r2, r1, r2
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ab      	beq.n	8004c94 <HAL_RCC_OscConfig+0x1d0>
 8004d3c:	e05d      	b.n	8004dfa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3e:	f7fd febd 	bl	8002abc <HAL_GetTick>
 8004d42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd feb8 	bl	8002abc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b64      	cmp	r3, #100	; 0x64
 8004d56:	d902      	bls.n	8004d5e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	f000 bee9 	b.w	8005b30 <HAL_RCC_OscConfig+0x106c>
 8004d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d62:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004d72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_RCC_OscConfig+0x2cc>
 8004d8a:	4b1a      	ldr	r3, [pc, #104]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	e015      	b.n	8004dbc <HAL_RCC_OscConfig+0x2f8>
 8004d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004d9c:	fa93 f3a3 	rbit	r3, r3
 8004da0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004da8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004dac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004db8:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <HAL_RCC_OscConfig+0x330>)
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dc0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004dc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004dc8:	fa92 f2a2 	rbit	r2, r2
 8004dcc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004dd0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004dd4:	fab2 f282 	clz	r2, r2
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	f042 0220 	orr.w	r2, r2, #32
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	f002 021f 	and.w	r2, r2, #31
 8004de4:	2101      	movs	r1, #1
 8004de6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ab      	bne.n	8004d48 <HAL_RCC_OscConfig+0x284>
 8004df0:	e003      	b.n	8004dfa <HAL_RCC_OscConfig+0x336>
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 817d 	beq.w	800510a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e10:	4ba6      	ldr	r3, [pc, #664]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e1c:	4ba3      	ldr	r3, [pc, #652]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 030c 	and.w	r3, r3, #12
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d172      	bne.n	8004f0e <HAL_RCC_OscConfig+0x44a>
 8004e28:	4ba0      	ldr	r3, [pc, #640]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d16c      	bne.n	8004f0e <HAL_RCC_OscConfig+0x44a>
 8004e34:	2302      	movs	r3, #2
 8004e36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004e46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4a:	fab3 f383 	clz	r3, r3
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d102      	bne.n	8004e64 <HAL_RCC_OscConfig+0x3a0>
 8004e5e:	4b93      	ldr	r3, [pc, #588]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	e013      	b.n	8004e8c <HAL_RCC_OscConfig+0x3c8>
 8004e64:	2302      	movs	r3, #2
 8004e66:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004e76:	2302      	movs	r3, #2
 8004e78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004e7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004e80:	fa93 f3a3 	rbit	r3, r3
 8004e84:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004e88:	4b88      	ldr	r3, [pc, #544]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004e92:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004e96:	fa92 f2a2 	rbit	r2, r2
 8004e9a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004e9e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004ea2:	fab2 f282 	clz	r2, r2
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	f042 0220 	orr.w	r2, r2, #32
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	f002 021f 	and.w	r2, r2, #31
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x410>
 8004ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d002      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f000 be2e 	b.w	8005b30 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed4:	4b75      	ldr	r3, [pc, #468]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	21f8      	movs	r1, #248	; 0xf8
 8004eea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004ef2:	fa91 f1a1 	rbit	r1, r1
 8004ef6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004efa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004efe:	fab1 f181 	clz	r1, r1
 8004f02:	b2c9      	uxtb	r1, r1
 8004f04:	408b      	lsls	r3, r1
 8004f06:	4969      	ldr	r1, [pc, #420]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0c:	e0fd      	b.n	800510a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8088 	beq.w	8005030 <HAL_RCC_OscConfig+0x56c>
 8004f20:	2301      	movs	r3, #1
 8004f22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004f2a:	fa93 f3a3 	rbit	r3, r3
 8004f2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004f32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f36:	fab3 f383 	clz	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	461a      	mov	r2, r3
 8004f48:	2301      	movs	r3, #1
 8004f4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4c:	f7fd fdb6 	bl	8002abc <HAL_GetTick>
 8004f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f54:	e00a      	b.n	8004f6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f56:	f7fd fdb1 	bl	8002abc <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d902      	bls.n	8004f6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	f000 bde2 	b.w	8005b30 <HAL_RCC_OscConfig+0x106c>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004f76:	fa93 f3a3 	rbit	r3, r3
 8004f7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004f7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f82:	fab3 f383 	clz	r3, r3
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d102      	bne.n	8004f9c <HAL_RCC_OscConfig+0x4d8>
 8004f96:	4b45      	ldr	r3, [pc, #276]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	e013      	b.n	8004fc4 <HAL_RCC_OscConfig+0x500>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004fa6:	fa93 f3a3 	rbit	r3, r3
 8004faa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004fae:	2302      	movs	r3, #2
 8004fb0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004fb4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004fb8:	fa93 f3a3 	rbit	r3, r3
 8004fbc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004fc0:	4b3a      	ldr	r3, [pc, #232]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004fca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004fce:	fa92 f2a2 	rbit	r2, r2
 8004fd2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004fd6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004fda:	fab2 f282 	clz	r2, r2
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	f042 0220 	orr.w	r2, r2, #32
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	f002 021f 	and.w	r2, r2, #31
 8004fea:	2101      	movs	r1, #1
 8004fec:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0af      	beq.n	8004f56 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff6:	4b2d      	ldr	r3, [pc, #180]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	21f8      	movs	r1, #248	; 0xf8
 800500c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005014:	fa91 f1a1 	rbit	r1, r1
 8005018:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800501c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005020:	fab1 f181 	clz	r1, r1
 8005024:	b2c9      	uxtb	r1, r1
 8005026:	408b      	lsls	r3, r1
 8005028:	4920      	ldr	r1, [pc, #128]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]
 800502e:	e06c      	b.n	800510a <HAL_RCC_OscConfig+0x646>
 8005030:	2301      	movs	r3, #1
 8005032:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800503a:	fa93 f3a3 	rbit	r3, r3
 800503e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005042:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005046:	fab3 f383 	clz	r3, r3
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005050:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	461a      	mov	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fd fd2e 	bl	8002abc <HAL_GetTick>
 8005060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005064:	e00a      	b.n	800507c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005066:	f7fd fd29 	bl	8002abc <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d902      	bls.n	800507c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	f000 bd5a 	b.w	8005b30 <HAL_RCC_OscConfig+0x106c>
 800507c:	2302      	movs	r3, #2
 800507e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005082:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005086:	fa93 f3a3 	rbit	r3, r3
 800508a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800508e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005092:	fab3 f383 	clz	r3, r3
 8005096:	b2db      	uxtb	r3, r3
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	b2db      	uxtb	r3, r3
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d104      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5ec>
 80050a6:	4b01      	ldr	r3, [pc, #4]	; (80050ac <HAL_RCC_OscConfig+0x5e8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	e015      	b.n	80050d8 <HAL_RCC_OscConfig+0x614>
 80050ac:	40021000 	.word	0x40021000
 80050b0:	2302      	movs	r3, #2
 80050b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050c2:	2302      	movs	r3, #2
 80050c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050cc:	fa93 f3a3 	rbit	r3, r3
 80050d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050d4:	4bc8      	ldr	r3, [pc, #800]	; (80053f8 <HAL_RCC_OscConfig+0x934>)
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2202      	movs	r2, #2
 80050da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80050de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80050e2:	fa92 f2a2 	rbit	r2, r2
 80050e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80050ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80050ee:	fab2 f282 	clz	r2, r2
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	f042 0220 	orr.w	r2, r2, #32
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	f002 021f 	and.w	r2, r2, #31
 80050fe:	2101      	movs	r1, #1
 8005100:	fa01 f202 	lsl.w	r2, r1, r2
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ad      	bne.n	8005066 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8110 	beq.w	8005340 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d079      	beq.n	8005224 <HAL_RCC_OscConfig+0x760>
 8005130:	2301      	movs	r3, #1
 8005132:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800513a:	fa93 f3a3 	rbit	r3, r3
 800513e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	4bab      	ldr	r3, [pc, #684]	; (80053fc <HAL_RCC_OscConfig+0x938>)
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	461a      	mov	r2, r3
 8005156:	2301      	movs	r3, #1
 8005158:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fd fcaf 	bl	8002abc <HAL_GetTick>
 800515e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005162:	e00a      	b.n	800517a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005164:	f7fd fcaa 	bl	8002abc <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d902      	bls.n	800517a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	f000 bcdb 	b.w	8005b30 <HAL_RCC_OscConfig+0x106c>
 800517a:	2302      	movs	r3, #2
 800517c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005180:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005184:	fa93 f3a3 	rbit	r3, r3
 8005188:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800518c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005190:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005194:	2202      	movs	r2, #2
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	fa93 f2a3 	rbit	r2, r3
 80051a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b8:	2202      	movs	r2, #2
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	fa93 f2a3 	rbit	r2, r3
 80051ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d4:	4b88      	ldr	r3, [pc, #544]	; (80053f8 <HAL_RCC_OscConfig+0x934>)
 80051d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051e0:	2102      	movs	r1, #2
 80051e2:	6019      	str	r1, [r3, #0]
 80051e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	fa93 f1a3 	rbit	r1, r3
 80051f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80051fa:	6019      	str	r1, [r3, #0]
  return result;
 80051fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005200:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	fab3 f383 	clz	r3, r3
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	2101      	movs	r1, #1
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0a0      	beq.n	8005164 <HAL_RCC_OscConfig+0x6a0>
 8005222:	e08d      	b.n	8005340 <HAL_RCC_OscConfig+0x87c>
 8005224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005228:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005234:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	fa93 f2a3 	rbit	r2, r3
 800523e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005242:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005246:	601a      	str	r2, [r3, #0]
  return result;
 8005248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005250:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005252:	fab3 f383 	clz	r3, r3
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	4b68      	ldr	r3, [pc, #416]	; (80053fc <HAL_RCC_OscConfig+0x938>)
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	461a      	mov	r2, r3
 8005262:	2300      	movs	r3, #0
 8005264:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005266:	f7fd fc29 	bl	8002abc <HAL_GetTick>
 800526a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005270:	f7fd fc24 	bl	8002abc <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d902      	bls.n	8005286 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	f000 bc55 	b.w	8005b30 <HAL_RCC_OscConfig+0x106c>
 8005286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800528e:	2202      	movs	r2, #2
 8005290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005296:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	fa93 f2a3 	rbit	r2, r3
 80052a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052b2:	2202      	movs	r2, #2
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	fa93 f2a3 	rbit	r2, r3
 80052c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d6:	2202      	movs	r2, #2
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	fa93 f2a3 	rbit	r2, r3
 80052e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80052f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f2:	4b41      	ldr	r3, [pc, #260]	; (80053f8 <HAL_RCC_OscConfig+0x934>)
 80052f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80052fe:	2102      	movs	r1, #2
 8005300:	6019      	str	r1, [r3, #0]
 8005302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005306:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	fa93 f1a3 	rbit	r1, r3
 8005310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005314:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005318:	6019      	str	r1, [r3, #0]
  return result;
 800531a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	fab3 f383 	clz	r3, r3
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2101      	movs	r1, #1
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d197      	bne.n	8005270 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 81a1 	beq.w	8005698 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005356:	2300      	movs	r3, #0
 8005358:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800535c:	4b26      	ldr	r3, [pc, #152]	; (80053f8 <HAL_RCC_OscConfig+0x934>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d116      	bne.n	8005396 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005368:	4b23      	ldr	r3, [pc, #140]	; (80053f8 <HAL_RCC_OscConfig+0x934>)
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_RCC_OscConfig+0x934>)
 800536e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005372:	61d3      	str	r3, [r2, #28]
 8005374:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <HAL_RCC_OscConfig+0x934>)
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800537c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005380:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800538e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_RCC_OscConfig+0x93c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d11a      	bne.n	80053d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a2:	4b17      	ldr	r3, [pc, #92]	; (8005400 <HAL_RCC_OscConfig+0x93c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a16      	ldr	r2, [pc, #88]	; (8005400 <HAL_RCC_OscConfig+0x93c>)
 80053a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ae:	f7fd fb85 	bl	8002abc <HAL_GetTick>
 80053b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b6:	e009      	b.n	80053cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b8:	f7fd fb80 	bl	8002abc <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b64      	cmp	r3, #100	; 0x64
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e3b1      	b.n	8005b30 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <HAL_RCC_OscConfig+0x93c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0ef      	beq.n	80053b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d10d      	bne.n	8005404 <HAL_RCC_OscConfig+0x940>
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <HAL_RCC_OscConfig+0x934>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	4a02      	ldr	r2, [pc, #8]	; (80053f8 <HAL_RCC_OscConfig+0x934>)
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	6213      	str	r3, [r2, #32]
 80053f4:	e03c      	b.n	8005470 <HAL_RCC_OscConfig+0x9ac>
 80053f6:	bf00      	nop
 80053f8:	40021000 	.word	0x40021000
 80053fc:	10908120 	.word	0x10908120
 8005400:	40007000 	.word	0x40007000
 8005404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10c      	bne.n	800542e <HAL_RCC_OscConfig+0x96a>
 8005414:	4bc1      	ldr	r3, [pc, #772]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	4ac0      	ldr	r2, [pc, #768]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	6213      	str	r3, [r2, #32]
 8005420:	4bbe      	ldr	r3, [pc, #760]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	4abd      	ldr	r2, [pc, #756]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005426:	f023 0304 	bic.w	r3, r3, #4
 800542a:	6213      	str	r3, [r2, #32]
 800542c:	e020      	b.n	8005470 <HAL_RCC_OscConfig+0x9ac>
 800542e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b05      	cmp	r3, #5
 800543c:	d10c      	bne.n	8005458 <HAL_RCC_OscConfig+0x994>
 800543e:	4bb7      	ldr	r3, [pc, #732]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	4ab6      	ldr	r2, [pc, #728]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005444:	f043 0304 	orr.w	r3, r3, #4
 8005448:	6213      	str	r3, [r2, #32]
 800544a:	4bb4      	ldr	r3, [pc, #720]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4ab3      	ldr	r2, [pc, #716]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	6213      	str	r3, [r2, #32]
 8005456:	e00b      	b.n	8005470 <HAL_RCC_OscConfig+0x9ac>
 8005458:	4bb0      	ldr	r3, [pc, #704]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	4aaf      	ldr	r2, [pc, #700]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	6213      	str	r3, [r2, #32]
 8005464:	4bad      	ldr	r3, [pc, #692]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	4aac      	ldr	r2, [pc, #688]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 800546a:	f023 0304 	bic.w	r3, r3, #4
 800546e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8081 	beq.w	8005584 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005482:	f7fd fb1b 	bl	8002abc <HAL_GetTick>
 8005486:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548a:	e00b      	b.n	80054a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800548c:	f7fd fb16 	bl	8002abc <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f241 3288 	movw	r2, #5000	; 0x1388
 800549c:	4293      	cmp	r3, r2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e345      	b.n	8005b30 <HAL_RCC_OscConfig+0x106c>
 80054a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80054ac:	2202      	movs	r2, #2
 80054ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	fa93 f2a3 	rbit	r2, r3
 80054be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80054d0:	2202      	movs	r2, #2
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	fa93 f2a3 	rbit	r2, r3
 80054e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80054ea:	601a      	str	r2, [r3, #0]
  return result;
 80054ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80054f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f6:	fab3 f383 	clz	r3, r3
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f043 0302 	orr.w	r3, r3, #2
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d102      	bne.n	8005510 <HAL_RCC_OscConfig+0xa4c>
 800550a:	4b84      	ldr	r3, [pc, #528]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	e013      	b.n	8005538 <HAL_RCC_OscConfig+0xa74>
 8005510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005514:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005518:	2202      	movs	r2, #2
 800551a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005520:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	fa93 f2a3 	rbit	r2, r3
 800552a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	4b79      	ldr	r3, [pc, #484]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800553c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005540:	2102      	movs	r1, #2
 8005542:	6011      	str	r1, [r2, #0]
 8005544:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005548:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	fa92 f1a2 	rbit	r1, r2
 8005552:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005556:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800555a:	6011      	str	r1, [r2, #0]
  return result;
 800555c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005560:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	fab2 f282 	clz	r2, r2
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	f002 021f 	and.w	r2, r2, #31
 8005576:	2101      	movs	r1, #1
 8005578:	fa01 f202 	lsl.w	r2, r1, r2
 800557c:	4013      	ands	r3, r2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d084      	beq.n	800548c <HAL_RCC_OscConfig+0x9c8>
 8005582:	e07f      	b.n	8005684 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005584:	f7fd fa9a 	bl	8002abc <HAL_GetTick>
 8005588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558c:	e00b      	b.n	80055a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fd fa95 	bl	8002abc <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e2c4      	b.n	8005b30 <HAL_RCC_OscConfig+0x106c>
 80055a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80055ae:	2202      	movs	r2, #2
 80055b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	fa93 f2a3 	rbit	r2, r3
 80055c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80055d2:	2202      	movs	r2, #2
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	fa93 f2a3 	rbit	r2, r3
 80055e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80055ec:	601a      	str	r2, [r3, #0]
  return result;
 80055ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80055f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	b2db      	uxtb	r3, r3
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d102      	bne.n	8005612 <HAL_RCC_OscConfig+0xb4e>
 800560c:	4b43      	ldr	r3, [pc, #268]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	e013      	b.n	800563a <HAL_RCC_OscConfig+0xb76>
 8005612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005616:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800561a:	2202      	movs	r2, #2
 800561c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005622:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	fa93 f2a3 	rbit	r2, r3
 800562c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005630:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	4b39      	ldr	r3, [pc, #228]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800563e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005642:	2102      	movs	r1, #2
 8005644:	6011      	str	r1, [r2, #0]
 8005646:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800564a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	fa92 f1a2 	rbit	r1, r2
 8005654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005658:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800565c:	6011      	str	r1, [r2, #0]
  return result;
 800565e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005662:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	fab2 f282 	clz	r2, r2
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	f002 021f 	and.w	r2, r2, #31
 8005678:	2101      	movs	r1, #1
 800567a:	fa01 f202 	lsl.w	r2, r1, r2
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d184      	bne.n	800558e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005684:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005688:	2b01      	cmp	r3, #1
 800568a:	d105      	bne.n	8005698 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 8005692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005696:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8242 	beq.w	8005b2e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056aa:	4b1c      	ldr	r3, [pc, #112]	; (800571c <HAL_RCC_OscConfig+0xc58>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	f000 8213 	beq.w	8005ade <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	f040 8162 	bne.w	800598e <HAL_RCC_OscConfig+0xeca>
 80056ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80056d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	fa93 f2a3 	rbit	r2, r3
 80056e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80056ee:	601a      	str	r2, [r3, #0]
  return result;
 80056f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80056f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fa:	fab3 f383 	clz	r3, r3
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005704:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005710:	f7fd f9d4 	bl	8002abc <HAL_GetTick>
 8005714:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005718:	e00c      	b.n	8005734 <HAL_RCC_OscConfig+0xc70>
 800571a:	bf00      	nop
 800571c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005720:	f7fd f9cc 	bl	8002abc <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e1fd      	b.n	8005b30 <HAL_RCC_OscConfig+0x106c>
 8005734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005738:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800573c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005746:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	fa93 f2a3 	rbit	r2, r3
 8005750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005754:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005758:	601a      	str	r2, [r3, #0]
  return result;
 800575a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800575e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005762:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d102      	bne.n	800577e <HAL_RCC_OscConfig+0xcba>
 8005778:	4bb0      	ldr	r3, [pc, #704]	; (8005a3c <HAL_RCC_OscConfig+0xf78>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	e027      	b.n	80057ce <HAL_RCC_OscConfig+0xd0a>
 800577e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005782:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800578a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005790:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	fa93 f2a3 	rbit	r2, r3
 800579a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80057ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	fa93 f2a3 	rbit	r2, r3
 80057c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	4b9c      	ldr	r3, [pc, #624]	; (8005a3c <HAL_RCC_OscConfig+0xf78>)
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80057d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057da:	6011      	str	r1, [r2, #0]
 80057dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	fa92 f1a2 	rbit	r1, r2
 80057ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80057f2:	6011      	str	r1, [r2, #0]
  return result;
 80057f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	fab2 f282 	clz	r2, r2
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	f042 0220 	orr.w	r2, r2, #32
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	f002 021f 	and.w	r2, r2, #31
 800580e:	2101      	movs	r1, #1
 8005810:	fa01 f202 	lsl.w	r2, r1, r2
 8005814:	4013      	ands	r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d182      	bne.n	8005720 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800581a:	4b88      	ldr	r3, [pc, #544]	; (8005a3c <HAL_RCC_OscConfig+0xf78>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800582e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	430b      	orrs	r3, r1
 800583c:	497f      	ldr	r1, [pc, #508]	; (8005a3c <HAL_RCC_OscConfig+0xf78>)
 800583e:	4313      	orrs	r3, r2
 8005840:	604b      	str	r3, [r1, #4]
 8005842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005846:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800584a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800584e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005854:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	fa93 f2a3 	rbit	r2, r3
 800585e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005862:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005866:	601a      	str	r2, [r3, #0]
  return result;
 8005868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800586c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005870:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800587c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	461a      	mov	r2, r3
 8005884:	2301      	movs	r3, #1
 8005886:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fd f918 	bl	8002abc <HAL_GetTick>
 800588c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005890:	e009      	b.n	80058a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005892:	f7fd f913 	bl	8002abc <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e144      	b.n	8005b30 <HAL_RCC_OscConfig+0x106c>
 80058a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80058ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	fa93 f2a3 	rbit	r2, r3
 80058c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80058ca:	601a      	str	r2, [r3, #0]
  return result;
 80058cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80058d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058d6:	fab3 f383 	clz	r3, r3
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d102      	bne.n	80058f0 <HAL_RCC_OscConfig+0xe2c>
 80058ea:	4b54      	ldr	r3, [pc, #336]	; (8005a3c <HAL_RCC_OscConfig+0xf78>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	e027      	b.n	8005940 <HAL_RCC_OscConfig+0xe7c>
 80058f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80058f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005902:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	fa93 f2a3 	rbit	r2, r3
 800590c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005910:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800591a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800591e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005928:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	fa93 f2a3 	rbit	r2, r3
 8005932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005936:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <HAL_RCC_OscConfig+0xf78>)
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005944:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005948:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800594c:	6011      	str	r1, [r2, #0]
 800594e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005952:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005956:	6812      	ldr	r2, [r2, #0]
 8005958:	fa92 f1a2 	rbit	r1, r2
 800595c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005960:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005964:	6011      	str	r1, [r2, #0]
  return result;
 8005966:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800596a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	fab2 f282 	clz	r2, r2
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	f042 0220 	orr.w	r2, r2, #32
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	f002 021f 	and.w	r2, r2, #31
 8005980:	2101      	movs	r1, #1
 8005982:	fa01 f202 	lsl.w	r2, r1, r2
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d082      	beq.n	8005892 <HAL_RCC_OscConfig+0xdce>
 800598c:	e0cf      	b.n	8005b2e <HAL_RCC_OscConfig+0x106a>
 800598e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005992:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005996:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800599a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	fa93 f2a3 	rbit	r2, r3
 80059aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80059b2:	601a      	str	r2, [r3, #0]
  return result;
 80059b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80059bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059be:	fab3 f383 	clz	r3, r3
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	461a      	mov	r2, r3
 80059d0:	2300      	movs	r3, #0
 80059d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d4:	f7fd f872 	bl	8002abc <HAL_GetTick>
 80059d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059dc:	e009      	b.n	80059f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059de:	f7fd f86d 	bl	8002abc <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e09e      	b.n	8005b30 <HAL_RCC_OscConfig+0x106c>
 80059f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80059fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	fa93 f2a3 	rbit	r2, r3
 8005a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005a16:	601a      	str	r2, [r3, #0]
  return result;
 8005a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005a20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a22:	fab3 f383 	clz	r3, r3
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d104      	bne.n	8005a40 <HAL_RCC_OscConfig+0xf7c>
 8005a36:	4b01      	ldr	r3, [pc, #4]	; (8005a3c <HAL_RCC_OscConfig+0xf78>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	e029      	b.n	8005a90 <HAL_RCC_OscConfig+0xfcc>
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	fa93 f2a3 	rbit	r2, r3
 8005a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	fa93 f2a3 	rbit	r2, r3
 8005a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <HAL_RCC_OscConfig+0x1078>)
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a94:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005a98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aa2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	fa92 f1a2 	rbit	r1, r2
 8005aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ab0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005ab4:	6011      	str	r1, [r2, #0]
  return result;
 8005ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	fab2 f282 	clz	r2, r2
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	f042 0220 	orr.w	r2, r2, #32
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	f002 021f 	and.w	r2, r2, #31
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d180      	bne.n	80059de <HAL_RCC_OscConfig+0xf1a>
 8005adc:	e027      	b.n	8005b2e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e01e      	b.n	8005b30 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005af2:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <HAL_RCC_OscConfig+0x1078>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005afa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005afe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d10b      	bne.n	8005b2a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005b12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005b16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d001      	beq.n	8005b2e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000

08005b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b09e      	sub	sp, #120	; 0x78
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e162      	b.n	8005e1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b58:	4b90      	ldr	r3, [pc, #576]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d910      	bls.n	8005b88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b8d      	ldr	r3, [pc, #564]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 0207 	bic.w	r2, r3, #7
 8005b6e:	498b      	ldr	r1, [pc, #556]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b89      	ldr	r3, [pc, #548]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e14a      	b.n	8005e1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b94:	4b82      	ldr	r3, [pc, #520]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	497f      	ldr	r1, [pc, #508]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 80dc 	beq.w	8005d6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d13c      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xf6>
 8005bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bc0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc4:	fa93 f3a3 	rbit	r3, r3
 8005bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bcc:	fab3 f383 	clz	r3, r3
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d102      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xa6>
 8005be0:	4b6f      	ldr	r3, [pc, #444]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	e00f      	b.n	8005c06 <HAL_RCC_ClockConfig+0xc6>
 8005be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bee:	fa93 f3a3 	rbit	r3, r3
 8005bf2:	667b      	str	r3, [r7, #100]	; 0x64
 8005bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bfc:	fa93 f3a3 	rbit	r3, r3
 8005c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c02:	4b67      	ldr	r3, [pc, #412]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c0e:	fa92 f2a2 	rbit	r2, r2
 8005c12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005c14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c16:	fab2 f282 	clz	r2, r2
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	f042 0220 	orr.w	r2, r2, #32
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	f002 021f 	and.w	r2, r2, #31
 8005c26:	2101      	movs	r1, #1
 8005c28:	fa01 f202 	lsl.w	r2, r1, r2
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d17b      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e0f3      	b.n	8005e1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d13c      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x178>
 8005c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c46:	fa93 f3a3 	rbit	r3, r3
 8005c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4e:	fab3 f383 	clz	r3, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d102      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x128>
 8005c62:	4b4f      	ldr	r3, [pc, #316]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	e00f      	b.n	8005c88 <HAL_RCC_ClockConfig+0x148>
 8005c68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c70:	fa93 f3a3 	rbit	r3, r3
 8005c74:	647b      	str	r3, [r7, #68]	; 0x44
 8005c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7e:	fa93 f3a3 	rbit	r3, r3
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c84:	4b46      	ldr	r3, [pc, #280]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c90:	fa92 f2a2 	rbit	r2, r2
 8005c94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c98:	fab2 f282 	clz	r2, r2
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	f042 0220 	orr.w	r2, r2, #32
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	f002 021f 	and.w	r2, r2, #31
 8005ca8:	2101      	movs	r1, #1
 8005caa:	fa01 f202 	lsl.w	r2, r1, r2
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d13a      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0b2      	b.n	8005e1e <HAL_RCC_ClockConfig+0x2de>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	fa93 f3a3 	rbit	r3, r3
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc6:	fab3 f383 	clz	r3, r3
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d102      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0x1a0>
 8005cda:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	e00d      	b.n	8005cfc <HAL_RCC_ClockConfig+0x1bc>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	fa93 f3a3 	rbit	r3, r3
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	2302      	movs	r3, #2
 8005cee:	623b      	str	r3, [r7, #32]
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	fa93 f3a3 	rbit	r3, r3
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	4b29      	ldr	r3, [pc, #164]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	61ba      	str	r2, [r7, #24]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	fa92 f2a2 	rbit	r2, r2
 8005d06:	617a      	str	r2, [r7, #20]
  return result;
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	fab2 f282 	clz	r2, r2
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	f042 0220 	orr.w	r2, r2, #32
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	f002 021f 	and.w	r2, r2, #31
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e079      	b.n	8005e1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d2a:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f023 0203 	bic.w	r2, r3, #3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	491a      	ldr	r1, [pc, #104]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d3c:	f7fc febe 	bl	8002abc <HAL_GetTick>
 8005d40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d42:	e00a      	b.n	8005d5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d44:	f7fc feba 	bl	8002abc <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e061      	b.n	8005e1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f003 020c 	and.w	r2, r3, #12
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d1eb      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d214      	bcs.n	8005da4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f023 0207 	bic.w	r2, r3, #7
 8005d82:	4906      	ldr	r1, [pc, #24]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e040      	b.n	8005e1e <HAL_RCC_ClockConfig+0x2de>
 8005d9c:	40022000 	.word	0x40022000
 8005da0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <HAL_RCC_ClockConfig+0x2e8>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	491a      	ldr	r1, [pc, #104]	; (8005e28 <HAL_RCC_ClockConfig+0x2e8>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dce:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <HAL_RCC_ClockConfig+0x2e8>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4912      	ldr	r1, [pc, #72]	; (8005e28 <HAL_RCC_ClockConfig+0x2e8>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005de2:	f000 f829 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8005de6:	4601      	mov	r1, r0
 8005de8:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <HAL_RCC_ClockConfig+0x2e8>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005df0:	22f0      	movs	r2, #240	; 0xf0
 8005df2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	fa92 f2a2 	rbit	r2, r2
 8005dfa:	60fa      	str	r2, [r7, #12]
  return result;
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	fab2 f282 	clz	r2, r2
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	40d3      	lsrs	r3, r2
 8005e06:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <HAL_RCC_ClockConfig+0x2ec>)
 8005e08:	5cd3      	ldrb	r3, [r2, r3]
 8005e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8005e0e:	4a08      	ldr	r2, [pc, #32]	; (8005e30 <HAL_RCC_ClockConfig+0x2f0>)
 8005e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005e12:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <HAL_RCC_ClockConfig+0x2f4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fc fe0c 	bl	8002a34 <HAL_InitTick>
  
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3778      	adds	r7, #120	; 0x78
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	0800eebc 	.word	0x0800eebc
 8005e30:	20000014 	.word	0x20000014
 8005e34:	20000018 	.word	0x20000018

08005e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b08b      	sub	sp, #44	; 0x2c
 8005e3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	2300      	movs	r3, #0
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005e52:	4b29      	ldr	r3, [pc, #164]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d002      	beq.n	8005e68 <HAL_RCC_GetSysClockFreq+0x30>
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d003      	beq.n	8005e6e <HAL_RCC_GetSysClockFreq+0x36>
 8005e66:	e03c      	b.n	8005ee2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e68:	4b24      	ldr	r3, [pc, #144]	; (8005efc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e6a:	623b      	str	r3, [r7, #32]
      break;
 8005e6c:	e03c      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005e74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005e78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	fa92 f2a2 	rbit	r2, r2
 8005e80:	607a      	str	r2, [r7, #4]
  return result;
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	fab2 f282 	clz	r2, r2
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	40d3      	lsrs	r3, r2
 8005e8c:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e8e:	5cd3      	ldrb	r3, [r2, r3]
 8005e90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005e92:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	220f      	movs	r2, #15
 8005e9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	fa92 f2a2 	rbit	r2, r2
 8005ea4:	60fa      	str	r2, [r7, #12]
  return result;
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	fab2 f282 	clz	r2, r2
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	40d3      	lsrs	r3, r2
 8005eb0:	4a14      	ldr	r2, [pc, #80]	; (8005f04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005eb2:	5cd3      	ldrb	r3, [r2, r3]
 8005eb4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ec0:	4a0e      	ldr	r2, [pc, #56]	; (8005efc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed0:	e004      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4a0c      	ldr	r2, [pc, #48]	; (8005f08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	623b      	str	r3, [r7, #32]
      break;
 8005ee0:	e002      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ee4:	623b      	str	r3, [r7, #32]
      break;
 8005ee6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	372c      	adds	r7, #44	; 0x2c
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	007a1200 	.word	0x007a1200
 8005f00:	0800eed4 	.word	0x0800eed4
 8005f04:	0800eee4 	.word	0x0800eee4
 8005f08:	003d0900 	.word	0x003d0900

08005f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f10:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f12:	681b      	ldr	r3, [r3, #0]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000014 	.word	0x20000014

08005f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005f2a:	f7ff ffef 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005f2e:	4601      	mov	r1, r0
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005f3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	fa92 f2a2 	rbit	r2, r2
 8005f44:	603a      	str	r2, [r7, #0]
  return result;
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	fab2 f282 	clz	r2, r2
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	40d3      	lsrs	r3, r2
 8005f50:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005f52:	5cd3      	ldrb	r3, [r2, r3]
 8005f54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000
 8005f64:	0800eecc 	.word	0x0800eecc

08005f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005f6e:	f7ff ffcd 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005f72:	4601      	mov	r1, r0
 8005f74:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005f7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005f80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	fa92 f2a2 	rbit	r2, r2
 8005f88:	603a      	str	r2, [r7, #0]
  return result;
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	fab2 f282 	clz	r2, r2
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	40d3      	lsrs	r3, r2
 8005f94:	4a04      	ldr	r2, [pc, #16]	; (8005fa8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005f96:	5cd3      	ldrb	r3, [r2, r3]
 8005f98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	0800eecc 	.word	0x0800eecc

08005fac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b092      	sub	sp, #72	; 0x48
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80d4 	beq.w	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd0:	4b4e      	ldr	r3, [pc, #312]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10e      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fdc:	4b4b      	ldr	r3, [pc, #300]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	4a4a      	ldr	r2, [pc, #296]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	61d3      	str	r3, [r2, #28]
 8005fe8:	4b48      	ldr	r3, [pc, #288]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffa:	4b45      	ldr	r3, [pc, #276]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006002:	2b00      	cmp	r3, #0
 8006004:	d118      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006006:	4b42      	ldr	r3, [pc, #264]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a41      	ldr	r2, [pc, #260]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800600c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006010:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006012:	f7fc fd53 	bl	8002abc <HAL_GetTick>
 8006016:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006018:	e008      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800601a:	f7fc fd4f 	bl	8002abc <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b64      	cmp	r3, #100	; 0x64
 8006026:	d901      	bls.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e14b      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602c:	4b38      	ldr	r3, [pc, #224]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f0      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006038:	4b34      	ldr	r3, [pc, #208]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006040:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8084 	beq.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006052:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006054:	429a      	cmp	r2, r3
 8006056:	d07c      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006058:	4b2c      	ldr	r3, [pc, #176]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006066:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	fa93 f3a3 	rbit	r3, r3
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006072:	fab3 f383 	clz	r3, r3
 8006076:	b2db      	uxtb	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	4b26      	ldr	r3, [pc, #152]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	461a      	mov	r2, r3
 8006082:	2301      	movs	r3, #1
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800608a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	fa93 f3a3 	rbit	r3, r3
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006096:	fab3 f383 	clz	r3, r3
 800609a:	b2db      	uxtb	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060aa:	4a18      	ldr	r2, [pc, #96]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d04b      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ba:	f7fc fcff 	bl	8002abc <HAL_GetTick>
 80060be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c0:	e00a      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f7fc fcfb 	bl	8002abc <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e0f5      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80060d8:	2302      	movs	r3, #2
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	fa93 f3a3 	rbit	r3, r3
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
 80060e4:	2302      	movs	r3, #2
 80060e6:	623b      	str	r3, [r7, #32]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	fa93 f3a3 	rbit	r3, r3
 80060ee:	61fb      	str	r3, [r7, #28]
  return result;
 80060f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f2:	fab3 f383 	clz	r3, r3
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f043 0302 	orr.w	r3, r3, #2
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d108      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006106:	4b01      	ldr	r3, [pc, #4]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	e00d      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800610c:	40021000 	.word	0x40021000
 8006110:	40007000 	.word	0x40007000
 8006114:	10908100 	.word	0x10908100
 8006118:	2302      	movs	r3, #2
 800611a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	fa93 f3a3 	rbit	r3, r3
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	4b69      	ldr	r3, [pc, #420]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2202      	movs	r2, #2
 800612a:	613a      	str	r2, [r7, #16]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	fa92 f2a2 	rbit	r2, r2
 8006132:	60fa      	str	r2, [r7, #12]
  return result;
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	fab2 f282 	clz	r2, r2
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	f002 021f 	and.w	r2, r2, #31
 8006146:	2101      	movs	r1, #1
 8006148:	fa01 f202 	lsl.w	r2, r1, r2
 800614c:	4013      	ands	r3, r2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0b7      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006152:	4b5e      	ldr	r3, [pc, #376]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	495b      	ldr	r1, [pc, #364]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006160:	4313      	orrs	r3, r2
 8006162:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006164:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006168:	2b01      	cmp	r3, #1
 800616a:	d105      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800616c:	4b57      	ldr	r3, [pc, #348]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	4a56      	ldr	r2, [pc, #344]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006176:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d008      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006184:	4b51      	ldr	r3, [pc, #324]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	f023 0203 	bic.w	r2, r3, #3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	494e      	ldr	r1, [pc, #312]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006192:	4313      	orrs	r3, r2
 8006194:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061a2:	4b4a      	ldr	r3, [pc, #296]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f023 0210 	bic.w	r2, r3, #16
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	4947      	ldr	r1, [pc, #284]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80061c0:	4b42      	ldr	r3, [pc, #264]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	493f      	ldr	r1, [pc, #252]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d008      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061de:	4b3b      	ldr	r3, [pc, #236]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	f023 0220 	bic.w	r2, r3, #32
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	4938      	ldr	r1, [pc, #224]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061fc:	4b33      	ldr	r3, [pc, #204]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	4930      	ldr	r1, [pc, #192]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800620a:	4313      	orrs	r3, r2
 800620c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800621a:	4b2c      	ldr	r3, [pc, #176]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	4929      	ldr	r1, [pc, #164]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006228:	4313      	orrs	r3, r2
 800622a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006238:	4b24      	ldr	r3, [pc, #144]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	4921      	ldr	r1, [pc, #132]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006246:	4313      	orrs	r3, r2
 8006248:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006256:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	491a      	ldr	r1, [pc, #104]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006264:	4313      	orrs	r3, r2
 8006266:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006274:	4b15      	ldr	r3, [pc, #84]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	4912      	ldr	r1, [pc, #72]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006282:	4313      	orrs	r3, r2
 8006284:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d008      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006292:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	490b      	ldr	r1, [pc, #44]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80062b0:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	4903      	ldr	r1, [pc, #12]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3748      	adds	r7, #72	; 0x48
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40021000 	.word	0x40021000

080062d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e09d      	b.n	800641e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d108      	bne.n	80062fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f2:	d009      	beq.n	8006308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	61da      	str	r2, [r3, #28]
 80062fa:	e005      	b.n	8006308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fb ff7a 	bl	800221c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800633e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006348:	d902      	bls.n	8006350 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e002      	b.n	8006356 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006354:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800635e:	d007      	beq.n	8006370 <HAL_SPI_Init+0xa0>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006368:	d002      	beq.n	8006370 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	ea42 0103 	orr.w	r1, r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	0c1b      	lsrs	r3, r3, #16
 80063cc:	f003 0204 	and.w	r2, r3, #4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063ec:	ea42 0103 	orr.w	r1, r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800640c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b088      	sub	sp, #32
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	4613      	mov	r3, r2
 8006434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_SPI_Transmit+0x22>
 8006444:	2302      	movs	r3, #2
 8006446:	e15f      	b.n	8006708 <HAL_SPI_Transmit+0x2e2>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006450:	f7fc fb34 	bl	8002abc <HAL_GetTick>
 8006454:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b01      	cmp	r3, #1
 8006464:	d002      	beq.n	800646c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006466:	2302      	movs	r3, #2
 8006468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800646a:	e148      	b.n	80066fe <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_SPI_Transmit+0x52>
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d102      	bne.n	800647e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800647c:	e13f      	b.n	80066fe <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2203      	movs	r2, #3
 8006482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	88fa      	ldrh	r2, [r7, #6]
 8006496:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c8:	d10f      	bne.n	80064ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d007      	beq.n	8006508 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006510:	d94f      	bls.n	80065b2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_SPI_Transmit+0xfa>
 800651a:	8afb      	ldrh	r3, [r7, #22]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d142      	bne.n	80065a6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	881a      	ldrh	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	1c9a      	adds	r2, r3, #2
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006544:	e02f      	b.n	80065a6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b02      	cmp	r3, #2
 8006552:	d112      	bne.n	800657a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	1c9a      	adds	r2, r3, #2
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006578:	e015      	b.n	80065a6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657a:	f7fc fa9f 	bl	8002abc <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d803      	bhi.n	8006592 <HAL_SPI_Transmit+0x16c>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d102      	bne.n	8006598 <HAL_SPI_Transmit+0x172>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80065a4:	e0ab      	b.n	80066fe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ca      	bne.n	8006546 <HAL_SPI_Transmit+0x120>
 80065b0:	e080      	b.n	80066b4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_SPI_Transmit+0x19a>
 80065ba:	8afb      	ldrh	r3, [r7, #22]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d174      	bne.n	80066aa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d912      	bls.n	80065f0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b02      	subs	r3, #2
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065ee:	e05c      	b.n	80066aa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006616:	e048      	b.n	80066aa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d12b      	bne.n	800667e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d912      	bls.n	8006656 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	881a      	ldrh	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	1c9a      	adds	r2, r3, #2
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b02      	subs	r3, #2
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006654:	e029      	b.n	80066aa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	330c      	adds	r3, #12
 8006660:	7812      	ldrb	r2, [r2, #0]
 8006662:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800667c:	e015      	b.n	80066aa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800667e:	f7fc fa1d 	bl	8002abc <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d803      	bhi.n	8006696 <HAL_SPI_Transmit+0x270>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d102      	bne.n	800669c <HAL_SPI_Transmit+0x276>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80066a8:	e029      	b.n	80066fe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1b1      	bne.n	8006618 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 fb69 	bl	8006d90 <SPI_EndRxTxTransaction>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e003      	b.n	80066fe <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006706:	7ffb      	ldrb	r3, [r7, #31]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08a      	sub	sp, #40	; 0x28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800671e:	2301      	movs	r3, #1
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x26>
 8006732:	2302      	movs	r3, #2
 8006734:	e20a      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x43c>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800673e:	f7fc f9bd 	bl	8002abc <HAL_GetTick>
 8006742:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800674a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006752:	887b      	ldrh	r3, [r7, #2]
 8006754:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006756:	887b      	ldrh	r3, [r7, #2]
 8006758:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800675a:	7efb      	ldrb	r3, [r7, #27]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d00e      	beq.n	800677e <HAL_SPI_TransmitReceive+0x6e>
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006766:	d106      	bne.n	8006776 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <HAL_SPI_TransmitReceive+0x66>
 8006770:	7efb      	ldrb	r3, [r7, #27]
 8006772:	2b04      	cmp	r3, #4
 8006774:	d003      	beq.n	800677e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006776:	2302      	movs	r3, #2
 8006778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800677c:	e1e0      	b.n	8006b40 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <HAL_SPI_TransmitReceive+0x80>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <HAL_SPI_TransmitReceive+0x80>
 800678a:	887b      	ldrh	r3, [r7, #2]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006796:	e1d3      	b.n	8006b40 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d003      	beq.n	80067ac <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2205      	movs	r2, #5
 80067a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	887a      	ldrh	r2, [r7, #2]
 80067bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	887a      	ldrh	r2, [r7, #2]
 80067c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	887a      	ldrh	r2, [r7, #2]
 80067d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	887a      	ldrh	r2, [r7, #2]
 80067d8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067ee:	d802      	bhi.n	80067f6 <HAL_SPI_TransmitReceive+0xe6>
 80067f0:	8a3b      	ldrh	r3, [r7, #16]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d908      	bls.n	8006808 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	e007      	b.n	8006818 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006816:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	d007      	beq.n	8006836 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006834:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800683e:	f240 8081 	bls.w	8006944 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_SPI_TransmitReceive+0x140>
 800684a:	8a7b      	ldrh	r3, [r7, #18]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d16d      	bne.n	800692c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	881a      	ldrh	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	1c9a      	adds	r2, r3, #2
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006874:	e05a      	b.n	800692c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d11b      	bne.n	80068bc <HAL_SPI_TransmitReceive+0x1ac>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <HAL_SPI_TransmitReceive+0x1ac>
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	2b01      	cmp	r3, #1
 8006892:	d113      	bne.n	80068bc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	1c9a      	adds	r2, r3, #2
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d11c      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x1f4>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d016      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	b292      	uxth	r2, r2
 80068e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	1c9a      	adds	r2, r3, #2
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006900:	2301      	movs	r3, #1
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006904:	f7fc f8da 	bl	8002abc <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006910:	429a      	cmp	r2, r3
 8006912:	d80b      	bhi.n	800692c <HAL_SPI_TransmitReceive+0x21c>
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691a:	d007      	beq.n	800692c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800692a:	e109      	b.n	8006b40 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d19f      	bne.n	8006876 <HAL_SPI_TransmitReceive+0x166>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d199      	bne.n	8006876 <HAL_SPI_TransmitReceive+0x166>
 8006942:	e0e3      	b.n	8006b0c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_SPI_TransmitReceive+0x244>
 800694c:	8a7b      	ldrh	r3, [r7, #18]
 800694e:	2b01      	cmp	r3, #1
 8006950:	f040 80cf 	bne.w	8006af2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006958:	b29b      	uxth	r3, r3
 800695a:	2b01      	cmp	r3, #1
 800695c:	d912      	bls.n	8006984 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	1c9a      	adds	r2, r3, #2
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b02      	subs	r3, #2
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006982:	e0b6      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	330c      	adds	r3, #12
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069aa:	e0a2      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d134      	bne.n	8006a24 <HAL_SPI_TransmitReceive+0x314>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d02f      	beq.n	8006a24 <HAL_SPI_TransmitReceive+0x314>
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d12c      	bne.n	8006a24 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d912      	bls.n	80069fa <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	881a      	ldrh	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b02      	subs	r3, #2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069f8:	e012      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	7812      	ldrb	r2, [r2, #0]
 8006a06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d148      	bne.n	8006ac4 <HAL_SPI_TransmitReceive+0x3b4>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d042      	beq.n	8006ac4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d923      	bls.n	8006a92 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	b292      	uxth	r2, r2
 8006a56:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	1c9a      	adds	r2, r3, #2
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b02      	subs	r3, #2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d81f      	bhi.n	8006ac0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a8e:	605a      	str	r2, [r3, #4]
 8006a90:	e016      	b.n	8006ac0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f103 020c 	add.w	r2, r3, #12
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	7812      	ldrb	r2, [r2, #0]
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ac4:	f7fb fffa 	bl	8002abc <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d803      	bhi.n	8006adc <HAL_SPI_TransmitReceive+0x3cc>
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ada:	d102      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x3d2>
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d107      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006af0:	e026      	b.n	8006b40 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f47f af57 	bne.w	80069ac <HAL_SPI_TransmitReceive+0x29c>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f47f af50 	bne.w	80069ac <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f93d 	bl	8006d90 <SPI_EndRxTxTransaction>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b36:	e003      	b.n	8006b40 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3728      	adds	r7, #40	; 0x28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b64:	f7fb ffaa 	bl	8002abc <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	1a9b      	subs	r3, r3, r2
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	4413      	add	r3, r2
 8006b72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b74:	f7fb ffa2 	bl	8002abc <HAL_GetTick>
 8006b78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b7a:	4b39      	ldr	r3, [pc, #228]	; (8006c60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	015b      	lsls	r3, r3, #5
 8006b80:	0d1b      	lsrs	r3, r3, #20
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	fb02 f303 	mul.w	r3, r2, r3
 8006b88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b8a:	e054      	b.n	8006c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d050      	beq.n	8006c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b94:	f7fb ff92 	bl	8002abc <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d902      	bls.n	8006baa <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d13d      	bne.n	8006c26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bc2:	d111      	bne.n	8006be8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bcc:	d004      	beq.n	8006bd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd6:	d107      	bne.n	8006be8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf0:	d10f      	bne.n	8006c12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e017      	b.n	8006c56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	bf0c      	ite	eq
 8006c46:	2301      	moveq	r3, #1
 8006c48:	2300      	movne	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d19b      	bne.n	8006b8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3720      	adds	r7, #32
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000014 	.word	0x20000014

08006c64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	; 0x28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c76:	f7fb ff21 	bl	8002abc <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	1a9b      	subs	r3, r3, r2
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	4413      	add	r3, r2
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006c86:	f7fb ff19 	bl	8002abc <HAL_GetTick>
 8006c8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c94:	4b3d      	ldr	r3, [pc, #244]	; (8006d8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	00da      	lsls	r2, r3, #3
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	0d1b      	lsrs	r3, r3, #20
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006cac:	e060      	b.n	8006d70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cb4:	d107      	bne.n	8006cc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d050      	beq.n	8006d70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cce:	f7fb fef5 	bl	8002abc <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d902      	bls.n	8006ce4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d13d      	bne.n	8006d60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cfc:	d111      	bne.n	8006d22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d06:	d004      	beq.n	8006d12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d10:	d107      	bne.n	8006d22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d2a:	d10f      	bne.n	8006d4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e010      	b.n	8006d82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d196      	bne.n	8006cae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3728      	adds	r7, #40	; 0x28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000014 	.word	0x20000014

08006d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af02      	add	r7, sp, #8
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff ff5b 	bl	8006c64 <SPI_WaitFifoStateUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e027      	b.n	8006e14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2180      	movs	r1, #128	; 0x80
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7ff fec0 	bl	8006b54 <SPI_WaitFlagStateUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d007      	beq.n	8006dea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dde:	f043 0220 	orr.w	r2, r3, #32
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e014      	b.n	8006e14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7ff ff34 	bl	8006c64 <SPI_WaitFifoStateUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d007      	beq.n	8006e12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e06:	f043 0220 	orr.w	r2, r3, #32
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e000      	b.n	8006e14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e049      	b.n	8006ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fb fa2e 	bl	80022a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f001 f8c8 	bl	8007ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d001      	beq.n	8006ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e03b      	b.n	8006f5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_TIM_Base_Start_IT+0x9c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_TIM_Base_Start_IT+0x4e>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0e:	d004      	beq.n	8006f1a <HAL_TIM_Base_Start_IT+0x4e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <HAL_TIM_Base_Start_IT+0xa0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d115      	bne.n	8006f46 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <HAL_TIM_Base_Start_IT+0xa4>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b06      	cmp	r3, #6
 8006f2a:	d015      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x8c>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f32:	d011      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f44:	e008      	b.n	8006f58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0201 	orr.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e000      	b.n	8006f5a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	00010007 	.word	0x00010007

08006f74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0201 	bic.w	r2, r2, #1
 8006f8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a1a      	ldr	r2, [r3, #32]
 8006f92:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f96:	4013      	ands	r3, r2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10f      	bne.n	8006fbc <HAL_TIM_Base_Stop_IT+0x48>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a1a      	ldr	r2, [r3, #32]
 8006fa2:	f240 4344 	movw	r3, #1092	; 0x444
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <HAL_TIM_Base_Stop_IT+0x48>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e049      	b.n	8007078 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f841 	bl	8007080 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2202      	movs	r2, #2
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3304      	adds	r3, #4
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f000 ffed 	bl	8007ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <HAL_TIM_PWM_Start+0x24>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	bf14      	ite	ne
 80070b0:	2301      	movne	r3, #1
 80070b2:	2300      	moveq	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	e03c      	b.n	8007132 <HAL_TIM_PWM_Start+0x9e>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d109      	bne.n	80070d2 <HAL_TIM_PWM_Start+0x3e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	bf14      	ite	ne
 80070ca:	2301      	movne	r3, #1
 80070cc:	2300      	moveq	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	e02f      	b.n	8007132 <HAL_TIM_PWM_Start+0x9e>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d109      	bne.n	80070ec <HAL_TIM_PWM_Start+0x58>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	bf14      	ite	ne
 80070e4:	2301      	movne	r3, #1
 80070e6:	2300      	moveq	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	e022      	b.n	8007132 <HAL_TIM_PWM_Start+0x9e>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b0c      	cmp	r3, #12
 80070f0:	d109      	bne.n	8007106 <HAL_TIM_PWM_Start+0x72>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	bf14      	ite	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	2300      	moveq	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	e015      	b.n	8007132 <HAL_TIM_PWM_Start+0x9e>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b10      	cmp	r3, #16
 800710a:	d109      	bne.n	8007120 <HAL_TIM_PWM_Start+0x8c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	bf14      	ite	ne
 8007118:	2301      	movne	r3, #1
 800711a:	2300      	moveq	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	e008      	b.n	8007132 <HAL_TIM_PWM_Start+0x9e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	bf14      	ite	ne
 800712c:	2301      	movne	r3, #1
 800712e:	2300      	moveq	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e083      	b.n	8007242 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <HAL_TIM_PWM_Start+0xb6>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007148:	e023      	b.n	8007192 <HAL_TIM_PWM_Start+0xfe>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b04      	cmp	r3, #4
 800714e:	d104      	bne.n	800715a <HAL_TIM_PWM_Start+0xc6>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007158:	e01b      	b.n	8007192 <HAL_TIM_PWM_Start+0xfe>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b08      	cmp	r3, #8
 800715e:	d104      	bne.n	800716a <HAL_TIM_PWM_Start+0xd6>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007168:	e013      	b.n	8007192 <HAL_TIM_PWM_Start+0xfe>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b0c      	cmp	r3, #12
 800716e:	d104      	bne.n	800717a <HAL_TIM_PWM_Start+0xe6>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007178:	e00b      	b.n	8007192 <HAL_TIM_PWM_Start+0xfe>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b10      	cmp	r3, #16
 800717e:	d104      	bne.n	800718a <HAL_TIM_PWM_Start+0xf6>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007188:	e003      	b.n	8007192 <HAL_TIM_PWM_Start+0xfe>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2201      	movs	r2, #1
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f001 fa3c 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a29      	ldr	r2, [pc, #164]	; (800724c <HAL_TIM_PWM_Start+0x1b8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00e      	beq.n	80071c8 <HAL_TIM_PWM_Start+0x134>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a28      	ldr	r2, [pc, #160]	; (8007250 <HAL_TIM_PWM_Start+0x1bc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d009      	beq.n	80071c8 <HAL_TIM_PWM_Start+0x134>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a26      	ldr	r2, [pc, #152]	; (8007254 <HAL_TIM_PWM_Start+0x1c0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d004      	beq.n	80071c8 <HAL_TIM_PWM_Start+0x134>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a25      	ldr	r2, [pc, #148]	; (8007258 <HAL_TIM_PWM_Start+0x1c4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d101      	bne.n	80071cc <HAL_TIM_PWM_Start+0x138>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e000      	b.n	80071ce <HAL_TIM_PWM_Start+0x13a>
 80071cc:	2300      	movs	r3, #0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d007      	beq.n	80071e2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a19      	ldr	r2, [pc, #100]	; (800724c <HAL_TIM_PWM_Start+0x1b8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d009      	beq.n	8007200 <HAL_TIM_PWM_Start+0x16c>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f4:	d004      	beq.n	8007200 <HAL_TIM_PWM_Start+0x16c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a15      	ldr	r2, [pc, #84]	; (8007250 <HAL_TIM_PWM_Start+0x1bc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d115      	bne.n	800722c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <HAL_TIM_PWM_Start+0x1c8>)
 8007208:	4013      	ands	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b06      	cmp	r3, #6
 8007210:	d015      	beq.n	800723e <HAL_TIM_PWM_Start+0x1aa>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007218:	d011      	beq.n	800723e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0201 	orr.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722a:	e008      	b.n	800723e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	e000      	b.n	8007240 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40012c00 	.word	0x40012c00
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800
 800725c:	00010007 	.word	0x00010007

08007260 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f001 f9d0 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a3b      	ldr	r2, [pc, #236]	; (800736c <HAL_TIM_PWM_Stop+0x10c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00e      	beq.n	80072a0 <HAL_TIM_PWM_Stop+0x40>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a3a      	ldr	r2, [pc, #232]	; (8007370 <HAL_TIM_PWM_Stop+0x110>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d009      	beq.n	80072a0 <HAL_TIM_PWM_Stop+0x40>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a38      	ldr	r2, [pc, #224]	; (8007374 <HAL_TIM_PWM_Stop+0x114>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d004      	beq.n	80072a0 <HAL_TIM_PWM_Stop+0x40>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a37      	ldr	r2, [pc, #220]	; (8007378 <HAL_TIM_PWM_Stop+0x118>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d101      	bne.n	80072a4 <HAL_TIM_PWM_Stop+0x44>
 80072a0:	2301      	movs	r3, #1
 80072a2:	e000      	b.n	80072a6 <HAL_TIM_PWM_Stop+0x46>
 80072a4:	2300      	movs	r3, #0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d017      	beq.n	80072da <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6a1a      	ldr	r2, [r3, #32]
 80072b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10f      	bne.n	80072da <HAL_TIM_PWM_Stop+0x7a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6a1a      	ldr	r2, [r3, #32]
 80072c0:	f240 4344 	movw	r3, #1092	; 0x444
 80072c4:	4013      	ands	r3, r2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d107      	bne.n	80072da <HAL_TIM_PWM_Stop+0x7a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80072e4:	4013      	ands	r3, r2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10f      	bne.n	800730a <HAL_TIM_PWM_Stop+0xaa>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6a1a      	ldr	r2, [r3, #32]
 80072f0:	f240 4344 	movw	r3, #1092	; 0x444
 80072f4:	4013      	ands	r3, r2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d107      	bne.n	800730a <HAL_TIM_PWM_Stop+0xaa>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0201 	bic.w	r2, r2, #1
 8007308:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <HAL_TIM_PWM_Stop+0xba>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007318:	e023      	b.n	8007362 <HAL_TIM_PWM_Stop+0x102>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b04      	cmp	r3, #4
 800731e:	d104      	bne.n	800732a <HAL_TIM_PWM_Stop+0xca>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007328:	e01b      	b.n	8007362 <HAL_TIM_PWM_Stop+0x102>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b08      	cmp	r3, #8
 800732e:	d104      	bne.n	800733a <HAL_TIM_PWM_Stop+0xda>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007338:	e013      	b.n	8007362 <HAL_TIM_PWM_Stop+0x102>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b0c      	cmp	r3, #12
 800733e:	d104      	bne.n	800734a <HAL_TIM_PWM_Stop+0xea>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007348:	e00b      	b.n	8007362 <HAL_TIM_PWM_Stop+0x102>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b10      	cmp	r3, #16
 800734e:	d104      	bne.n	800735a <HAL_TIM_PWM_Stop+0xfa>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007358:	e003      	b.n	8007362 <HAL_TIM_PWM_Stop+0x102>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	40012c00 	.word	0x40012c00
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800

0800737c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	bf0c      	ite	eq
 80073a0:	2301      	moveq	r3, #1
 80073a2:	2300      	movne	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	e03c      	b.n	8007422 <HAL_TIM_PWM_Start_DMA+0xa6>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d109      	bne.n	80073c2 <HAL_TIM_PWM_Start_DMA+0x46>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	bf0c      	ite	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	2300      	movne	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e02f      	b.n	8007422 <HAL_TIM_PWM_Start_DMA+0xa6>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d109      	bne.n	80073dc <HAL_TIM_PWM_Start_DMA+0x60>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	bf0c      	ite	eq
 80073d4:	2301      	moveq	r3, #1
 80073d6:	2300      	movne	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	e022      	b.n	8007422 <HAL_TIM_PWM_Start_DMA+0xa6>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b0c      	cmp	r3, #12
 80073e0:	d109      	bne.n	80073f6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	bf0c      	ite	eq
 80073ee:	2301      	moveq	r3, #1
 80073f0:	2300      	movne	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	e015      	b.n	8007422 <HAL_TIM_PWM_Start_DMA+0xa6>
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d109      	bne.n	8007410 <HAL_TIM_PWM_Start_DMA+0x94>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	e008      	b.n	8007422 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	bf0c      	ite	eq
 800741c:	2301      	moveq	r3, #1
 800741e:	2300      	movne	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007426:	2302      	movs	r3, #2
 8007428:	e192      	b.n	8007750 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d109      	bne.n	8007444 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b01      	cmp	r3, #1
 800743a:	bf0c      	ite	eq
 800743c:	2301      	moveq	r3, #1
 800743e:	2300      	movne	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	e03c      	b.n	80074be <HAL_TIM_PWM_Start_DMA+0x142>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b04      	cmp	r3, #4
 8007448:	d109      	bne.n	800745e <HAL_TIM_PWM_Start_DMA+0xe2>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b01      	cmp	r3, #1
 8007454:	bf0c      	ite	eq
 8007456:	2301      	moveq	r3, #1
 8007458:	2300      	movne	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	e02f      	b.n	80074be <HAL_TIM_PWM_Start_DMA+0x142>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b08      	cmp	r3, #8
 8007462:	d109      	bne.n	8007478 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	bf0c      	ite	eq
 8007470:	2301      	moveq	r3, #1
 8007472:	2300      	movne	r3, #0
 8007474:	b2db      	uxtb	r3, r3
 8007476:	e022      	b.n	80074be <HAL_TIM_PWM_Start_DMA+0x142>
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b0c      	cmp	r3, #12
 800747c:	d109      	bne.n	8007492 <HAL_TIM_PWM_Start_DMA+0x116>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	bf0c      	ite	eq
 800748a:	2301      	moveq	r3, #1
 800748c:	2300      	movne	r3, #0
 800748e:	b2db      	uxtb	r3, r3
 8007490:	e015      	b.n	80074be <HAL_TIM_PWM_Start_DMA+0x142>
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b10      	cmp	r3, #16
 8007496:	d109      	bne.n	80074ac <HAL_TIM_PWM_Start_DMA+0x130>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	bf0c      	ite	eq
 80074a4:	2301      	moveq	r3, #1
 80074a6:	2300      	movne	r3, #0
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	e008      	b.n	80074be <HAL_TIM_PWM_Start_DMA+0x142>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	bf0c      	ite	eq
 80074b8:	2301      	moveq	r3, #1
 80074ba:	2300      	movne	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d034      	beq.n	800752c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_TIM_PWM_Start_DMA+0x152>
 80074c8:	887b      	ldrh	r3, [r7, #2]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e13e      	b.n	8007750 <HAL_TIM_PWM_Start_DMA+0x3d4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <HAL_TIM_PWM_Start_DMA+0x166>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e0:	e026      	b.n	8007530 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d104      	bne.n	80074f2 <HAL_TIM_PWM_Start_DMA+0x176>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074f0:	e01e      	b.n	8007530 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d104      	bne.n	8007502 <HAL_TIM_PWM_Start_DMA+0x186>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007500:	e016      	b.n	8007530 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b0c      	cmp	r3, #12
 8007506:	d104      	bne.n	8007512 <HAL_TIM_PWM_Start_DMA+0x196>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007510:	e00e      	b.n	8007530 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b10      	cmp	r3, #16
 8007516:	d104      	bne.n	8007522 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007520:	e006      	b.n	8007530 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2202      	movs	r2, #2
 8007526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800752a:	e001      	b.n	8007530 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e10f      	b.n	8007750 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }

  switch (Channel)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b0c      	cmp	r3, #12
 8007534:	f200 80ae 	bhi.w	8007694 <HAL_TIM_PWM_Start_DMA+0x318>
 8007538:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007575 	.word	0x08007575
 8007544:	08007695 	.word	0x08007695
 8007548:	08007695 	.word	0x08007695
 800754c:	08007695 	.word	0x08007695
 8007550:	080075bd 	.word	0x080075bd
 8007554:	08007695 	.word	0x08007695
 8007558:	08007695 	.word	0x08007695
 800755c:	08007695 	.word	0x08007695
 8007560:	08007605 	.word	0x08007605
 8007564:	08007695 	.word	0x08007695
 8007568:	08007695 	.word	0x08007695
 800756c:	08007695 	.word	0x08007695
 8007570:	0800764d 	.word	0x0800764d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	4a77      	ldr	r2, [pc, #476]	; (8007758 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800757a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	4a76      	ldr	r2, [pc, #472]	; (800775c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007582:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	4a75      	ldr	r2, [pc, #468]	; (8007760 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800758a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3334      	adds	r3, #52	; 0x34
 8007598:	461a      	mov	r2, r3
 800759a:	887b      	ldrh	r3, [r7, #2]
 800759c:	f7fc fb1e 	bl	8003bdc <HAL_DMA_Start_IT>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e0d2      	b.n	8007750 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b8:	60da      	str	r2, [r3, #12]
      break;
 80075ba:	e06e      	b.n	800769a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	4a65      	ldr	r2, [pc, #404]	; (8007758 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80075c2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c8:	4a64      	ldr	r2, [pc, #400]	; (800775c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	4a63      	ldr	r2, [pc, #396]	; (8007760 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80075d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3338      	adds	r3, #56	; 0x38
 80075e0:	461a      	mov	r2, r3
 80075e2:	887b      	ldrh	r3, [r7, #2]
 80075e4:	f7fc fafa 	bl	8003bdc <HAL_DMA_Start_IT>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e0ae      	b.n	8007750 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007600:	60da      	str	r2, [r3, #12]
      break;
 8007602:	e04a      	b.n	800769a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a53      	ldr	r2, [pc, #332]	; (8007758 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800760a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	4a52      	ldr	r2, [pc, #328]	; (800775c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007612:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	4a51      	ldr	r2, [pc, #324]	; (8007760 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800761a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	333c      	adds	r3, #60	; 0x3c
 8007628:	461a      	mov	r2, r3
 800762a:	887b      	ldrh	r3, [r7, #2]
 800762c:	f7fc fad6 	bl	8003bdc <HAL_DMA_Start_IT>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e08a      	b.n	8007750 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007648:	60da      	str	r2, [r3, #12]
      break;
 800764a:	e026      	b.n	800769a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	4a41      	ldr	r2, [pc, #260]	; (8007758 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007652:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	4a40      	ldr	r2, [pc, #256]	; (800775c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800765a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007660:	4a3f      	ldr	r2, [pc, #252]	; (8007760 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007662:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3340      	adds	r3, #64	; 0x40
 8007670:	461a      	mov	r2, r3
 8007672:	887b      	ldrh	r3, [r7, #2]
 8007674:	f7fc fab2 	bl	8003bdc <HAL_DMA_Start_IT>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e066      	b.n	8007750 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007690:	60da      	str	r2, [r3, #12]
      break;
 8007692:	e002      	b.n	800769a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	75fb      	strb	r3, [r7, #23]
      break;
 8007698:	bf00      	nop
  }

  if (status == HAL_OK)
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d156      	bne.n	800774e <HAL_TIM_PWM_Start_DMA+0x3d2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2201      	movs	r2, #1
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 ffb5 	bl	8008618 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a2c      	ldr	r2, [pc, #176]	; (8007764 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00e      	beq.n	80076d6 <HAL_TIM_PWM_Start_DMA+0x35a>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a2a      	ldr	r2, [pc, #168]	; (8007768 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d009      	beq.n	80076d6 <HAL_TIM_PWM_Start_DMA+0x35a>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a29      	ldr	r2, [pc, #164]	; (800776c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d004      	beq.n	80076d6 <HAL_TIM_PWM_Start_DMA+0x35a>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a27      	ldr	r2, [pc, #156]	; (8007770 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d101      	bne.n	80076da <HAL_TIM_PWM_Start_DMA+0x35e>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <HAL_TIM_PWM_Start_DMA+0x360>
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1b      	ldr	r2, [pc, #108]	; (8007764 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d009      	beq.n	800770e <HAL_TIM_PWM_Start_DMA+0x392>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007702:	d004      	beq.n	800770e <HAL_TIM_PWM_Start_DMA+0x392>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a17      	ldr	r2, [pc, #92]	; (8007768 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d115      	bne.n	800773a <HAL_TIM_PWM_Start_DMA+0x3be>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	4b17      	ldr	r3, [pc, #92]	; (8007774 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8007716:	4013      	ands	r3, r2
 8007718:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b06      	cmp	r3, #6
 800771e:	d015      	beq.n	800774c <HAL_TIM_PWM_Start_DMA+0x3d0>
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007726:	d011      	beq.n	800774c <HAL_TIM_PWM_Start_DMA+0x3d0>
      {
        __HAL_TIM_ENABLE(htim);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007738:	e008      	b.n	800774c <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0201 	orr.w	r2, r2, #1
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	e000      	b.n	800774e <HAL_TIM_PWM_Start_DMA+0x3d2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800774e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	08007edf 	.word	0x08007edf
 800775c:	08007f87 	.word	0x08007f87
 8007760:	08007e4d 	.word	0x08007e4d
 8007764:	40012c00 	.word	0x40012c00
 8007768:	40014000 	.word	0x40014000
 800776c:	40014400 	.word	0x40014400
 8007770:	40014800 	.word	0x40014800
 8007774:	00010007 	.word	0x00010007

08007778 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b0c      	cmp	r3, #12
 800778a:	d855      	bhi.n	8007838 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077c9 	.word	0x080077c9
 8007798:	08007839 	.word	0x08007839
 800779c:	08007839 	.word	0x08007839
 80077a0:	08007839 	.word	0x08007839
 80077a4:	080077e5 	.word	0x080077e5
 80077a8:	08007839 	.word	0x08007839
 80077ac:	08007839 	.word	0x08007839
 80077b0:	08007839 	.word	0x08007839
 80077b4:	08007801 	.word	0x08007801
 80077b8:	08007839 	.word	0x08007839
 80077bc:	08007839 	.word	0x08007839
 80077c0:	08007839 	.word	0x08007839
 80077c4:	0800781d 	.word	0x0800781d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fc fa5c 	bl	8003c9a <HAL_DMA_Abort_IT>
      break;
 80077e2:	e02c      	b.n	800783e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fc fa4e 	bl	8003c9a <HAL_DMA_Abort_IT>
      break;
 80077fe:	e01e      	b.n	800783e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800780e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	4618      	mov	r0, r3
 8007816:	f7fc fa40 	bl	8003c9a <HAL_DMA_Abort_IT>
      break;
 800781a:	e010      	b.n	800783e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800782a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007830:	4618      	mov	r0, r3
 8007832:	f7fc fa32 	bl	8003c9a <HAL_DMA_Abort_IT>
      break;
 8007836:	e002      	b.n	800783e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
      break;
 800783c:	bf00      	nop
  }

  if (status == HAL_OK)
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d17b      	bne.n	800793c <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2200      	movs	r2, #0
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fee3 	bl	8008618 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a3c      	ldr	r2, [pc, #240]	; (8007948 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00e      	beq.n	800787a <HAL_TIM_PWM_Stop_DMA+0x102>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a3a      	ldr	r2, [pc, #232]	; (800794c <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d009      	beq.n	800787a <HAL_TIM_PWM_Stop_DMA+0x102>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a39      	ldr	r2, [pc, #228]	; (8007950 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d004      	beq.n	800787a <HAL_TIM_PWM_Stop_DMA+0x102>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a37      	ldr	r2, [pc, #220]	; (8007954 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d101      	bne.n	800787e <HAL_TIM_PWM_Stop_DMA+0x106>
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <HAL_TIM_PWM_Stop_DMA+0x108>
 800787e:	2300      	movs	r3, #0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d017      	beq.n	80078b4 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	f241 1311 	movw	r3, #4369	; 0x1111
 800788e:	4013      	ands	r3, r2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10f      	bne.n	80078b4 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6a1a      	ldr	r2, [r3, #32]
 800789a:	f240 4344 	movw	r3, #1092	; 0x444
 800789e:	4013      	ands	r3, r2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d107      	bne.n	80078b4 <HAL_TIM_PWM_Stop_DMA+0x13c>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6a1a      	ldr	r2, [r3, #32]
 80078ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80078be:	4013      	ands	r3, r2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10f      	bne.n	80078e4 <HAL_TIM_PWM_Stop_DMA+0x16c>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6a1a      	ldr	r2, [r3, #32]
 80078ca:	f240 4344 	movw	r3, #1092	; 0x444
 80078ce:	4013      	ands	r3, r2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d107      	bne.n	80078e4 <HAL_TIM_PWM_Stop_DMA+0x16c>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0201 	bic.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078f2:	e023      	b.n	800793c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d104      	bne.n	8007904 <HAL_TIM_PWM_Stop_DMA+0x18c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007902:	e01b      	b.n	800793c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b08      	cmp	r3, #8
 8007908:	d104      	bne.n	8007914 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007912:	e013      	b.n	800793c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b0c      	cmp	r3, #12
 8007918:	d104      	bne.n	8007924 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007922:	e00b      	b.n	800793c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2b10      	cmp	r3, #16
 8007928:	d104      	bne.n	8007934 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007932:	e003      	b.n	800793c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40012c00 	.word	0x40012c00
 800794c:	40014000 	.word	0x40014000
 8007950:	40014400 	.word	0x40014400
 8007954:	40014800 	.word	0x40014800

08007958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b02      	cmp	r3, #2
 800796c:	d122      	bne.n	80079b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b02      	cmp	r3, #2
 800797a:	d11b      	bne.n	80079b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f06f 0202 	mvn.w	r2, #2
 8007984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa24 	bl	8007de8 <HAL_TIM_IC_CaptureCallback>
 80079a0:	e005      	b.n	80079ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa16 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fa27 	bl	8007dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d122      	bne.n	8007a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d11b      	bne.n	8007a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f06f 0204 	mvn.w	r2, #4
 80079d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2202      	movs	r2, #2
 80079de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f9fa 	bl	8007de8 <HAL_TIM_IC_CaptureCallback>
 80079f4:	e005      	b.n	8007a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f9ec 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9fd 	bl	8007dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f003 0308 	and.w	r3, r3, #8
 8007a12:	2b08      	cmp	r3, #8
 8007a14:	d122      	bne.n	8007a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d11b      	bne.n	8007a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f06f 0208 	mvn.w	r2, #8
 8007a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2204      	movs	r2, #4
 8007a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f9d0 	bl	8007de8 <HAL_TIM_IC_CaptureCallback>
 8007a48:	e005      	b.n	8007a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f9c2 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f9d3 	bl	8007dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f003 0310 	and.w	r3, r3, #16
 8007a66:	2b10      	cmp	r3, #16
 8007a68:	d122      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f003 0310 	and.w	r3, r3, #16
 8007a74:	2b10      	cmp	r3, #16
 8007a76:	d11b      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f06f 0210 	mvn.w	r2, #16
 8007a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2208      	movs	r2, #8
 8007a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f9a6 	bl	8007de8 <HAL_TIM_IC_CaptureCallback>
 8007a9c:	e005      	b.n	8007aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f998 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f9a9 	bl	8007dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d10e      	bne.n	8007adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d107      	bne.n	8007adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f06f 0201 	mvn.w	r2, #1
 8007ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f972 	bl	8007dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae6:	2b80      	cmp	r3, #128	; 0x80
 8007ae8:	d10e      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af4:	2b80      	cmp	r3, #128	; 0x80
 8007af6:	d107      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fe96 	bl	8008834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b16:	d10e      	bne.n	8007b36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b22:	2b80      	cmp	r3, #128	; 0x80
 8007b24:	d107      	bne.n	8007b36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fe89 	bl	8008848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d10e      	bne.n	8007b62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4e:	2b40      	cmp	r3, #64	; 0x40
 8007b50:	d107      	bne.n	8007b62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f961 	bl	8007e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d10e      	bne.n	8007b8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f003 0320 	and.w	r3, r3, #32
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d107      	bne.n	8007b8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f06f 0220 	mvn.w	r2, #32
 8007b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fe49 	bl	8008820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d101      	bne.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e0ff      	b.n	8007db6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b14      	cmp	r3, #20
 8007bc2:	f200 80f0 	bhi.w	8007da6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007c21 	.word	0x08007c21
 8007bd0:	08007da7 	.word	0x08007da7
 8007bd4:	08007da7 	.word	0x08007da7
 8007bd8:	08007da7 	.word	0x08007da7
 8007bdc:	08007c61 	.word	0x08007c61
 8007be0:	08007da7 	.word	0x08007da7
 8007be4:	08007da7 	.word	0x08007da7
 8007be8:	08007da7 	.word	0x08007da7
 8007bec:	08007ca3 	.word	0x08007ca3
 8007bf0:	08007da7 	.word	0x08007da7
 8007bf4:	08007da7 	.word	0x08007da7
 8007bf8:	08007da7 	.word	0x08007da7
 8007bfc:	08007ce3 	.word	0x08007ce3
 8007c00:	08007da7 	.word	0x08007da7
 8007c04:	08007da7 	.word	0x08007da7
 8007c08:	08007da7 	.word	0x08007da7
 8007c0c:	08007d25 	.word	0x08007d25
 8007c10:	08007da7 	.word	0x08007da7
 8007c14:	08007da7 	.word	0x08007da7
 8007c18:	08007da7 	.word	0x08007da7
 8007c1c:	08007d65 	.word	0x08007d65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fa50 	bl	80080cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0208 	orr.w	r2, r2, #8
 8007c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0204 	bic.w	r2, r2, #4
 8007c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6999      	ldr	r1, [r3, #24]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	691a      	ldr	r2, [r3, #16]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	619a      	str	r2, [r3, #24]
      break;
 8007c5e:	e0a5      	b.n	8007dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fab6 	bl	80081d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699a      	ldr	r2, [r3, #24]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6999      	ldr	r1, [r3, #24]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	021a      	lsls	r2, r3, #8
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	619a      	str	r2, [r3, #24]
      break;
 8007ca0:	e084      	b.n	8007dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68b9      	ldr	r1, [r7, #8]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fb15 	bl	80082d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f042 0208 	orr.w	r2, r2, #8
 8007cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0204 	bic.w	r2, r2, #4
 8007ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69d9      	ldr	r1, [r3, #28]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	61da      	str	r2, [r3, #28]
      break;
 8007ce0:	e064      	b.n	8007dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fb73 	bl	80083d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69da      	ldr	r2, [r3, #28]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69da      	ldr	r2, [r3, #28]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69d9      	ldr	r1, [r3, #28]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	021a      	lsls	r2, r3, #8
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	61da      	str	r2, [r3, #28]
      break;
 8007d22:	e043      	b.n	8007dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fbb6 	bl	800849c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0208 	orr.w	r2, r2, #8
 8007d3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0204 	bic.w	r2, r2, #4
 8007d4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d62:	e023      	b.n	8007dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fbf4 	bl	8008558 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	021a      	lsls	r2, r3, #8
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007da4:	e002      	b.n	8007dac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	75fb      	strb	r3, [r7, #23]
      break;
 8007daa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop

08007dc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d107      	bne.n	8007e74 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e72:	e02a      	b.n	8007eca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d107      	bne.n	8007e8e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2202      	movs	r2, #2
 8007e82:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e8c:	e01d      	b.n	8007eca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d107      	bne.n	8007ea8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ea6:	e010      	b.n	8007eca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d107      	bne.n	8007ec2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ec0:	e003      	b.n	8007eca <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff ffb4 	bl	8007e38 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	771a      	strb	r2, [r3, #28]
}
 8007ed6:	bf00      	nop
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d10b      	bne.n	8007f0e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d136      	bne.n	8007f72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f0c:	e031      	b.n	8007f72 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d10b      	bne.n	8007f30 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d125      	bne.n	8007f72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f2e:	e020      	b.n	8007f72 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d10b      	bne.n	8007f52 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2204      	movs	r2, #4
 8007f3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d114      	bne.n	8007f72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f50:	e00f      	b.n	8007f72 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d10a      	bne.n	8007f72 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2208      	movs	r2, #8
 8007f60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7ff ff42 	bl	8007dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	771a      	strb	r2, [r3, #28]
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d103      	bne.n	8007fa6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	771a      	strb	r2, [r3, #28]
 8007fa4:	e019      	b.n	8007fda <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d103      	bne.n	8007fb8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	771a      	strb	r2, [r3, #28]
 8007fb6:	e010      	b.n	8007fda <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d103      	bne.n	8007fca <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	771a      	strb	r2, [r3, #28]
 8007fc8:	e007      	b.n	8007fda <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d102      	bne.n	8007fda <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff ff18 	bl	8007e10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	771a      	strb	r2, [r3, #28]
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a2e      	ldr	r2, [pc, #184]	; (80080bc <TIM_Base_SetConfig+0xcc>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_Base_SetConfig+0x20>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800e:	d108      	bne.n	8008022 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a25      	ldr	r2, [pc, #148]	; (80080bc <TIM_Base_SetConfig+0xcc>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00f      	beq.n	800804a <TIM_Base_SetConfig+0x5a>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008030:	d00b      	beq.n	800804a <TIM_Base_SetConfig+0x5a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a22      	ldr	r2, [pc, #136]	; (80080c0 <TIM_Base_SetConfig+0xd0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d007      	beq.n	800804a <TIM_Base_SetConfig+0x5a>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a21      	ldr	r2, [pc, #132]	; (80080c4 <TIM_Base_SetConfig+0xd4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d003      	beq.n	800804a <TIM_Base_SetConfig+0x5a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a20      	ldr	r2, [pc, #128]	; (80080c8 <TIM_Base_SetConfig+0xd8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d108      	bne.n	800805c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a0e      	ldr	r2, [pc, #56]	; (80080bc <TIM_Base_SetConfig+0xcc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00b      	beq.n	80080a0 <TIM_Base_SetConfig+0xb0>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a0d      	ldr	r2, [pc, #52]	; (80080c0 <TIM_Base_SetConfig+0xd0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d007      	beq.n	80080a0 <TIM_Base_SetConfig+0xb0>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a0c      	ldr	r2, [pc, #48]	; (80080c4 <TIM_Base_SetConfig+0xd4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d003      	beq.n	80080a0 <TIM_Base_SetConfig+0xb0>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a0b      	ldr	r2, [pc, #44]	; (80080c8 <TIM_Base_SetConfig+0xd8>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d103      	bne.n	80080a8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	691a      	ldr	r2, [r3, #16]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	615a      	str	r2, [r3, #20]
}
 80080ae:	bf00      	nop
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	40012c00 	.word	0x40012c00
 80080c0:	40014000 	.word	0x40014000
 80080c4:	40014400 	.word	0x40014400
 80080c8:	40014800 	.word	0x40014800

080080cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	f023 0201 	bic.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0303 	bic.w	r3, r3, #3
 8008106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f023 0302 	bic.w	r3, r3, #2
 8008118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a28      	ldr	r2, [pc, #160]	; (80081c8 <TIM_OC1_SetConfig+0xfc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00b      	beq.n	8008144 <TIM_OC1_SetConfig+0x78>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a27      	ldr	r2, [pc, #156]	; (80081cc <TIM_OC1_SetConfig+0x100>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d007      	beq.n	8008144 <TIM_OC1_SetConfig+0x78>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a26      	ldr	r2, [pc, #152]	; (80081d0 <TIM_OC1_SetConfig+0x104>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d003      	beq.n	8008144 <TIM_OC1_SetConfig+0x78>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a25      	ldr	r2, [pc, #148]	; (80081d4 <TIM_OC1_SetConfig+0x108>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d10c      	bne.n	800815e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f023 0308 	bic.w	r3, r3, #8
 800814a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f023 0304 	bic.w	r3, r3, #4
 800815c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a19      	ldr	r2, [pc, #100]	; (80081c8 <TIM_OC1_SetConfig+0xfc>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00b      	beq.n	800817e <TIM_OC1_SetConfig+0xb2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a18      	ldr	r2, [pc, #96]	; (80081cc <TIM_OC1_SetConfig+0x100>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d007      	beq.n	800817e <TIM_OC1_SetConfig+0xb2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a17      	ldr	r2, [pc, #92]	; (80081d0 <TIM_OC1_SetConfig+0x104>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d003      	beq.n	800817e <TIM_OC1_SetConfig+0xb2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a16      	ldr	r2, [pc, #88]	; (80081d4 <TIM_OC1_SetConfig+0x108>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d111      	bne.n	80081a2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800818c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	4313      	orrs	r3, r2
 8008196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	621a      	str	r2, [r3, #32]
}
 80081bc:	bf00      	nop
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	40012c00 	.word	0x40012c00
 80081cc:	40014000 	.word	0x40014000
 80081d0:	40014400 	.word	0x40014400
 80081d4:	40014800 	.word	0x40014800

080081d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	f023 0210 	bic.w	r2, r3, #16
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	021b      	lsls	r3, r3, #8
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f023 0320 	bic.w	r3, r3, #32
 8008226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a24      	ldr	r2, [pc, #144]	; (80082c8 <TIM_OC2_SetConfig+0xf0>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d10d      	bne.n	8008258 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	011b      	lsls	r3, r3, #4
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a1b      	ldr	r2, [pc, #108]	; (80082c8 <TIM_OC2_SetConfig+0xf0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00b      	beq.n	8008278 <TIM_OC2_SetConfig+0xa0>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a1a      	ldr	r2, [pc, #104]	; (80082cc <TIM_OC2_SetConfig+0xf4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d007      	beq.n	8008278 <TIM_OC2_SetConfig+0xa0>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a19      	ldr	r2, [pc, #100]	; (80082d0 <TIM_OC2_SetConfig+0xf8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d003      	beq.n	8008278 <TIM_OC2_SetConfig+0xa0>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a18      	ldr	r2, [pc, #96]	; (80082d4 <TIM_OC2_SetConfig+0xfc>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d113      	bne.n	80082a0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800827e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008286:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	621a      	str	r2, [r3, #32]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40012c00 	.word	0x40012c00
 80082cc:	40014000 	.word	0x40014000
 80082d0:	40014400 	.word	0x40014400
 80082d4:	40014800 	.word	0x40014800

080082d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 0303 	bic.w	r3, r3, #3
 8008312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	021b      	lsls	r3, r3, #8
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	4313      	orrs	r3, r2
 8008330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a23      	ldr	r2, [pc, #140]	; (80083c4 <TIM_OC3_SetConfig+0xec>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d10d      	bne.n	8008356 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	021b      	lsls	r3, r3, #8
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	4313      	orrs	r3, r2
 800834c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008354:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a1a      	ldr	r2, [pc, #104]	; (80083c4 <TIM_OC3_SetConfig+0xec>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00b      	beq.n	8008376 <TIM_OC3_SetConfig+0x9e>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a19      	ldr	r2, [pc, #100]	; (80083c8 <TIM_OC3_SetConfig+0xf0>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d007      	beq.n	8008376 <TIM_OC3_SetConfig+0x9e>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a18      	ldr	r2, [pc, #96]	; (80083cc <TIM_OC3_SetConfig+0xf4>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d003      	beq.n	8008376 <TIM_OC3_SetConfig+0x9e>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a17      	ldr	r2, [pc, #92]	; (80083d0 <TIM_OC3_SetConfig+0xf8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d113      	bne.n	800839e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800837c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	4313      	orrs	r3, r2
 800839c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	621a      	str	r2, [r3, #32]
}
 80083b8:	bf00      	nop
 80083ba:	371c      	adds	r7, #28
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	40012c00 	.word	0x40012c00
 80083c8:	40014000 	.word	0x40014000
 80083cc:	40014400 	.word	0x40014400
 80083d0:	40014800 	.word	0x40014800

080083d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800840e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	021b      	lsls	r3, r3, #8
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	031b      	lsls	r3, r3, #12
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a16      	ldr	r2, [pc, #88]	; (800848c <TIM_OC4_SetConfig+0xb8>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00b      	beq.n	8008450 <TIM_OC4_SetConfig+0x7c>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a15      	ldr	r2, [pc, #84]	; (8008490 <TIM_OC4_SetConfig+0xbc>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d007      	beq.n	8008450 <TIM_OC4_SetConfig+0x7c>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a14      	ldr	r2, [pc, #80]	; (8008494 <TIM_OC4_SetConfig+0xc0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d003      	beq.n	8008450 <TIM_OC4_SetConfig+0x7c>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a13      	ldr	r2, [pc, #76]	; (8008498 <TIM_OC4_SetConfig+0xc4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d109      	bne.n	8008464 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	019b      	lsls	r3, r3, #6
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	4313      	orrs	r3, r2
 8008462:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	621a      	str	r2, [r3, #32]
}
 800847e:	bf00      	nop
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	40012c00 	.word	0x40012c00
 8008490:	40014000 	.word	0x40014000
 8008494:	40014400 	.word	0x40014400
 8008498:	40014800 	.word	0x40014800

0800849c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a15      	ldr	r2, [pc, #84]	; (8008548 <TIM_OC5_SetConfig+0xac>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00b      	beq.n	800850e <TIM_OC5_SetConfig+0x72>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a14      	ldr	r2, [pc, #80]	; (800854c <TIM_OC5_SetConfig+0xb0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d007      	beq.n	800850e <TIM_OC5_SetConfig+0x72>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a13      	ldr	r2, [pc, #76]	; (8008550 <TIM_OC5_SetConfig+0xb4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_OC5_SetConfig+0x72>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a12      	ldr	r2, [pc, #72]	; (8008554 <TIM_OC5_SetConfig+0xb8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d109      	bne.n	8008522 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008514:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	021b      	lsls	r3, r3, #8
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	4313      	orrs	r3, r2
 8008520:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	621a      	str	r2, [r3, #32]
}
 800853c:	bf00      	nop
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	40012c00 	.word	0x40012c00
 800854c:	40014000 	.word	0x40014000
 8008550:	40014400 	.word	0x40014400
 8008554:	40014800 	.word	0x40014800

08008558 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800858a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	021b      	lsls	r3, r3, #8
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800859e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	051b      	lsls	r3, r3, #20
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a16      	ldr	r2, [pc, #88]	; (8008608 <TIM_OC6_SetConfig+0xb0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00b      	beq.n	80085cc <TIM_OC6_SetConfig+0x74>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a15      	ldr	r2, [pc, #84]	; (800860c <TIM_OC6_SetConfig+0xb4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d007      	beq.n	80085cc <TIM_OC6_SetConfig+0x74>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a14      	ldr	r2, [pc, #80]	; (8008610 <TIM_OC6_SetConfig+0xb8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d003      	beq.n	80085cc <TIM_OC6_SetConfig+0x74>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a13      	ldr	r2, [pc, #76]	; (8008614 <TIM_OC6_SetConfig+0xbc>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d109      	bne.n	80085e0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	029b      	lsls	r3, r3, #10
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	4313      	orrs	r3, r2
 80085de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	40012c00 	.word	0x40012c00
 800860c:	40014000 	.word	0x40014000
 8008610:	40014400 	.word	0x40014400
 8008614:	40014800 	.word	0x40014800

08008618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 031f 	and.w	r3, r3, #31
 800862a:	2201      	movs	r2, #1
 800862c:	fa02 f303 	lsl.w	r3, r2, r3
 8008630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a1a      	ldr	r2, [r3, #32]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	43db      	mvns	r3, r3
 800863a:	401a      	ands	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a1a      	ldr	r2, [r3, #32]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f003 031f 	and.w	r3, r3, #31
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	fa01 f303 	lsl.w	r3, r1, r3
 8008650:	431a      	orrs	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
	...

08008664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008678:	2302      	movs	r3, #2
 800867a:	e04f      	b.n	800871c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a21      	ldr	r2, [pc, #132]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d108      	bne.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a14      	ldr	r2, [pc, #80]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d009      	beq.n	80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e4:	d004      	beq.n	80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a10      	ldr	r2, [pc, #64]	; (800872c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d10c      	bne.n	800870a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	40012c00 	.word	0x40012c00
 800872c:	40014000 	.word	0x40014000

08008730 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008748:	2302      	movs	r3, #2
 800874a:	e060      	b.n	800880e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	041b      	lsls	r3, r3, #16
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a14      	ldr	r2, [pc, #80]	; (800881c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d115      	bne.n	80087fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	051b      	lsls	r3, r3, #20
 80087dc:	4313      	orrs	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	40012c00 	.word	0x40012c00

08008820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e040      	b.n	80088f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7f9 fdc0 	bl	8002404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2224      	movs	r2, #36	; 0x24
 8008888:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0201 	bic.w	r2, r2, #1
 8008898:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f8b6 	bl	8008a0c <UART_SetConfig>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d101      	bne.n	80088aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e022      	b.n	80088f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f9e0 	bl	8008c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0201 	orr.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fa67 	bl	8008dbc <UART_CheckIdleState>
 80088ee:	4603      	mov	r3, r0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08a      	sub	sp, #40	; 0x28
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	603b      	str	r3, [r7, #0]
 8008904:	4613      	mov	r3, r2
 8008906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800890c:	2b20      	cmp	r3, #32
 800890e:	d178      	bne.n	8008a02 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_UART_Transmit+0x24>
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e071      	b.n	8008a04 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2221      	movs	r2, #33	; 0x21
 800892c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800892e:	f7fa f8c5 	bl	8002abc <HAL_GetTick>
 8008932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	88fa      	ldrh	r2, [r7, #6]
 8008938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	88fa      	ldrh	r2, [r7, #6]
 8008940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800894c:	d108      	bne.n	8008960 <HAL_UART_Transmit+0x68>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008956:	2300      	movs	r3, #0
 8008958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	61bb      	str	r3, [r7, #24]
 800895e:	e003      	b.n	8008968 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008968:	e030      	b.n	80089cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	2180      	movs	r1, #128	; 0x80
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 fac9 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2220      	movs	r2, #32
 8008984:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e03c      	b.n	8008a04 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	881a      	ldrh	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800899c:	b292      	uxth	r2, r2
 800899e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	3302      	adds	r3, #2
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	e008      	b.n	80089ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	781a      	ldrb	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	b292      	uxth	r2, r2
 80089b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	3301      	adds	r3, #1
 80089b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1c8      	bne.n	800896a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2200      	movs	r2, #0
 80089e0:	2140      	movs	r1, #64	; 0x40
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 fa92 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d004      	beq.n	80089f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e005      	b.n	8008a04 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	e000      	b.n	8008a04 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008a02:	2302      	movs	r3, #2
  }
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3720      	adds	r7, #32
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	4b8a      	ldr	r3, [pc, #552]	; (8008c60 <UART_SetConfig+0x254>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	6979      	ldr	r1, [r7, #20]
 8008a40:	430b      	orrs	r3, r1
 8008a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a78      	ldr	r2, [pc, #480]	; (8008c64 <UART_SetConfig+0x258>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d120      	bne.n	8008aca <UART_SetConfig+0xbe>
 8008a88:	4b77      	ldr	r3, [pc, #476]	; (8008c68 <UART_SetConfig+0x25c>)
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8c:	f003 0303 	and.w	r3, r3, #3
 8008a90:	2b03      	cmp	r3, #3
 8008a92:	d817      	bhi.n	8008ac4 <UART_SetConfig+0xb8>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <UART_SetConfig+0x90>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008aad 	.word	0x08008aad
 8008aa0:	08008ab9 	.word	0x08008ab9
 8008aa4:	08008abf 	.word	0x08008abf
 8008aa8:	08008ab3 	.word	0x08008ab3
 8008aac:	2300      	movs	r3, #0
 8008aae:	77fb      	strb	r3, [r7, #31]
 8008ab0:	e01d      	b.n	8008aee <UART_SetConfig+0xe2>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	77fb      	strb	r3, [r7, #31]
 8008ab6:	e01a      	b.n	8008aee <UART_SetConfig+0xe2>
 8008ab8:	2304      	movs	r3, #4
 8008aba:	77fb      	strb	r3, [r7, #31]
 8008abc:	e017      	b.n	8008aee <UART_SetConfig+0xe2>
 8008abe:	2308      	movs	r3, #8
 8008ac0:	77fb      	strb	r3, [r7, #31]
 8008ac2:	e014      	b.n	8008aee <UART_SetConfig+0xe2>
 8008ac4:	2310      	movs	r3, #16
 8008ac6:	77fb      	strb	r3, [r7, #31]
 8008ac8:	e011      	b.n	8008aee <UART_SetConfig+0xe2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a67      	ldr	r2, [pc, #412]	; (8008c6c <UART_SetConfig+0x260>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d102      	bne.n	8008ada <UART_SetConfig+0xce>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	77fb      	strb	r3, [r7, #31]
 8008ad8:	e009      	b.n	8008aee <UART_SetConfig+0xe2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a64      	ldr	r2, [pc, #400]	; (8008c70 <UART_SetConfig+0x264>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d102      	bne.n	8008aea <UART_SetConfig+0xde>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	77fb      	strb	r3, [r7, #31]
 8008ae8:	e001      	b.n	8008aee <UART_SetConfig+0xe2>
 8008aea:	2310      	movs	r3, #16
 8008aec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af6:	d15a      	bne.n	8008bae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8008af8:	7ffb      	ldrb	r3, [r7, #31]
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d827      	bhi.n	8008b4e <UART_SetConfig+0x142>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0xf8>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b31 	.word	0x08008b31
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	08008b4f 	.word	0x08008b4f
 8008b14:	08008b3f 	.word	0x08008b3f
 8008b18:	08008b4f 	.word	0x08008b4f
 8008b1c:	08008b4f 	.word	0x08008b4f
 8008b20:	08008b4f 	.word	0x08008b4f
 8008b24:	08008b47 	.word	0x08008b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b28:	f7fd f9fc 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 8008b2c:	61b8      	str	r0, [r7, #24]
        break;
 8008b2e:	e013      	b.n	8008b58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b30:	f7fd fa1a 	bl	8005f68 <HAL_RCC_GetPCLK2Freq>
 8008b34:	61b8      	str	r0, [r7, #24]
        break;
 8008b36:	e00f      	b.n	8008b58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b38:	4b4e      	ldr	r3, [pc, #312]	; (8008c74 <UART_SetConfig+0x268>)
 8008b3a:	61bb      	str	r3, [r7, #24]
        break;
 8008b3c:	e00c      	b.n	8008b58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b3e:	f7fd f97b 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8008b42:	61b8      	str	r0, [r7, #24]
        break;
 8008b44:	e008      	b.n	8008b58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4a:	61bb      	str	r3, [r7, #24]
        break;
 8008b4c:	e004      	b.n	8008b58 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	77bb      	strb	r3, [r7, #30]
        break;
 8008b56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d074      	beq.n	8008c48 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	005a      	lsls	r2, r3, #1
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	085b      	lsrs	r3, r3, #1
 8008b68:	441a      	add	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	2b0f      	cmp	r3, #15
 8008b78:	d916      	bls.n	8008ba8 <UART_SetConfig+0x19c>
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b80:	d212      	bcs.n	8008ba8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	f023 030f 	bic.w	r3, r3, #15
 8008b8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	085b      	lsrs	r3, r3, #1
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	89fb      	ldrh	r3, [r7, #14]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	89fa      	ldrh	r2, [r7, #14]
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	e04f      	b.n	8008c48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	77bb      	strb	r3, [r7, #30]
 8008bac:	e04c      	b.n	8008c48 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bae:	7ffb      	ldrb	r3, [r7, #31]
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d828      	bhi.n	8008c06 <UART_SetConfig+0x1fa>
 8008bb4:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <UART_SetConfig+0x1b0>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008be1 	.word	0x08008be1
 8008bc0:	08008be9 	.word	0x08008be9
 8008bc4:	08008bf1 	.word	0x08008bf1
 8008bc8:	08008c07 	.word	0x08008c07
 8008bcc:	08008bf7 	.word	0x08008bf7
 8008bd0:	08008c07 	.word	0x08008c07
 8008bd4:	08008c07 	.word	0x08008c07
 8008bd8:	08008c07 	.word	0x08008c07
 8008bdc:	08008bff 	.word	0x08008bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008be0:	f7fd f9a0 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 8008be4:	61b8      	str	r0, [r7, #24]
        break;
 8008be6:	e013      	b.n	8008c10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008be8:	f7fd f9be 	bl	8005f68 <HAL_RCC_GetPCLK2Freq>
 8008bec:	61b8      	str	r0, [r7, #24]
        break;
 8008bee:	e00f      	b.n	8008c10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf0:	4b20      	ldr	r3, [pc, #128]	; (8008c74 <UART_SetConfig+0x268>)
 8008bf2:	61bb      	str	r3, [r7, #24]
        break;
 8008bf4:	e00c      	b.n	8008c10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bf6:	f7fd f91f 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8008bfa:	61b8      	str	r0, [r7, #24]
        break;
 8008bfc:	e008      	b.n	8008c10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c02:	61bb      	str	r3, [r7, #24]
        break;
 8008c04:	e004      	b.n	8008c10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8008c0e:	bf00      	nop
    }

    if (pclk != 0U)
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d018      	beq.n	8008c48 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	085a      	lsrs	r2, r3, #1
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	441a      	add	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2b0f      	cmp	r3, #15
 8008c2e:	d909      	bls.n	8008c44 <UART_SetConfig+0x238>
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c36:	d205      	bcs.n	8008c44 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60da      	str	r2, [r3, #12]
 8008c42:	e001      	b.n	8008c48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008c54:	7fbb      	ldrb	r3, [r7, #30]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3720      	adds	r7, #32
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	efff69f3 	.word	0xefff69f3
 8008c64:	40013800 	.word	0x40013800
 8008c68:	40021000 	.word	0x40021000
 8008c6c:	40004400 	.word	0x40004400
 8008c70:	40004800 	.word	0x40004800
 8008c74:	007a1200 	.word	0x007a1200

08008c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00a      	beq.n	8008ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00a      	beq.n	8008ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	f003 0308 	and.w	r3, r3, #8
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	f003 0310 	and.w	r3, r3, #16
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00a      	beq.n	8008d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01a      	beq.n	8008d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d76:	d10a      	bne.n	8008d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	605a      	str	r2, [r3, #4]
  }
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b098      	sub	sp, #96	; 0x60
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dcc:	f7f9 fe76 	bl	8002abc <HAL_GetTick>
 8008dd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d12e      	bne.n	8008e3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008de8:	2200      	movs	r2, #0
 8008dea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f88c 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d021      	beq.n	8008e3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	e853 3f00 	ldrex	r3, [r3]
 8008e06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e18:	647b      	str	r3, [r7, #68]	; 0x44
 8008e1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e20:	e841 2300 	strex	r3, r2, [r1]
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e6      	bne.n	8008dfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e062      	b.n	8008f04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d149      	bne.n	8008ee0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e54:	2200      	movs	r2, #0
 8008e56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f856 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d03c      	beq.n	8008ee0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	623b      	str	r3, [r7, #32]
   return(result);
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e84:	633b      	str	r3, [r7, #48]	; 0x30
 8008e86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e6      	bne.n	8008e66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0301 	bic.w	r3, r3, #1
 8008eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eb8:	61fa      	str	r2, [r7, #28]
 8008eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	69b9      	ldr	r1, [r7, #24]
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e5      	bne.n	8008e98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e011      	b.n	8008f04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3758      	adds	r7, #88	; 0x58
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1c:	e049      	b.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f24:	d045      	beq.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f26:	f7f9 fdc9 	bl	8002abc <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d302      	bcc.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e048      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d031      	beq.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	f003 0308 	and.w	r3, r3, #8
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d110      	bne.n	8008f7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2208      	movs	r2, #8
 8008f62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f838 	bl	8008fda <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2208      	movs	r2, #8
 8008f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e029      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f8c:	d111      	bne.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 f81e 	bl	8008fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e00f      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69da      	ldr	r2, [r3, #28]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	bf0c      	ite	eq
 8008fc2:	2301      	moveq	r3, #1
 8008fc4:	2300      	movne	r3, #0
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d0a6      	beq.n	8008f1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b095      	sub	sp, #84	; 0x54
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fea:	e853 3f00 	ldrex	r3, [r3]
 8008fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009000:	643b      	str	r3, [r7, #64]	; 0x40
 8009002:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e6      	bne.n	8008fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	61fb      	str	r3, [r7, #28]
   return(result);
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	f023 0301 	bic.w	r3, r3, #1
 800902a:	64bb      	str	r3, [r7, #72]	; 0x48
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009034:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800903a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e5      	bne.n	8009014 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800904c:	2b01      	cmp	r3, #1
 800904e:	d118      	bne.n	8009082 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	60bb      	str	r3, [r7, #8]
   return(result);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f023 0310 	bic.w	r3, r3, #16
 8009064:	647b      	str	r3, [r7, #68]	; 0x44
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	461a      	mov	r2, r3
 800906c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800906e:	61bb      	str	r3, [r7, #24]
 8009070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	6979      	ldr	r1, [r7, #20]
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	613b      	str	r3, [r7, #16]
   return(result);
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e6      	bne.n	8009050 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009096:	bf00      	nop
 8009098:	3754      	adds	r7, #84	; 0x54
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80090a8:	4904      	ldr	r1, [pc, #16]	; (80090bc <MX_FATFS_Init+0x18>)
 80090aa:	4805      	ldr	r0, [pc, #20]	; (80090c0 <MX_FATFS_Init+0x1c>)
 80090ac:	f004 fb6c 	bl	800d788 <FATFS_LinkDriver>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <MX_FATFS_Init+0x20>)
 80090b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80090b8:	bf00      	nop
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20003648 	.word	0x20003648
 80090c0:	20000020 	.word	0x20000020
 80090c4:	20003644 	.word	0x20003644

080090c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80090c8:	b480      	push	{r7}
 80090ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7f7 fa7f 	bl	80005e8 <SD_disk_initialize>
 80090ea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	4618      	mov	r0, r3
 8009102:	f7f7 fb57 	bl	80007b4 <SD_disk_status>
 8009106:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60b9      	str	r1, [r7, #8]
 8009118:	607a      	str	r2, [r7, #4]
 800911a:	603b      	str	r3, [r7, #0]
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8009120:	7bf8      	ldrb	r0, [r7, #15]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	f7f7 fb5a 	bl	80007e0 <SD_disk_read>
 800912c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	603b      	str	r3, [r7, #0]
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8009146:	7bf8      	ldrb	r0, [r7, #15]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	68b9      	ldr	r1, [r7, #8]
 800914e:	f7f7 fbb1 	bl	80008b4 <SD_disk_write>
 8009152:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	603a      	str	r2, [r7, #0]
 8009166:	71fb      	strb	r3, [r7, #7]
 8009168:	460b      	mov	r3, r1
 800916a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800916c:	79b9      	ldrb	r1, [r7, #6]
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f7f7 fc22 	bl	80009bc <SD_disk_ioctl>
 8009178:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	4a08      	ldr	r2, [pc, #32]	; (80091b4 <disk_status+0x30>)
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	79fa      	ldrb	r2, [r7, #7]
 800919c:	4905      	ldr	r1, [pc, #20]	; (80091b4 <disk_status+0x30>)
 800919e:	440a      	add	r2, r1
 80091a0:	7a12      	ldrb	r2, [r2, #8]
 80091a2:	4610      	mov	r0, r2
 80091a4:	4798      	blx	r3
 80091a6:	4603      	mov	r3, r0
 80091a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	2000386c 	.word	0x2000386c

080091b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	4a0d      	ldr	r2, [pc, #52]	; (8009200 <disk_initialize+0x48>)
 80091ca:	5cd3      	ldrb	r3, [r2, r3]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d111      	bne.n	80091f4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	4a0b      	ldr	r2, [pc, #44]	; (8009200 <disk_initialize+0x48>)
 80091d4:	2101      	movs	r1, #1
 80091d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	4a09      	ldr	r2, [pc, #36]	; (8009200 <disk_initialize+0x48>)
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	79fa      	ldrb	r2, [r7, #7]
 80091e6:	4906      	ldr	r1, [pc, #24]	; (8009200 <disk_initialize+0x48>)
 80091e8:	440a      	add	r2, r1
 80091ea:	7a12      	ldrb	r2, [r2, #8]
 80091ec:	4610      	mov	r0, r2
 80091ee:	4798      	blx	r3
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	2000386c 	.word	0x2000386c

08009204 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009204:	b590      	push	{r4, r7, lr}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	4a0a      	ldr	r2, [pc, #40]	; (8009240 <disk_read+0x3c>)
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	689c      	ldr	r4, [r3, #8]
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	4a07      	ldr	r2, [pc, #28]	; (8009240 <disk_read+0x3c>)
 8009224:	4413      	add	r3, r2
 8009226:	7a18      	ldrb	r0, [r3, #8]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	47a0      	blx	r4
 8009230:	4603      	mov	r3, r0
 8009232:	75fb      	strb	r3, [r7, #23]
  return res;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
}
 8009236:	4618      	mov	r0, r3
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	bd90      	pop	{r4, r7, pc}
 800923e:	bf00      	nop
 8009240:	2000386c 	.word	0x2000386c

08009244 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009244:	b590      	push	{r4, r7, lr}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
 800924e:	603b      	str	r3, [r7, #0]
 8009250:	4603      	mov	r3, r0
 8009252:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	4a0a      	ldr	r2, [pc, #40]	; (8009280 <disk_write+0x3c>)
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	68dc      	ldr	r4, [r3, #12]
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	4a07      	ldr	r2, [pc, #28]	; (8009280 <disk_write+0x3c>)
 8009264:	4413      	add	r3, r2
 8009266:	7a18      	ldrb	r0, [r3, #8]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	68b9      	ldr	r1, [r7, #8]
 800926e:	47a0      	blx	r4
 8009270:	4603      	mov	r3, r0
 8009272:	75fb      	strb	r3, [r7, #23]
  return res;
 8009274:	7dfb      	ldrb	r3, [r7, #23]
}
 8009276:	4618      	mov	r0, r3
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	bd90      	pop	{r4, r7, pc}
 800927e:	bf00      	nop
 8009280:	2000386c 	.word	0x2000386c

08009284 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	603a      	str	r2, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
 8009290:	460b      	mov	r3, r1
 8009292:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	4a09      	ldr	r2, [pc, #36]	; (80092bc <disk_ioctl+0x38>)
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	79fa      	ldrb	r2, [r7, #7]
 80092a2:	4906      	ldr	r1, [pc, #24]	; (80092bc <disk_ioctl+0x38>)
 80092a4:	440a      	add	r2, r1
 80092a6:	7a10      	ldrb	r0, [r2, #8]
 80092a8:	79b9      	ldrb	r1, [r7, #6]
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4798      	blx	r3
 80092ae:	4603      	mov	r3, r0
 80092b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	2000386c 	.word	0x2000386c

080092c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80092d4:	e007      	b.n	80092e6 <mem_cpy+0x26>
		*d++ = *s++;
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	1c53      	adds	r3, r2, #1
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	1c59      	adds	r1, r3, #1
 80092e0:	6179      	str	r1, [r7, #20]
 80092e2:	7812      	ldrb	r2, [r2, #0]
 80092e4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	1e5a      	subs	r2, r3, #1
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1f2      	bne.n	80092d6 <mem_cpy+0x16>
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80092fe:	b480      	push	{r7}
 8009300:	b087      	sub	sp, #28
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800930e:	e005      	b.n	800931c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	617a      	str	r2, [r7, #20]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	b2d2      	uxtb	r2, r2
 800931a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	1e5a      	subs	r2, r3, #1
 8009320:	607a      	str	r2, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f4      	bne.n	8009310 <mem_set+0x12>
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	371c      	adds	r7, #28
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009334:	b480      	push	{r7}
 8009336:	b089      	sub	sp, #36	; 0x24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800934c:	bf00      	nop
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	1e5a      	subs	r2, r3, #1
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00d      	beq.n	8009374 <mem_cmp+0x40>
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	61fa      	str	r2, [r7, #28]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	4619      	mov	r1, r3
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	61ba      	str	r2, [r7, #24]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	1acb      	subs	r3, r1, r3
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0ec      	beq.n	800934e <mem_cmp+0x1a>
	return r;
 8009374:	697b      	ldr	r3, [r7, #20]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3724      	adds	r7, #36	; 0x24
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800938c:	e002      	b.n	8009394 <chk_chr+0x12>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3301      	adds	r3, #1
 8009392:	607b      	str	r3, [r7, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <chk_chr+0x26>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d1f2      	bne.n	800938e <chk_chr+0xc>
	return *str;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	781b      	ldrb	r3, [r3, #0]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093c2:	2300      	movs	r3, #0
 80093c4:	60bb      	str	r3, [r7, #8]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	e03b      	b.n	8009444 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80093cc:	4931      	ldr	r1, [pc, #196]	; (8009494 <chk_lock+0xdc>)
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	4613      	mov	r3, r2
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d02c      	beq.n	800943a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80093e0:	492c      	ldr	r1, [pc, #176]	; (8009494 <chk_lock+0xdc>)
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4613      	mov	r3, r2
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	440b      	add	r3, r1
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d120      	bne.n	800943e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80093fc:	4925      	ldr	r1, [pc, #148]	; (8009494 <chk_lock+0xdc>)
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	4613      	mov	r3, r2
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	3304      	adds	r3, #4
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009414:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009416:	429a      	cmp	r2, r3
 8009418:	d111      	bne.n	800943e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800941a:	491e      	ldr	r1, [pc, #120]	; (8009494 <chk_lock+0xdc>)
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4613      	mov	r3, r2
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	440b      	add	r3, r1
 8009428:	3308      	adds	r3, #8
 800942a:	881a      	ldrh	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009432:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8009434:	429a      	cmp	r2, r3
 8009436:	d102      	bne.n	800943e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8009438:	e007      	b.n	800944a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800943a:	2301      	movs	r3, #1
 800943c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3301      	adds	r3, #1
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d9c0      	bls.n	80093cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d109      	bne.n	8009464 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d102      	bne.n	800945c <chk_lock+0xa4>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b02      	cmp	r3, #2
 800945a:	d101      	bne.n	8009460 <chk_lock+0xa8>
 800945c:	2300      	movs	r3, #0
 800945e:	e013      	b.n	8009488 <chk_lock+0xd0>
 8009460:	2312      	movs	r3, #18
 8009462:	e011      	b.n	8009488 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10b      	bne.n	8009482 <chk_lock+0xca>
 800946a:	490a      	ldr	r1, [pc, #40]	; (8009494 <chk_lock+0xdc>)
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	4613      	mov	r3, r2
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	440b      	add	r3, r1
 8009478:	330a      	adds	r3, #10
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009480:	d101      	bne.n	8009486 <chk_lock+0xce>
 8009482:	2310      	movs	r3, #16
 8009484:	e000      	b.n	8009488 <chk_lock+0xd0>
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	20003654 	.word	0x20003654

08009498 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800949e:	2300      	movs	r3, #0
 80094a0:	607b      	str	r3, [r7, #4]
 80094a2:	e002      	b.n	80094aa <enq_lock+0x12>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3301      	adds	r3, #1
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d809      	bhi.n	80094c4 <enq_lock+0x2c>
 80094b0:	490a      	ldr	r1, [pc, #40]	; (80094dc <enq_lock+0x44>)
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	4613      	mov	r3, r2
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1ef      	bne.n	80094a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	bf14      	ite	ne
 80094ca:	2301      	movne	r3, #1
 80094cc:	2300      	moveq	r3, #0
 80094ce:	b2db      	uxtb	r3, r3
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20003654 	.word	0x20003654

080094e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	e02e      	b.n	800954e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80094f0:	4959      	ldr	r1, [pc, #356]	; (8009658 <inc_lock+0x178>)
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4613      	mov	r3, r2
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	429a      	cmp	r2, r3
 800950a:	d11d      	bne.n	8009548 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800950c:	4952      	ldr	r1, [pc, #328]	; (8009658 <inc_lock+0x178>)
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4613      	mov	r3, r2
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	3304      	adds	r3, #4
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009524:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8009526:	429a      	cmp	r2, r3
 8009528:	d10e      	bne.n	8009548 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800952a:	494b      	ldr	r1, [pc, #300]	; (8009658 <inc_lock+0x178>)
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4613      	mov	r3, r2
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	3308      	adds	r3, #8
 800953a:	881a      	ldrh	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009542:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8009544:	429a      	cmp	r2, r3
 8009546:	d006      	beq.n	8009556 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	3301      	adds	r3, #1
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d9cd      	bls.n	80094f0 <inc_lock+0x10>
 8009554:	e000      	b.n	8009558 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8009556:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d148      	bne.n	80095f0 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e002      	b.n	800956a <inc_lock+0x8a>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3301      	adds	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d809      	bhi.n	8009584 <inc_lock+0xa4>
 8009570:	4939      	ldr	r1, [pc, #228]	; (8009658 <inc_lock+0x178>)
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4613      	mov	r3, r2
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1ef      	bne.n	8009564 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b02      	cmp	r3, #2
 8009588:	d101      	bne.n	800958e <inc_lock+0xae>
 800958a:	2300      	movs	r3, #0
 800958c:	e05d      	b.n	800964a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009594:	6819      	ldr	r1, [r3, #0]
 8009596:	4830      	ldr	r0, [pc, #192]	; (8009658 <inc_lock+0x178>)
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4613      	mov	r3, r2
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4403      	add	r3, r0
 80095a4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ac:	6899      	ldr	r1, [r3, #8]
 80095ae:	482a      	ldr	r0, [pc, #168]	; (8009658 <inc_lock+0x178>)
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	4613      	mov	r3, r2
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4403      	add	r3, r0
 80095bc:	3304      	adds	r3, #4
 80095be:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c6:	88d8      	ldrh	r0, [r3, #6]
 80095c8:	4923      	ldr	r1, [pc, #140]	; (8009658 <inc_lock+0x178>)
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	4613      	mov	r3, r2
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	440b      	add	r3, r1
 80095d6:	3308      	adds	r3, #8
 80095d8:	4602      	mov	r2, r0
 80095da:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80095dc:	491e      	ldr	r1, [pc, #120]	; (8009658 <inc_lock+0x178>)
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4613      	mov	r3, r2
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	4413      	add	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	440b      	add	r3, r1
 80095ea:	330a      	adds	r3, #10
 80095ec:	2200      	movs	r2, #0
 80095ee:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00c      	beq.n	8009610 <inc_lock+0x130>
 80095f6:	4918      	ldr	r1, [pc, #96]	; (8009658 <inc_lock+0x178>)
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4613      	mov	r3, r2
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	330a      	adds	r3, #10
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <inc_lock+0x130>
 800960c:	2300      	movs	r3, #0
 800960e:	e01c      	b.n	800964a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10b      	bne.n	800962e <inc_lock+0x14e>
 8009616:	4910      	ldr	r1, [pc, #64]	; (8009658 <inc_lock+0x178>)
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4613      	mov	r3, r2
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	440b      	add	r3, r1
 8009624:	330a      	adds	r3, #10
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	3301      	adds	r3, #1
 800962a:	b299      	uxth	r1, r3
 800962c:	e001      	b.n	8009632 <inc_lock+0x152>
 800962e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009632:	4809      	ldr	r0, [pc, #36]	; (8009658 <inc_lock+0x178>)
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4613      	mov	r3, r2
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4403      	add	r3, r0
 8009640:	330a      	adds	r3, #10
 8009642:	460a      	mov	r2, r1
 8009644:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3301      	adds	r3, #1
}
 800964a:	4618      	mov	r0, r3
 800964c:	3714      	adds	r7, #20
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	20003654 	.word	0x20003654

0800965c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3b01      	subs	r3, #1
 8009668:	607b      	str	r3, [r7, #4]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d82e      	bhi.n	80096ce <dec_lock+0x72>
		n = Files[i].ctr;
 8009670:	491b      	ldr	r1, [pc, #108]	; (80096e0 <dec_lock+0x84>)
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	4613      	mov	r3, r2
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	440b      	add	r3, r1
 800967e:	330a      	adds	r3, #10
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009684:	89fb      	ldrh	r3, [r7, #14]
 8009686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800968a:	d101      	bne.n	8009690 <dec_lock+0x34>
 800968c:	2300      	movs	r3, #0
 800968e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009690:	89fb      	ldrh	r3, [r7, #14]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <dec_lock+0x40>
 8009696:	89fb      	ldrh	r3, [r7, #14]
 8009698:	3b01      	subs	r3, #1
 800969a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800969c:	4910      	ldr	r1, [pc, #64]	; (80096e0 <dec_lock+0x84>)
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	4613      	mov	r3, r2
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	440b      	add	r3, r1
 80096aa:	330a      	adds	r3, #10
 80096ac:	89fa      	ldrh	r2, [r7, #14]
 80096ae:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80096b0:	89fb      	ldrh	r3, [r7, #14]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d108      	bne.n	80096c8 <dec_lock+0x6c>
 80096b6:	490a      	ldr	r1, [pc, #40]	; (80096e0 <dec_lock+0x84>)
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	737b      	strb	r3, [r7, #13]
 80096cc:	e001      	b.n	80096d2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80096ce:	2302      	movs	r3, #2
 80096d0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80096d2:	7b7b      	ldrb	r3, [r7, #13]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	20003654 	.word	0x20003654

080096e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80096ec:	2300      	movs	r3, #0
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	e016      	b.n	8009720 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80096f2:	4910      	ldr	r1, [pc, #64]	; (8009734 <clear_lock+0x50>)
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4613      	mov	r3, r2
 80096f8:	005b      	lsls	r3, r3, #1
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	440b      	add	r3, r1
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	429a      	cmp	r2, r3
 8009706:	d108      	bne.n	800971a <clear_lock+0x36>
 8009708:	490a      	ldr	r1, [pc, #40]	; (8009734 <clear_lock+0x50>)
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4613      	mov	r3, r2
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	2200      	movs	r2, #0
 8009718:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d9e5      	bls.n	80096f2 <clear_lock+0xe>
	}
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	20003654 	.word	0x20003654

08009738 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800974a:	791b      	ldrb	r3, [r3, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d040      	beq.n	80097d2 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009760:	7858      	ldrb	r0, [r3, #1]
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	2301      	movs	r3, #1
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	f7ff fd6c 	bl	8009244 <disk_write>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <sync_window+0x40>
			res = FR_DISK_ERR;
 8009772:	2301      	movs	r3, #1
 8009774:	73fb      	strb	r3, [r7, #15]
 8009776:	e02c      	b.n	80097d2 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800977e:	2200      	movs	r2, #0
 8009780:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	1ad2      	subs	r2, r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	429a      	cmp	r2, r3
 8009798:	d21b      	bcs.n	80097d2 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a0:	78db      	ldrb	r3, [r3, #3]
 80097a2:	613b      	str	r3, [r7, #16]
 80097a4:	e012      	b.n	80097cc <sync_window+0x94>
					wsect += fs->fsize;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	4413      	add	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ba:	7858      	ldrb	r0, [r3, #1]
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	2301      	movs	r3, #1
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	f7ff fd3f 	bl	8009244 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	613b      	str	r3, [r7, #16]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d8e9      	bhi.n	80097a6 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d01e      	beq.n	8009836 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff ff9d 	bl	8009738 <sync_window>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d116      	bne.n	8009836 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800980e:	7858      	ldrb	r0, [r3, #1]
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	2301      	movs	r3, #1
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	f7ff fcf5 	bl	8009204 <disk_read>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d004      	beq.n	800982a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009820:	f04f 33ff 	mov.w	r3, #4294967295
 8009824:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009826:	2301      	movs	r3, #1
 8009828:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009830:	461a      	mov	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff ff75 	bl	8009738 <sync_window>
 800984e:	4603      	mov	r3, r0
 8009850:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f040 80ad 	bne.w	80099b4 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2b03      	cmp	r3, #3
 8009864:	f040 8098 	bne.w	8009998 <sync_fs+0x158>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986e:	795b      	ldrb	r3, [r3, #5]
 8009870:	2b01      	cmp	r3, #1
 8009872:	f040 8091 	bne.w	8009998 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800987e:	895b      	ldrh	r3, [r3, #10]
 8009880:	461a      	mov	r2, r3
 8009882:	2100      	movs	r1, #0
 8009884:	f7ff fd3b 	bl	80092fe <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2255      	movs	r2, #85	; 0x55
 800988c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	22aa      	movs	r2, #170	; 0xaa
 8009894:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2252      	movs	r2, #82	; 0x52
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2252      	movs	r2, #82	; 0x52
 80098a2:	705a      	strb	r2, [r3, #1]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2261      	movs	r2, #97	; 0x61
 80098a8:	709a      	strb	r2, [r3, #2]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2241      	movs	r2, #65	; 0x41
 80098ae:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2272      	movs	r2, #114	; 0x72
 80098b4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2272      	movs	r2, #114	; 0x72
 80098bc:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2241      	movs	r2, #65	; 0x41
 80098c4:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2261      	movs	r2, #97	; 0x61
 80098cc:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	0a1b      	lsrs	r3, r3, #8
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	0c1b      	lsrs	r3, r3, #16
 8009900:	b2da      	uxtb	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	0e1b      	lsrs	r3, r3, #24
 8009912:	b2da      	uxtb	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	b2da      	uxtb	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	b29b      	uxth	r3, r3
 8009934:	0a1b      	lsrs	r3, r3, #8
 8009936:	b29b      	uxth	r3, r3
 8009938:	b2da      	uxtb	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	0c1b      	lsrs	r3, r3, #16
 800994a:	b2da      	uxtb	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	0e1b      	lsrs	r3, r3, #24
 800995c:	b2da      	uxtb	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	3301      	adds	r3, #1
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009974:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800997c:	7858      	ldrb	r0, [r3, #1]
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009988:	2301      	movs	r3, #1
 800998a:	f7ff fc5b 	bl	8009244 <disk_write>
			fs->fsi_flag = 0;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009994:	2200      	movs	r2, #0
 8009996:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800999e:	785b      	ldrb	r3, [r3, #1]
 80099a0:	2200      	movs	r2, #0
 80099a2:	2100      	movs	r1, #0
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff fc6d 	bl	8009284 <disk_ioctl>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	3b02      	subs	r3, #2
 80099cc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	3b02      	subs	r3, #2
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d301      	bcc.n	80099e2 <clust2sect+0x24>
 80099de:	2300      	movs	r3, #0
 80099e0:	e00c      	b.n	80099fc <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e8:	789b      	ldrb	r3, [r3, #2]
 80099ea:	461a      	mov	r2, r3
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	fb03 f202 	mul.w	r2, r3, r2
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fa:	4413      	add	r3, r2
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d906      	bls.n	8009a26 <get_fat+0x1e>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d302      	bcc.n	8009a2c <get_fat+0x24>
		val = 1;	/* Internal error */
 8009a26:	2301      	movs	r3, #1
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	e0e4      	b.n	8009bf6 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	f000 8098 	beq.w	8009b70 <get_fat+0x168>
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	f300 80ce 	bgt.w	8009be2 <get_fat+0x1da>
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d002      	beq.n	8009a50 <get_fat+0x48>
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d05f      	beq.n	8009b0e <get_fat+0x106>
 8009a4e:	e0c8      	b.n	8009be2 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	085b      	lsrs	r3, r3, #1
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a64:	6a1a      	ldr	r2, [r3, #32]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6c:	895b      	ldrh	r3, [r3, #10]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a76:	4413      	add	r3, r2
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff feae 	bl	80097dc <move_window>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f040 80b0 	bne.w	8009be8 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	60fa      	str	r2, [r7, #12]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a94:	8952      	ldrh	r2, [r2, #10]
 8009a96:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a9a:	fb01 f202 	mul.w	r2, r1, r2
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	5cd3      	ldrb	r3, [r2, r3]
 8009aa4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aac:	6a1a      	ldr	r2, [r3, #32]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab4:	895b      	ldrh	r3, [r3, #10]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8009abe:	4413      	add	r3, r2
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff fe8a 	bl	80097dc <move_window>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f040 808e 	bne.w	8009bec <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad6:	895b      	ldrh	r3, [r3, #10]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ae0:	fb01 f202 	mul.w	r2, r1, r2
 8009ae4:	1a9b      	subs	r3, r3, r2
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	5cd3      	ldrb	r3, [r2, r3]
 8009aea:	021b      	lsls	r3, r3, #8
 8009aec:	461a      	mov	r2, r3
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <get_fat+0xfc>
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	091b      	lsrs	r3, r3, #4
 8009b02:	e002      	b.n	8009b0a <get_fat+0x102>
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b0a:	617b      	str	r3, [r7, #20]
			break;
 8009b0c:	e073      	b.n	8009bf6 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b14:	6a1a      	ldr	r2, [r3, #32]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b1c:	895b      	ldrh	r3, [r3, #10]
 8009b1e:	085b      	lsrs	r3, r3, #1
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	4619      	mov	r1, r3
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b2a:	4413      	add	r3, r2
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff fe54 	bl	80097dc <move_window>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d15a      	bne.n	8009bf0 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	005b      	lsls	r3, r3, #1
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b44:	8952      	ldrh	r2, [r2, #10]
 8009b46:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b4a:	fb01 f202 	mul.w	r2, r1, r2
 8009b4e:	1a9b      	subs	r3, r3, r2
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	4413      	add	r3, r2
 8009b54:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	021b      	lsls	r3, r3, #8
 8009b5e:	b21a      	sxth	r2, r3
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	b21b      	sxth	r3, r3
 8009b66:	4313      	orrs	r3, r2
 8009b68:	b21b      	sxth	r3, r3
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	617b      	str	r3, [r7, #20]
			break;
 8009b6e:	e042      	b.n	8009bf6 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b76:	6a1a      	ldr	r2, [r3, #32]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7e:	895b      	ldrh	r3, [r3, #10]
 8009b80:	089b      	lsrs	r3, r3, #2
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	4619      	mov	r1, r3
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b8c:	4413      	add	r3, r2
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff fe23 	bl	80097dc <move_window>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d12b      	bne.n	8009bf4 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ba6:	8952      	ldrh	r2, [r2, #10]
 8009ba8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bac:	fb01 f202 	mul.w	r2, r1, r2
 8009bb0:	1a9b      	subs	r3, r3, r2
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	3303      	adds	r3, #3
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	061a      	lsls	r2, r3, #24
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3302      	adds	r3, #2
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	041b      	lsls	r3, r3, #16
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	3201      	adds	r2, #1
 8009bce:	7812      	ldrb	r2, [r2, #0]
 8009bd0:	0212      	lsls	r2, r2, #8
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	7812      	ldrb	r2, [r2, #0]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009bde:	617b      	str	r3, [r7, #20]
			break;
 8009be0:	e009      	b.n	8009bf6 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8009be2:	2301      	movs	r3, #1
 8009be4:	617b      	str	r3, [r7, #20]
 8009be6:	e006      	b.n	8009bf6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009be8:	bf00      	nop
 8009bea:	e004      	b.n	8009bf6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009bec:	bf00      	nop
 8009bee:	e002      	b.n	8009bf6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009bf0:	bf00      	nop
 8009bf2:	e000      	b.n	8009bf6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009bf4:	bf00      	nop
		}
	}

	return val;
 8009bf6:	697b      	ldr	r3, [r7, #20]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d906      	bls.n	8009c20 <put_fat+0x20>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d302      	bcc.n	8009c26 <put_fat+0x26>
		res = FR_INT_ERR;
 8009c20:	2302      	movs	r3, #2
 8009c22:	77fb      	strb	r3, [r7, #31]
 8009c24:	e13a      	b.n	8009e9c <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	f000 80d0 	beq.w	8009dd4 <put_fat+0x1d4>
 8009c34:	2b03      	cmp	r3, #3
 8009c36:	f300 8127 	bgt.w	8009e88 <put_fat+0x288>
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d003      	beq.n	8009c46 <put_fat+0x46>
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	f000 808f 	beq.w	8009d62 <put_fat+0x162>
 8009c44:	e120      	b.n	8009e88 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	085b      	lsrs	r3, r3, #1
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	4413      	add	r3, r2
 8009c52:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5a:	6a1a      	ldr	r2, [r3, #32]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c62:	895b      	ldrh	r3, [r3, #10]
 8009c64:	4619      	mov	r1, r3
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c6c:	4413      	add	r3, r2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f7ff fdb3 	bl	80097dc <move_window>
 8009c76:	4603      	mov	r3, r0
 8009c78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c7a:	7ffb      	ldrb	r3, [r7, #31]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 8106 	bne.w	8009e8e <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	617a      	str	r2, [r7, #20]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c8e:	8952      	ldrh	r2, [r2, #10]
 8009c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c94:	fb01 f202 	mul.w	r2, r1, r2
 8009c98:	1a9b      	subs	r3, r3, r2
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00d      	beq.n	8009cc6 <put_fat+0xc6>
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	b25b      	sxtb	r3, r3
 8009cb0:	f003 030f 	and.w	r3, r3, #15
 8009cb4:	b25a      	sxtb	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	011b      	lsls	r3, r3, #4
 8009cbc:	b25b      	sxtb	r3, r3
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	b25b      	sxtb	r3, r3
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	e001      	b.n	8009cca <put_fat+0xca>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	69ba      	ldr	r2, [r7, #24]
 8009ccc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cde:	6a1a      	ldr	r2, [r3, #32]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce6:	895b      	ldrh	r3, [r3, #10]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cf0:	4413      	add	r3, r2
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f7ff fd71 	bl	80097dc <move_window>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009cfe:	7ffb      	ldrb	r3, [r7, #31]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f040 80c6 	bne.w	8009e92 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0c:	895b      	ldrh	r3, [r3, #10]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d16:	fb01 f202 	mul.w	r2, r1, r2
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <put_fat+0x134>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	091b      	lsrs	r3, r3, #4
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	e00e      	b.n	8009d52 <put_fat+0x152>
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	b25b      	sxtb	r3, r3
 8009d3a:	f023 030f 	bic.w	r3, r3, #15
 8009d3e:	b25a      	sxtb	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	0a1b      	lsrs	r3, r3, #8
 8009d44:	b25b      	sxtb	r3, r3
 8009d46:	f003 030f 	and.w	r3, r3, #15
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	b25b      	sxtb	r3, r3
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	711a      	strb	r2, [r3, #4]
			break;
 8009d60:	e09c      	b.n	8009e9c <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d68:	6a1a      	ldr	r2, [r3, #32]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d70:	895b      	ldrh	r3, [r3, #10]
 8009d72:	085b      	lsrs	r3, r3, #1
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	4619      	mov	r1, r3
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d7e:	4413      	add	r3, r2
 8009d80:	4619      	mov	r1, r3
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff fd2a 	bl	80097dc <move_window>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d8c:	7ffb      	ldrb	r3, [r7, #31]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f040 8081 	bne.w	8009e96 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d9e:	8952      	ldrh	r2, [r2, #10]
 8009da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009da4:	fb01 f202 	mul.w	r2, r1, r2
 8009da8:	1a9b      	subs	r3, r3, r2
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	701a      	strb	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	0a1b      	lsrs	r3, r3, #8
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dce:	2201      	movs	r2, #1
 8009dd0:	711a      	strb	r2, [r3, #4]
			break;
 8009dd2:	e063      	b.n	8009e9c <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dda:	6a1a      	ldr	r2, [r3, #32]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de2:	895b      	ldrh	r3, [r3, #10]
 8009de4:	089b      	lsrs	r3, r3, #2
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	4619      	mov	r1, r3
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8009df0:	4413      	add	r3, r2
 8009df2:	4619      	mov	r1, r3
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f7ff fcf1 	bl	80097dc <move_window>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009dfe:	7ffb      	ldrb	r3, [r7, #31]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d14a      	bne.n	8009e9a <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e0e:	8952      	ldrh	r2, [r2, #10]
 8009e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e14:	fb01 f202 	mul.w	r2, r1, r2
 8009e18:	1a9b      	subs	r3, r3, r2
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	3303      	adds	r3, #3
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	061a      	lsls	r2, r3, #24
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	3302      	adds	r3, #2
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	041b      	lsls	r3, r3, #16
 8009e30:	4313      	orrs	r3, r2
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	3201      	adds	r2, #1
 8009e36:	7812      	ldrb	r2, [r2, #0]
 8009e38:	0212      	lsls	r2, r2, #8
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	7812      	ldrb	r2, [r2, #0]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	0a1b      	lsrs	r3, r3, #8
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	b2d2      	uxtb	r2, r2
 8009e62:	701a      	strb	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	0c1a      	lsrs	r2, r3, #16
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	3302      	adds	r3, #2
 8009e6c:	b2d2      	uxtb	r2, r2
 8009e6e:	701a      	strb	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	0e1a      	lsrs	r2, r3, #24
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	3303      	adds	r3, #3
 8009e78:	b2d2      	uxtb	r2, r2
 8009e7a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e82:	2201      	movs	r2, #1
 8009e84:	711a      	strb	r2, [r3, #4]
			break;
 8009e86:	e009      	b.n	8009e9c <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	77fb      	strb	r3, [r7, #31]
 8009e8c:	e006      	b.n	8009e9c <put_fat+0x29c>
			if (res != FR_OK) break;
 8009e8e:	bf00      	nop
 8009e90:	e004      	b.n	8009e9c <put_fat+0x29c>
			if (res != FR_OK) break;
 8009e92:	bf00      	nop
 8009e94:	e002      	b.n	8009e9c <put_fat+0x29c>
			if (res != FR_OK) break;
 8009e96:	bf00      	nop
 8009e98:	e000      	b.n	8009e9c <put_fat+0x29c>
			if (res != FR_OK) break;
 8009e9a:	bf00      	nop
		}
	}

	return res;
 8009e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3720      	adds	r7, #32
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d906      	bls.n	8009ec4 <remove_chain+0x1e>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d302      	bcc.n	8009eca <remove_chain+0x24>
		res = FR_INT_ERR;
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	73fb      	strb	r3, [r7, #15]
 8009ec8:	e049      	b.n	8009f5e <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009ece:	e03b      	b.n	8009f48 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff fd98 	bl	8009a08 <get_fat>
 8009ed8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d03b      	beq.n	8009f58 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d102      	bne.n	8009eec <remove_chain+0x46>
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	73fb      	strb	r3, [r7, #15]
 8009eea:	e038      	b.n	8009f5e <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef2:	d102      	bne.n	8009efa <remove_chain+0x54>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	73fb      	strb	r3, [r7, #15]
 8009ef8:	e031      	b.n	8009f5e <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009efa:	2200      	movs	r2, #0
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff fe7e 	bl	8009c00 <put_fat>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d126      	bne.n	8009f5c <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1a:	d013      	beq.n	8009f44 <remove_chain+0x9e>
				fs->free_clust++;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	3301      	adds	r3, #1
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f2c:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f34:	795b      	ldrb	r3, [r3, #5]
 8009f36:	f043 0301 	orr.w	r3, r3, #1
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f42:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d3bc      	bcc.n	8009ed0 <remove_chain+0x2a>
 8009f56:	e002      	b.n	8009f5e <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8009f58:	bf00      	nop
 8009f5a:	e000      	b.n	8009f5e <remove_chain+0xb8>
			if (res != FR_OK) break;
 8009f5c:	bf00      	nop
		}
	}

	return res;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d111      	bne.n	8009f9c <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d006      	beq.n	8009f96 <create_chain+0x2e>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d31d      	bcc.n	8009fd2 <create_chain+0x6a>
 8009f96:	2301      	movs	r3, #1
 8009f98:	613b      	str	r3, [r7, #16]
 8009f9a:	e01a      	b.n	8009fd2 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff fd32 	bl	8009a08 <get_fat>
 8009fa4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d801      	bhi.n	8009fb0 <create_chain+0x48>
 8009fac:	2301      	movs	r3, #1
 8009fae:	e07f      	b.n	800a0b0 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb6:	d101      	bne.n	8009fbc <create_chain+0x54>
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	e079      	b.n	800a0b0 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc2:	695b      	ldr	r3, [r3, #20]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d201      	bcs.n	8009fce <create_chain+0x66>
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	e070      	b.n	800a0b0 <create_chain+0x148>
		scl = clst;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d307      	bcc.n	8009ffa <create_chain+0x92>
			ncl = 2;
 8009fea:	2302      	movs	r3, #2
 8009fec:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d901      	bls.n	8009ffa <create_chain+0x92>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e05a      	b.n	800a0b0 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009ffa:	6979      	ldr	r1, [r7, #20]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff fd03 	bl	8009a08 <get_fat>
 800a002:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00e      	beq.n	800a028 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a010:	d002      	beq.n	800a018 <create_chain+0xb0>
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d101      	bne.n	800a01c <create_chain+0xb4>
			return cs;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	e049      	b.n	800a0b0 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	429a      	cmp	r2, r3
 800a022:	d1d8      	bne.n	8009fd6 <create_chain+0x6e>
 800a024:	2300      	movs	r3, #0
 800a026:	e043      	b.n	800a0b0 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800a028:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a02a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a02e:	6979      	ldr	r1, [r7, #20]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff fde5 	bl	8009c00 <put_fat>
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d109      	bne.n	800a054 <create_chain+0xec>
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d006      	beq.n	800a054 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff fdd8 	bl	8009c00 <put_fat>
 800a050:	4603      	mov	r3, r0
 800a052:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d121      	bne.n	800a09e <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a060:	461a      	mov	r2, r3
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a072:	d01c      	beq.n	800a0ae <create_chain+0x146>
			fs->free_clust--;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a084:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a08c:	795b      	ldrb	r3, [r3, #5]
 800a08e:	f043 0301 	orr.w	r3, r3, #1
 800a092:	b2da      	uxtb	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a09a:	715a      	strb	r2, [r3, #5]
 800a09c:	e007      	b.n	800a0ae <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d102      	bne.n	800a0aa <create_chain+0x142>
 800a0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a8:	e000      	b.n	800a0ac <create_chain+0x144>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a0ae:	697b      	ldr	r3, [r7, #20]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0da:	895b      	ldrh	r3, [r3, #10]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a0ea:	6812      	ldr	r2, [r2, #0]
 800a0ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a0f0:	7892      	ldrb	r2, [r2, #2]
 800a0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	1d1a      	adds	r2, r3, #4
 800a0fc:	613a      	str	r2, [r7, #16]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d101      	bne.n	800a10c <clmt_clust+0x54>
 800a108:	2300      	movs	r3, #0
 800a10a:	e010      	b.n	800a12e <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	429a      	cmp	r2, r3
 800a112:	d307      	bcc.n	800a124 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	617b      	str	r3, [r7, #20]
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	3304      	adds	r3, #4
 800a120:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a122:	e7e9      	b.n	800a0f8 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800a124:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	4413      	add	r3, r2
}
 800a12e:	4618      	mov	r0, r3
 800a130:	371c      	adds	r7, #28
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b086      	sub	sp, #24
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	b29a      	uxth	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a14e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d009      	beq.n	800a174 <dir_sdi+0x3a>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	429a      	cmp	r2, r3
 800a172:	d301      	bcc.n	800a178 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800a174:	2302      	movs	r3, #2
 800a176:	e0aa      	b.n	800a2ce <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d110      	bne.n	800a1a0 <dir_sdi+0x66>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d107      	bne.n	800a1a0 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d115      	bne.n	800a1d2 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b2:	891b      	ldrh	r3, [r3, #8]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d301      	bcc.n	800a1c0 <dir_sdi+0x86>
			return FR_INT_ERR;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e086      	b.n	800a2ce <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	613b      	str	r3, [r7, #16]
 800a1d0:	e043      	b.n	800a25a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1de:	895b      	ldrh	r3, [r3, #10]
 800a1e0:	095b      	lsrs	r3, r3, #5
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f2:	789b      	ldrb	r3, [r3, #2]
 800a1f4:	fb02 f303 	mul.w	r3, r2, r3
 800a1f8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a1fa:	e021      	b.n	800a240 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6979      	ldr	r1, [r7, #20]
 800a206:	4618      	mov	r0, r3
 800a208:	f7ff fbfe 	bl	8009a08 <get_fat>
 800a20c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a214:	d101      	bne.n	800a21a <dir_sdi+0xe0>
 800a216:	2301      	movs	r3, #1
 800a218:	e059      	b.n	800a2ce <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d909      	bls.n	800a234 <dir_sdi+0xfa>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	429a      	cmp	r2, r3
 800a232:	d301      	bcc.n	800a238 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800a234:	2302      	movs	r3, #2
 800a236:	e04a      	b.n	800a2ce <dir_sdi+0x194>
			idx -= ic;
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	429a      	cmp	r2, r3
 800a246:	d2d9      	bcs.n	800a1fc <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6979      	ldr	r1, [r7, #20]
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fbb3 	bl	80099be <clust2sect>
 800a258:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a260:	461a      	mov	r2, r3
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <dir_sdi+0x136>
 800a26c:	2302      	movs	r3, #2
 800a26e:	e02e      	b.n	800a2ce <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27c:	895b      	ldrh	r3, [r3, #10]
 800a27e:	095b      	lsrs	r3, r3, #5
 800a280:	b29b      	uxth	r3, r3
 800a282:	461a      	mov	r2, r3
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	fbb3 f2f2 	udiv	r2, r3, r2
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	4413      	add	r3, r2
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a294:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ac:	895b      	ldrh	r3, [r3, #10]
 800a2ae:	095b      	lsrs	r3, r3, #5
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2ba:	fb01 f202 	mul.w	r2, r1, r2
 800a2be:	1a9b      	subs	r3, r3, r2
 800a2c0:	015b      	lsls	r3, r3, #5
 800a2c2:	4403      	add	r3, r0
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2ca:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a2d6:	b590      	push	{r4, r7, lr}
 800a2d8:	b087      	sub	sp, #28
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e6:	88db      	ldrh	r3, [r3, #6]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d005      	beq.n	800a300 <dir_next+0x2a>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <dir_next+0x2e>
		return FR_NO_FILE;
 800a300:	2304      	movs	r3, #4
 800a302:	e12e      	b.n	800a562 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a310:	895b      	ldrh	r3, [r3, #10]
 800a312:	095b      	lsrs	r3, r3, #5
 800a314:	b29b      	uxth	r3, r3
 800a316:	461a      	mov	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a31e:	fb01 f202 	mul.w	r2, r1, r2
 800a322:	1a9b      	subs	r3, r3, r2
 800a324:	2b00      	cmp	r3, #0
 800a326:	f040 80fa 	bne.w	800a51e <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	3301      	adds	r3, #1
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a33a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10d      	bne.n	800a364 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a354:	891b      	ldrh	r3, [r3, #8]
 800a356:	461a      	mov	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	4293      	cmp	r3, r2
 800a35c:	f0c0 80df 	bcc.w	800a51e <dir_next+0x248>
				return FR_NO_FILE;
 800a360:	2304      	movs	r3, #4
 800a362:	e0fe      	b.n	800a562 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a370:	895b      	ldrh	r3, [r3, #10]
 800a372:	095b      	lsrs	r3, r3, #5
 800a374:	b29b      	uxth	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a38a:	7892      	ldrb	r2, [r2, #2]
 800a38c:	3a01      	subs	r2, #1
 800a38e:	4013      	ands	r3, r2
 800a390:	2b00      	cmp	r3, #0
 800a392:	f040 80c4 	bne.w	800a51e <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	f7ff fb2d 	bl	8009a08 <get_fat>
 800a3ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d801      	bhi.n	800a3ba <dir_next+0xe4>
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	e0d3      	b.n	800a562 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c0:	d101      	bne.n	800a3c6 <dir_next+0xf0>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e0cd      	b.n	800a562 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	f0c0 808e 	bcc.w	800a4f8 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <dir_next+0x110>
 800a3e2:	2304      	movs	r3, #4
 800a3e4:	e0bd      	b.n	800a562 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	f7ff fdb5 	bl	8009f68 <create_chain>
 800a3fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <dir_next+0x134>
 800a406:	2307      	movs	r3, #7
 800a408:	e0ab      	b.n	800a562 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d101      	bne.n	800a414 <dir_next+0x13e>
 800a410:	2302      	movs	r3, #2
 800a412:	e0a6      	b.n	800a562 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41a:	d101      	bne.n	800a420 <dir_next+0x14a>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e0a0      	b.n	800a562 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4618      	mov	r0, r3
 800a42a:	f7ff f985 	bl	8009738 <sync_window>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <dir_next+0x162>
 800a434:	2301      	movs	r3, #1
 800a436:	e094      	b.n	800a562 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4618      	mov	r0, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44e:	895b      	ldrh	r3, [r3, #10]
 800a450:	461a      	mov	r2, r3
 800a452:	2100      	movs	r1, #0
 800a454:	f7fe ff53 	bl	80092fe <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a466:	681c      	ldr	r4, [r3, #0]
 800a468:	6979      	ldr	r1, [r7, #20]
 800a46a:	4610      	mov	r0, r2
 800a46c:	f7ff faa7 	bl	80099be <clust2sect>
 800a470:	4603      	mov	r3, r0
 800a472:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800a476:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a478:	2300      	movs	r3, #0
 800a47a:	613b      	str	r3, [r7, #16]
 800a47c:	e021      	b.n	800a4c2 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48a:	2201      	movs	r2, #1
 800a48c:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff f94e 	bl	8009738 <sync_window>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <dir_next+0x1d0>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e05d      	b.n	800a562 <dir_next+0x28c>
						dp->fs->winsect++;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a4b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4b4:	3201      	adds	r2, #1
 800a4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ba:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	613b      	str	r3, [r7, #16]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ce:	789b      	ldrb	r3, [r3, #2]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d3d2      	bcc.n	800a47e <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	1acb      	subs	r3, r1, r3
 800a4f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4f6:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4fe:	461a      	mov	r2, r3
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6979      	ldr	r1, [r7, #20]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fa55 	bl	80099be <clust2sect>
 800a514:	4602      	mov	r2, r0
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a51c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	b29a      	uxth	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a528:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a540:	895b      	ldrh	r3, [r3, #10]
 800a542:	095b      	lsrs	r3, r3, #5
 800a544:	b29b      	uxth	r3, r3
 800a546:	461a      	mov	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a54e:	fb01 f202 	mul.w	r2, r1, r2
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	015b      	lsls	r3, r3, #5
 800a556:	4403      	add	r3, r0
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a55e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	bd90      	pop	{r4, r7, pc}

0800a56a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a574:	2100      	movs	r1, #0
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fddf 	bl	800a13a <dir_sdi>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d135      	bne.n	800a5f2 <dir_alloc+0x88>
		n = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7ff f91d 	bl	80097dc <move_window>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d121      	bne.n	800a5f0 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	2be5      	cmp	r3, #229	; 0xe5
 800a5b8:	d006      	beq.n	800a5c8 <dir_alloc+0x5e>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d107      	bne.n	800a5d8 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	60bb      	str	r3, [r7, #8]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d102      	bne.n	800a5dc <dir_alloc+0x72>
 800a5d6:	e00c      	b.n	800a5f2 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a5dc:	2101      	movs	r1, #1
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff fe79 	bl	800a2d6 <dir_next>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0cd      	beq.n	800a58a <dir_alloc+0x20>
 800a5ee:	e000      	b.n	800a5f2 <dir_alloc+0x88>
			if (res != FR_OK) break;
 800a5f0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	d101      	bne.n	800a5fc <dir_alloc+0x92>
 800a5f8:	2307      	movs	r3, #7
 800a5fa:	73fb      	strb	r3, [r7, #15]
	return res;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a606:	b480      	push	{r7}
 800a608:	b085      	sub	sp, #20
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	331b      	adds	r3, #27
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	021b      	lsls	r3, r3, #8
 800a618:	b21a      	sxth	r2, r3
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	331a      	adds	r3, #26
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	b21b      	sxth	r3, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	b21b      	sxth	r3, r3
 800a626:	b29b      	uxth	r3, r3
 800a628:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	2b03      	cmp	r3, #3
 800a634:	d10f      	bne.n	800a656 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	3315      	adds	r3, #21
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	b21a      	sxth	r2, r3
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	3314      	adds	r3, #20
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	b21b      	sxth	r3, r3
 800a648:	4313      	orrs	r3, r2
 800a64a:	b21b      	sxth	r3, r3
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	041b      	lsls	r3, r3, #16
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4313      	orrs	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]

	return cl;
 800a656:	68fb      	ldr	r3, [r7, #12]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	331a      	adds	r3, #26
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	b2d2      	uxtb	r2, r2
 800a676:	701a      	strb	r2, [r3, #0]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	0a1b      	lsrs	r3, r3, #8
 800a67e:	b29a      	uxth	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	331b      	adds	r3, #27
 800a684:	b2d2      	uxtb	r2, r2
 800a686:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	0c1a      	lsrs	r2, r3, #16
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3314      	adds	r3, #20
 800a690:	b2d2      	uxtb	r2, r2
 800a692:	701a      	strb	r2, [r3, #0]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	0c1b      	lsrs	r3, r3, #16
 800a698:	b29b      	uxth	r3, r3
 800a69a:	0a1b      	lsrs	r3, r3, #8
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	3315      	adds	r3, #21
 800a6a2:	b2d2      	uxtb	r2, r2
 800a6a4:	701a      	strb	r2, [r3, #0]
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6c6:	1e5a      	subs	r2, r3, #1
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	613b      	str	r3, [r7, #16]
 800a6d8:	2301      	movs	r3, #1
 800a6da:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800a6dc:	4a2b      	ldr	r2, [pc, #172]	; (800a78c <cmp_lfn+0xd8>)
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	021b      	lsls	r3, r3, #8
 800a6ee:	b21a      	sxth	r2, r3
 800a6f0:	4926      	ldr	r1, [pc, #152]	; (800a78c <cmp_lfn+0xd8>)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	440b      	add	r3, r1
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	440b      	add	r3, r1
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	b21b      	sxth	r3, r3
 800a702:	4313      	orrs	r3, r2
 800a704:	b21b      	sxth	r3, r3
 800a706:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800a708:	89fb      	ldrh	r3, [r7, #14]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d019      	beq.n	800a742 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800a70e:	89bb      	ldrh	r3, [r7, #12]
 800a710:	4618      	mov	r0, r3
 800a712:	f003 f885 	bl	800d820 <ff_wtoupper>
 800a716:	4603      	mov	r3, r0
 800a718:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2bfe      	cmp	r3, #254	; 0xfe
 800a71e:	d80e      	bhi.n	800a73e <cmp_lfn+0x8a>
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	617a      	str	r2, [r7, #20]
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	4413      	add	r3, r2
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	4618      	mov	r0, r3
 800a730:	f003 f876 	bl	800d820 <ff_wtoupper>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	89fb      	ldrh	r3, [r7, #14]
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d008      	beq.n	800a750 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800a73e:	2300      	movs	r3, #0
 800a740:	e01f      	b.n	800a782 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800a742:	89bb      	ldrh	r3, [r7, #12]
 800a744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a748:	4293      	cmp	r3, r2
 800a74a:	d001      	beq.n	800a750 <cmp_lfn+0x9c>
 800a74c:	2300      	movs	r3, #0
 800a74e:	e018      	b.n	800a782 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	3301      	adds	r3, #1
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	2b0c      	cmp	r3, #12
 800a75a:	d9bf      	bls.n	800a6dc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00b      	beq.n	800a780 <cmp_lfn+0xcc>
 800a768:	89fb      	ldrh	r3, [r7, #14]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d008      	beq.n	800a780 <cmp_lfn+0xcc>
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	005b      	lsls	r3, r3, #1
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	4413      	add	r3, r2
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <cmp_lfn+0xcc>
		return 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	e000      	b.n	800a782 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800a780:	2301      	movs	r3, #1
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	0800ef74 	.word	0x0800ef74

0800a790 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7a2:	1e5a      	subs	r2, r3, #1
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	005b      	lsls	r3, r3, #1
 800a7a8:	4413      	add	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	613b      	str	r3, [r7, #16]
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 800a7b8:	4a26      	ldr	r2, [pc, #152]	; (800a854 <pick_lfn+0xc4>)
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	4413      	add	r3, r2
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	021b      	lsls	r3, r3, #8
 800a7ca:	b21a      	sxth	r2, r3
 800a7cc:	4921      	ldr	r1, [pc, #132]	; (800a854 <pick_lfn+0xc4>)
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	440b      	add	r3, r1
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	440b      	add	r3, r1
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	b21b      	sxth	r3, r3
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	b21b      	sxth	r3, r3
 800a7e2:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800a7e4:	89fb      	ldrh	r3, [r7, #14]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00f      	beq.n	800a80a <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2bfe      	cmp	r3, #254	; 0xfe
 800a7ee:	d901      	bls.n	800a7f4 <pick_lfn+0x64>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e029      	b.n	800a848 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a7f4:	89bb      	ldrh	r3, [r7, #12]
 800a7f6:	81fb      	strh	r3, [r7, #14]
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	617a      	str	r2, [r7, #20]
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	4413      	add	r3, r2
 800a804:	89fa      	ldrh	r2, [r7, #14]
 800a806:	801a      	strh	r2, [r3, #0]
 800a808:	e006      	b.n	800a818 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a80a:	89bb      	ldrh	r3, [r7, #12]
 800a80c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a810:	4293      	cmp	r3, r2
 800a812:	d001      	beq.n	800a818 <pick_lfn+0x88>
 800a814:	2300      	movs	r3, #0
 800a816:	e017      	b.n	800a848 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	3301      	adds	r3, #1
 800a81c:	613b      	str	r3, [r7, #16]
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	2b0c      	cmp	r3, #12
 800a822:	d9c9      	bls.n	800a7b8 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00a      	beq.n	800a846 <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2bfe      	cmp	r3, #254	; 0xfe
 800a834:	d901      	bls.n	800a83a <pick_lfn+0xaa>
 800a836:	2300      	movs	r3, #0
 800a838:	e006      	b.n	800a848 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	4413      	add	r3, r2
 800a842:	2200      	movs	r2, #0
 800a844:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 800a846:	2301      	movs	r3, #1
}
 800a848:	4618      	mov	r0, r3
 800a84a:	371c      	adds	r7, #28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	0800ef74 	.word	0x0800ef74

0800a858 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800a858:	b480      	push	{r7}
 800a85a:	b089      	sub	sp, #36	; 0x24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	4611      	mov	r1, r2
 800a864:	461a      	mov	r2, r3
 800a866:	460b      	mov	r3, r1
 800a868:	71fb      	strb	r3, [r7, #7]
 800a86a:	4613      	mov	r3, r2
 800a86c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	330d      	adds	r3, #13
 800a872:	79ba      	ldrb	r2, [r7, #6]
 800a874:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	330b      	adds	r3, #11
 800a87a:	220f      	movs	r2, #15
 800a87c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	330c      	adds	r3, #12
 800a882:	2200      	movs	r2, #0
 800a884:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	331a      	adds	r3, #26
 800a88a:	2200      	movs	r2, #0
 800a88c:	701a      	strb	r2, [r3, #0]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	331b      	adds	r3, #27
 800a892:	2200      	movs	r2, #0
 800a894:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	1e5a      	subs	r2, r3, #1
 800a89a:	4613      	mov	r3, r2
 800a89c:	005b      	lsls	r3, r3, #1
 800a89e:	4413      	add	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	82fb      	strh	r3, [r7, #22]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800a8ae:	8afb      	ldrh	r3, [r7, #22]
 800a8b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d007      	beq.n	800a8c8 <fit_lfn+0x70>
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	61fa      	str	r2, [r7, #28]
 800a8be:	005b      	lsls	r3, r3, #1
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	881b      	ldrh	r3, [r3, #0]
 800a8c6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a8c8:	4a1d      	ldr	r2, [pc, #116]	; (800a940 <fit_lfn+0xe8>)
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	8afa      	ldrh	r2, [r7, #22]
 800a8d8:	b2d2      	uxtb	r2, r2
 800a8da:	701a      	strb	r2, [r3, #0]
 800a8dc:	8afb      	ldrh	r3, [r7, #22]
 800a8de:	0a1b      	lsrs	r3, r3, #8
 800a8e0:	b299      	uxth	r1, r3
 800a8e2:	4a17      	ldr	r2, [pc, #92]	; (800a940 <fit_lfn+0xe8>)
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	b2ca      	uxtb	r2, r1
 800a8f2:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800a8f4:	8afb      	ldrh	r3, [r7, #22]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d102      	bne.n	800a900 <fit_lfn+0xa8>
 800a8fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	3301      	adds	r3, #1
 800a904:	61bb      	str	r3, [r7, #24]
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b0c      	cmp	r3, #12
 800a90a:	d9d0      	bls.n	800a8ae <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800a90c:	8afb      	ldrh	r3, [r7, #22]
 800a90e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a912:	4293      	cmp	r3, r2
 800a914:	d006      	beq.n	800a924 <fit_lfn+0xcc>
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	4413      	add	r3, r2
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d103      	bne.n	800a92c <fit_lfn+0xd4>
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a92a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	79fa      	ldrb	r2, [r7, #7]
 800a930:	701a      	strb	r2, [r3, #0]
}
 800a932:	bf00      	nop
 800a934:	3724      	adds	r7, #36	; 0x24
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	0800ef74 	.word	0x0800ef74

0800a944 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b08c      	sub	sp, #48	; 0x30
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a952:	220b      	movs	r2, #11
 800a954:	68b9      	ldr	r1, [r7, #8]
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f7fe fcb2 	bl	80092c0 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b05      	cmp	r3, #5
 800a960:	d92b      	bls.n	800a9ba <gen_numname+0x76>
		sr = seq;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a966:	e022      	b.n	800a9ae <gen_numname+0x6a>
			wc = *lfn++;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	1c9a      	adds	r2, r3, #2
 800a96c:	607a      	str	r2, [r7, #4]
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a972:	2300      	movs	r3, #0
 800a974:	62bb      	str	r3, [r7, #40]	; 0x28
 800a976:	e017      	b.n	800a9a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	005a      	lsls	r2, r3, #1
 800a97c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	4413      	add	r3, r2
 800a984:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a988:	085b      	lsrs	r3, r3, #1
 800a98a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <gen_numname+0x5e>
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a99c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a9a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	2b0f      	cmp	r3, #15
 800a9ac:	d9e4      	bls.n	800a978 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1d8      	bne.n	800a968 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a9ba:	2307      	movs	r3, #7
 800a9bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	3330      	adds	r3, #48	; 0x30
 800a9ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a9ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9d2:	2b39      	cmp	r3, #57	; 0x39
 800a9d4:	d904      	bls.n	800a9e0 <gen_numname+0x9c>
 800a9d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9da:	3307      	adds	r3, #7
 800a9dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	1e5a      	subs	r2, r3, #1
 800a9e4:	62ba      	str	r2, [r7, #40]	; 0x28
 800a9e6:	3330      	adds	r3, #48	; 0x30
 800a9e8:	443b      	add	r3, r7
 800a9ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a9ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	091b      	lsrs	r3, r3, #4
 800a9f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1df      	bne.n	800a9be <gen_numname+0x7a>
	ns[i] = '~';
 800a9fe:	f107 0214 	add.w	r2, r7, #20
 800aa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa04:	4413      	add	r3, r2
 800aa06:	227e      	movs	r2, #126	; 0x7e
 800aa08:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa0e:	e002      	b.n	800aa16 <gen_numname+0xd2>
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	3301      	adds	r3, #1
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
 800aa16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d205      	bcs.n	800aa2a <gen_numname+0xe6>
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	4413      	add	r3, r2
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	2b20      	cmp	r3, #32
 800aa28:	d1f2      	bne.n	800aa10 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	2b07      	cmp	r3, #7
 800aa2e:	d807      	bhi.n	800aa40 <gen_numname+0xfc>
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	1c5a      	adds	r2, r3, #1
 800aa34:	62ba      	str	r2, [r7, #40]	; 0x28
 800aa36:	3330      	adds	r3, #48	; 0x30
 800aa38:	443b      	add	r3, r7
 800aa3a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800aa3e:	e000      	b.n	800aa42 <gen_numname+0xfe>
 800aa40:	2120      	movs	r1, #32
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	627a      	str	r2, [r7, #36]	; 0x24
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	460a      	mov	r2, r1
 800aa4e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	2b07      	cmp	r3, #7
 800aa54:	d9e9      	bls.n	800aa2a <gen_numname+0xe6>
}
 800aa56:	bf00      	nop
 800aa58:	bf00      	nop
 800aa5a:	3730      	adds	r7, #48	; 0x30
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800aa6c:	230b      	movs	r3, #11
 800aa6e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	0852      	lsrs	r2, r2, #1
 800aa76:	01db      	lsls	r3, r3, #7
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	1c59      	adds	r1, r3, #1
 800aa80:	6079      	str	r1, [r7, #4]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	4413      	add	r3, r2
 800aa86:	73fb      	strb	r3, [r7, #15]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	60bb      	str	r3, [r7, #8]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1ed      	bne.n	800aa70 <sum_sfn+0x10>
	return sum;
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b086      	sub	sp, #24
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aaaa:	2100      	movs	r1, #0
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff fb44 	bl	800a13a <dir_sdi>
 800aab2:	4603      	mov	r3, r0
 800aab4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <dir_find+0x1e>
 800aabc:	7dfb      	ldrb	r3, [r7, #23]
 800aabe:	e0b8      	b.n	800ac32 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800aac0:	23ff      	movs	r3, #255	; 0xff
 800aac2:	753b      	strb	r3, [r7, #20]
 800aac4:	7d3b      	ldrb	r3, [r7, #20]
 800aac6:	757b      	strb	r3, [r7, #21]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aad2:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	f7fe fe78 	bl	80097dc <move_window>
 800aaec:	4603      	mov	r3, r0
 800aaee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f040 8097 	bne.w	800ac26 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab08:	7dbb      	ldrb	r3, [r7, #22]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d102      	bne.n	800ab14 <dir_find+0x72>
 800ab0e:	2304      	movs	r3, #4
 800ab10:	75fb      	strb	r3, [r7, #23]
 800ab12:	e08d      	b.n	800ac30 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	330b      	adds	r3, #11
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab1e:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ab20:	7dbb      	ldrb	r3, [r7, #22]
 800ab22:	2be5      	cmp	r3, #229	; 0xe5
 800ab24:	d007      	beq.n	800ab36 <dir_find+0x94>
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00b      	beq.n	800ab48 <dir_find+0xa6>
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
 800ab32:	2b0f      	cmp	r3, #15
 800ab34:	d008      	beq.n	800ab48 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ab36:	23ff      	movs	r3, #255	; 0xff
 800ab38:	757b      	strb	r3, [r7, #21]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab44:	849a      	strh	r2, [r3, #36]	; 0x24
 800ab46:	e063      	b.n	800ac10 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
 800ab4a:	2b0f      	cmp	r3, #15
 800ab4c:	d137      	bne.n	800abbe <dir_find+0x11c>
				if (dp->lfn) {
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d05a      	beq.n	800ac10 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ab5a:	7dbb      	ldrb	r3, [r7, #22]
 800ab5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d010      	beq.n	800ab86 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	7b5b      	ldrb	r3, [r3, #13]
 800ab68:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ab6a:	7dbb      	ldrb	r3, [r7, #22]
 800ab6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab70:	75bb      	strb	r3, [r7, #22]
 800ab72:	7dbb      	ldrb	r3, [r7, #22]
 800ab74:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7c:	88da      	ldrh	r2, [r3, #6]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab84:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ab86:	7dba      	ldrb	r2, [r7, #22]
 800ab88:	7d7b      	ldrb	r3, [r7, #21]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d114      	bne.n	800abb8 <dir_find+0x116>
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	330d      	adds	r3, #13
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	7d3a      	ldrb	r2, [r7, #20]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d10e      	bne.n	800abb8 <dir_find+0x116>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	6939      	ldr	r1, [r7, #16]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff fd85 	bl	800a6b4 <cmp_lfn>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <dir_find+0x116>
 800abb0:	7d7b      	ldrb	r3, [r7, #21]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	e000      	b.n	800abba <dir_find+0x118>
 800abb8:	23ff      	movs	r3, #255	; 0xff
 800abba:	757b      	strb	r3, [r7, #21]
 800abbc:	e028      	b.n	800ac10 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800abbe:	7d7b      	ldrb	r3, [r7, #21]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d107      	bne.n	800abd4 <dir_find+0x132>
 800abc4:	6938      	ldr	r0, [r7, #16]
 800abc6:	f7ff ff4b 	bl	800aa60 <sum_sfn>
 800abca:	4603      	mov	r3, r0
 800abcc:	461a      	mov	r2, r3
 800abce:	7d3b      	ldrb	r3, [r7, #20]
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d02a      	beq.n	800ac2a <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	330b      	adds	r3, #11
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10b      	bne.n	800ac00 <dir_find+0x15e>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	220b      	movs	r2, #11
 800abf2:	4619      	mov	r1, r3
 800abf4:	6938      	ldr	r0, [r7, #16]
 800abf6:	f7fe fb9d 	bl	8009334 <mem_cmp>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d016      	beq.n	800ac2e <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ac00:	23ff      	movs	r3, #255	; 0xff
 800ac02:	757b      	strb	r3, [r7, #21]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0e:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800ac10:	2100      	movs	r1, #0
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff fb5f 	bl	800a2d6 <dir_next>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ac1c:	7dfb      	ldrb	r3, [r7, #23]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f43f af58 	beq.w	800aad4 <dir_find+0x32>
 800ac24:	e004      	b.n	800ac30 <dir_find+0x18e>
		if (res != FR_OK) break;
 800ac26:	bf00      	nop
 800ac28:	e002      	b.n	800ac30 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ac2a:	bf00      	nop
 800ac2c:	e000      	b.n	800ac30 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ac2e:	bf00      	nop

	return res;
 800ac30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b086      	sub	sp, #24
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800ac44:	23ff      	movs	r3, #255	; 0xff
 800ac46:	757b      	strb	r3, [r7, #21]
 800ac48:	23ff      	movs	r3, #255	; 0xff
 800ac4a:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800ac50:	e08a      	b.n	800ad68 <dir_read+0x12e>
		res = move_window(dp->fs, dp->sect);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	4619      	mov	r1, r3
 800ac64:	4610      	mov	r0, r2
 800ac66:	f7fe fdb9 	bl	80097dc <move_window>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f040 8081 	bne.w	800ad78 <dir_read+0x13e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ac86:	7dbb      	ldrb	r3, [r7, #22]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d102      	bne.n	800ac92 <dir_read+0x58>
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	75fb      	strb	r3, [r7, #23]
 800ac90:	e077      	b.n	800ad82 <dir_read+0x148>
		a = dir[DIR_Attr] & AM_MASK;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	330b      	adds	r3, #11
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac9c:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ac9e:	7dbb      	ldrb	r3, [r7, #22]
 800aca0:	2be5      	cmp	r3, #229	; 0xe5
 800aca2:	d00e      	beq.n	800acc2 <dir_read+0x88>
 800aca4:	7dbb      	ldrb	r3, [r7, #22]
 800aca6:	2b2e      	cmp	r3, #46	; 0x2e
 800aca8:	d00b      	beq.n	800acc2 <dir_read+0x88>
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	f023 0320 	bic.w	r3, r3, #32
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	bf0c      	ite	eq
 800acb4:	2301      	moveq	r3, #1
 800acb6:	2300      	movne	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d002      	beq.n	800acc8 <dir_read+0x8e>
			ord = 0xFF;
 800acc2:	23ff      	movs	r3, #255	; 0xff
 800acc4:	757b      	strb	r3, [r7, #21]
 800acc6:	e046      	b.n	800ad56 <dir_read+0x11c>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	2b0f      	cmp	r3, #15
 800accc:	d131      	bne.n	800ad32 <dir_read+0xf8>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 800acce:	7dbb      	ldrb	r3, [r7, #22]
 800acd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d010      	beq.n	800acfa <dir_read+0xc0>
					sum = dir[LDIR_Chksum];
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	7b5b      	ldrb	r3, [r3, #13]
 800acdc:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 800acde:	7dbb      	ldrb	r3, [r7, #22]
 800ace0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace4:	75bb      	strb	r3, [r7, #22]
 800ace6:	7dbb      	ldrb	r3, [r7, #22]
 800ace8:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf0:	88da      	ldrh	r2, [r3, #6]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf8:	849a      	strh	r2, [r3, #36]	; 0x24
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800acfa:	7dba      	ldrb	r2, [r7, #22]
 800acfc:	7d7b      	ldrb	r3, [r7, #21]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d114      	bne.n	800ad2c <dir_read+0xf2>
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	330d      	adds	r3, #13
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	7d3a      	ldrb	r2, [r7, #20]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d10e      	bne.n	800ad2c <dir_read+0xf2>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	6939      	ldr	r1, [r7, #16]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fd39 	bl	800a790 <pick_lfn>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <dir_read+0xf2>
 800ad24:	7d7b      	ldrb	r3, [r7, #21]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	e000      	b.n	800ad2e <dir_read+0xf4>
 800ad2c:	23ff      	movs	r3, #255	; 0xff
 800ad2e:	757b      	strb	r3, [r7, #21]
 800ad30:	e011      	b.n	800ad56 <dir_read+0x11c>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 800ad32:	7d7b      	ldrb	r3, [r7, #21]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d107      	bne.n	800ad48 <dir_read+0x10e>
 800ad38:	6938      	ldr	r0, [r7, #16]
 800ad3a:	f7ff fe91 	bl	800aa60 <sum_sfn>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	461a      	mov	r2, r3
 800ad42:	7d3b      	ldrb	r3, [r7, #20]
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d019      	beq.n	800ad7c <dir_read+0x142>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad52:	849a      	strh	r2, [r3, #36]	; 0x24
				break;
 800ad54:	e012      	b.n	800ad7c <dir_read+0x142>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800ad56:	2100      	movs	r1, #0
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff fabc 	bl	800a2d6 <dir_next>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10b      	bne.n	800ad80 <dir_read+0x146>
	while (dp->sect) {
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f47f af6e 	bne.w	800ac52 <dir_read+0x18>
 800ad76:	e004      	b.n	800ad82 <dir_read+0x148>
		if (res != FR_OK) break;
 800ad78:	bf00      	nop
 800ad7a:	e002      	b.n	800ad82 <dir_read+0x148>
				break;
 800ad7c:	bf00      	nop
 800ad7e:	e000      	b.n	800ad82 <dir_read+0x148>
		if (res != FR_OK) break;
 800ad80:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <dir_read+0x15a>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad8e:	461a      	mov	r2, r3
 800ad90:	2300      	movs	r3, #0
 800ad92:	6113      	str	r3, [r2, #16]

	return res;
 800ad94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
	...

0800ada0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08c      	sub	sp, #48	; 0x30
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	623b      	str	r3, [r7, #32]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800adbc:	f107 030c 	add.w	r3, r7, #12
 800adc0:	220c      	movs	r2, #12
 800adc2:	6a39      	ldr	r1, [r7, #32]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fe fa7b 	bl	80092c0 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d03b      	beq.n	800ae4c <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	330b      	adds	r3, #11
 800add8:	2200      	movs	r2, #0
 800adda:	701a      	strb	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade2:	461a      	mov	r2, r3
 800ade4:	2300      	movs	r3, #0
 800ade6:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800ade8:	2301      	movs	r3, #1
 800adea:	62bb      	str	r3, [r7, #40]	; 0x28
 800adec:	e013      	b.n	800ae16 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800adee:	f107 010c 	add.w	r1, r7, #12
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	69fa      	ldr	r2, [r7, #28]
 800adf6:	6a38      	ldr	r0, [r7, #32]
 800adf8:	f7ff fda4 	bl	800a944 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff fe50 	bl	800aaa2 <dir_find>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ae08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d106      	bne.n	800ae1e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	3301      	adds	r3, #1
 800ae14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	2b63      	cmp	r3, #99	; 0x63
 800ae1a:	d9e8      	bls.n	800adee <dir_register+0x4e>
 800ae1c:	e000      	b.n	800ae20 <dir_register+0x80>
			if (res != FR_OK) break;
 800ae1e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	2b64      	cmp	r3, #100	; 0x64
 800ae24:	d101      	bne.n	800ae2a <dir_register+0x8a>
 800ae26:	2307      	movs	r3, #7
 800ae28:	e0d8      	b.n	800afdc <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ae2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d002      	beq.n	800ae38 <dir_register+0x98>
 800ae32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae36:	e0d1      	b.n	800afdc <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	330b      	adds	r3, #11
 800ae3c:	7dfa      	ldrb	r2, [r7, #23]
 800ae3e:	701a      	strb	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae46:	461a      	mov	r2, r3
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	f003 0302 	and.w	r3, r3, #2
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d014      	beq.n	800ae80 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800ae56:	2300      	movs	r3, #0
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae5a:	e002      	b.n	800ae62 <dir_register+0xc2>
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	3301      	adds	r3, #1
 800ae60:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	69fa      	ldr	r2, [r7, #28]
 800ae68:	4413      	add	r3, r2
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1f5      	bne.n	800ae5c <dir_register+0xbc>
		nent = (n + 25) / 13;
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae72:	3319      	adds	r3, #25
 800ae74:	4a5b      	ldr	r2, [pc, #364]	; (800afe4 <dir_register+0x244>)
 800ae76:	fba2 2303 	umull	r2, r3, r2, r3
 800ae7a:	089b      	lsrs	r3, r3, #2
 800ae7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae7e:	e001      	b.n	800ae84 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800ae80:	2301      	movs	r3, #1
 800ae82:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ae84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff fb6f 	bl	800a56a <dir_alloc>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ae92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d15b      	bne.n	800af52 <dir_register+0x1b2>
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	627b      	str	r3, [r7, #36]	; 0x24
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d055      	beq.n	800af52 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeac:	88db      	ldrh	r3, [r3, #6]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff f93f 	bl	800a13a <dir_sdi>
 800aebc:	4603      	mov	r3, r0
 800aebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800aec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d143      	bne.n	800af52 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7ff fdc4 	bl	800aa60 <sum_sfn>
 800aed8:	4603      	mov	r3, r0
 800aeda:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	4619      	mov	r1, r3
 800aeee:	4610      	mov	r0, r2
 800aef0:	f7fe fc74 	bl	80097dc <move_window>
 800aef4:	4603      	mov	r3, r0
 800aef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800aefa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d126      	bne.n	800af50 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af08:	6a18      	ldr	r0, [r3, #32]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af10:	6959      	ldr	r1, [r3, #20]
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	b2da      	uxtb	r2, r3
 800af16:	7efb      	ldrb	r3, [r7, #27]
 800af18:	f7ff fc9e 	bl	800a858 <fit_lfn>
				dp->fs->wflag = 1;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af28:	2201      	movs	r2, #1
 800af2a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800af2c:	2100      	movs	r1, #0
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff f9d1 	bl	800a2d6 <dir_next>
 800af34:	4603      	mov	r3, r0
 800af36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800af3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d107      	bne.n	800af52 <dir_register+0x1b2>
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	3b01      	subs	r3, #1
 800af46:	627b      	str	r3, [r7, #36]	; 0x24
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1c6      	bne.n	800aedc <dir_register+0x13c>
 800af4e:	e000      	b.n	800af52 <dir_register+0x1b2>
				if (res != FR_OK) break;
 800af50:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800af52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af56:	2b00      	cmp	r3, #0
 800af58:	d13e      	bne.n	800afd8 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	4619      	mov	r1, r3
 800af6c:	4610      	mov	r0, r2
 800af6e:	f7fe fc35 	bl	80097dc <move_window>
 800af72:	4603      	mov	r3, r0
 800af74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800af78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d12b      	bne.n	800afd8 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	2220      	movs	r2, #32
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fe f9b6 	bl	80092fe <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af98:	6958      	ldr	r0, [r3, #20]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	220b      	movs	r2, #11
 800afa4:	4619      	mov	r1, r3
 800afa6:	f7fe f98b 	bl	80092c0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	330b      	adds	r3, #11
 800afb4:	781a      	ldrb	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	330c      	adds	r3, #12
 800afc0:	f002 0218 	and.w	r2, r2, #24
 800afc4:	b2d2      	uxtb	r2, r2
 800afc6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd4:	2201      	movs	r2, #1
 800afd6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800afd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3730      	adds	r7, #48	; 0x30
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	4ec4ec4f 	.word	0x4ec4ec4f

0800afe8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	3309      	adds	r3, #9
 800aff6:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d071      	beq.n	800b0e8 <get_fileinfo+0x100>
		dir = dp->dir;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	60fb      	str	r3, [r7, #12]
		i = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 800b012:	e032      	b.n	800b07a <get_fileinfo+0x92>
			c = (TCHAR)dir[i++];
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	61fa      	str	r2, [r7, #28]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	4413      	add	r3, r2
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 800b022:	7dfb      	ldrb	r3, [r7, #23]
 800b024:	2b20      	cmp	r3, #32
 800b026:	d100      	bne.n	800b02a <get_fileinfo+0x42>
 800b028:	e027      	b.n	800b07a <get_fileinfo+0x92>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
 800b02c:	2b05      	cmp	r3, #5
 800b02e:	d101      	bne.n	800b034 <get_fileinfo+0x4c>
 800b030:	23e5      	movs	r3, #229	; 0xe5
 800b032:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	2b09      	cmp	r3, #9
 800b038:	d104      	bne.n	800b044 <get_fileinfo+0x5c>
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	1c5a      	adds	r2, r3, #1
 800b03e:	61ba      	str	r2, [r7, #24]
 800b040:	222e      	movs	r2, #46	; 0x2e
 800b042:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 800b044:	7dfb      	ldrb	r3, [r7, #23]
 800b046:	2b40      	cmp	r3, #64	; 0x40
 800b048:	d912      	bls.n	800b070 <get_fileinfo+0x88>
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	2b5a      	cmp	r3, #90	; 0x5a
 800b04e:	d80f      	bhi.n	800b070 <get_fileinfo+0x88>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	330c      	adds	r3, #12
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	2b08      	cmp	r3, #8
 800b05c:	d901      	bls.n	800b062 <get_fileinfo+0x7a>
 800b05e:	2310      	movs	r3, #16
 800b060:	e000      	b.n	800b064 <get_fileinfo+0x7c>
 800b062:	2308      	movs	r3, #8
 800b064:	4013      	ands	r3, r2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <get_fileinfo+0x88>
				c += 0x20;			/* To lower */
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
 800b06c:	3320      	adds	r3, #32
 800b06e:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	61ba      	str	r2, [r7, #24]
 800b076:	7dfa      	ldrb	r2, [r7, #23]
 800b078:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	2b0a      	cmp	r3, #10
 800b07e:	d9c9      	bls.n	800b014 <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	7ada      	ldrb	r2, [r3, #11]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	331f      	adds	r3, #31
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	061a      	lsls	r2, r3, #24
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	331e      	adds	r3, #30
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	041b      	lsls	r3, r3, #16
 800b098:	4313      	orrs	r3, r2
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	321d      	adds	r2, #29
 800b09e:	7812      	ldrb	r2, [r2, #0]
 800b0a0:	0212      	lsls	r2, r2, #8
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	321c      	adds	r2, #28
 800b0a8:	7812      	ldrb	r2, [r2, #0]
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3319      	adds	r3, #25
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	021b      	lsls	r3, r3, #8
 800b0b8:	b21a      	sxth	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3318      	adds	r3, #24
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	b21b      	sxth	r3, r3
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	b21b      	sxth	r3, r3
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3317      	adds	r3, #23
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	021b      	lsls	r3, r3, #8
 800b0d4:	b21a      	sxth	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3316      	adds	r3, #22
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	b21b      	sxth	r3, r3
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	b21b      	sxth	r3, r3
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d047      	beq.n	800b186 <get_fileinfo+0x19e>
		i = 0; p = fno->lfname;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61fb      	str	r3, [r7, #28]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d037      	beq.n	800b17c <get_fileinfo+0x194>
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d033      	beq.n	800b17c <get_fileinfo+0x194>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b11a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b11c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b120:	4293      	cmp	r3, r2
 800b122:	d02b      	beq.n	800b17c <get_fileinfo+0x194>
			lfn = dp->lfn;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b12a:	6a1b      	ldr	r3, [r3, #32]
 800b12c:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800b12e:	e01d      	b.n	800b16c <get_fileinfo+0x184>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b130:	897b      	ldrh	r3, [r7, #10]
 800b132:	2100      	movs	r1, #0
 800b134:	4618      	mov	r0, r3
 800b136:	f002 fb37 	bl	800d7a8 <ff_convert>
 800b13a:	4603      	mov	r3, r0
 800b13c:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 800b13e:	897b      	ldrh	r3, [r7, #10]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d102      	bne.n	800b14a <get_fileinfo+0x162>
 800b144:	2300      	movs	r3, #0
 800b146:	61fb      	str	r3, [r7, #28]
 800b148:	e018      	b.n	800b17c <get_fileinfo+0x194>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	3b01      	subs	r3, #1
 800b150:	69fa      	ldr	r2, [r7, #28]
 800b152:	429a      	cmp	r2, r3
 800b154:	d302      	bcc.n	800b15c <get_fileinfo+0x174>
 800b156:	2300      	movs	r3, #0
 800b158:	61fb      	str	r3, [r7, #28]
 800b15a:	e00f      	b.n	800b17c <get_fileinfo+0x194>
				p[i++] = (TCHAR)w;
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	1c5a      	adds	r2, r3, #1
 800b160:	61fa      	str	r2, [r7, #28]
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	4413      	add	r3, r2
 800b166:	897a      	ldrh	r2, [r7, #10]
 800b168:	b2d2      	uxtb	r2, r2
 800b16a:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	1c9a      	adds	r2, r3, #2
 800b170:	613a      	str	r2, [r7, #16]
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	817b      	strh	r3, [r7, #10]
 800b176:	897b      	ldrh	r3, [r7, #10]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1d9      	bne.n	800b130 <get_fileinfo+0x148>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	2200      	movs	r2, #0
 800b184:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 800b186:	bf00      	nop
 800b188:	3720      	adds	r7, #32
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08a      	sub	sp, #40	; 0x28
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	613b      	str	r3, [r7, #16]
 800b1a0:	e002      	b.n	800b1a8 <create_name+0x18>
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	613b      	str	r3, [r7, #16]
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	2b2f      	cmp	r3, #47	; 0x2f
 800b1ae:	d0f8      	beq.n	800b1a2 <create_name+0x12>
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b5c      	cmp	r3, #92	; 0x5c
 800b1b6:	d0f4      	beq.n	800b1a2 <create_name+0x12>
	lfn = dp->lfn;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1be:	6a1b      	ldr	r3, [r3, #32]
 800b1c0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	617b      	str	r3, [r7, #20]
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	61ba      	str	r2, [r7, #24]
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800b1d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1da:	2b1f      	cmp	r3, #31
 800b1dc:	d92f      	bls.n	800b23e <create_name+0xae>
 800b1de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e0:	2b2f      	cmp	r3, #47	; 0x2f
 800b1e2:	d02c      	beq.n	800b23e <create_name+0xae>
 800b1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e6:	2b5c      	cmp	r3, #92	; 0x5c
 800b1e8:	d029      	beq.n	800b23e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2bfe      	cmp	r3, #254	; 0xfe
 800b1ee:	d901      	bls.n	800b1f4 <create_name+0x64>
			return FR_INVALID_NAME;
 800b1f0:	2306      	movs	r3, #6
 800b1f2:	e186      	b.n	800b502 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b1f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b1fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1fc:	2101      	movs	r1, #1
 800b1fe:	4618      	mov	r0, r3
 800b200:	f002 fad2 	bl	800d7a8 <ff_convert>
 800b204:	4603      	mov	r3, r0
 800b206:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <create_name+0x82>
 800b20e:	2306      	movs	r3, #6
 800b210:	e177      	b.n	800b502 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800b212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b214:	2b7f      	cmp	r3, #127	; 0x7f
 800b216:	d809      	bhi.n	800b22c <create_name+0x9c>
 800b218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b21a:	4619      	mov	r1, r3
 800b21c:	488e      	ldr	r0, [pc, #568]	; (800b458 <create_name+0x2c8>)
 800b21e:	f7fe f8b0 	bl	8009382 <chk_chr>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <create_name+0x9c>
			return FR_INVALID_NAME;
 800b228:	2306      	movs	r3, #6
 800b22a:	e16a      	b.n	800b502 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	617a      	str	r2, [r7, #20]
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	4413      	add	r3, r2
 800b238:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b23a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b23c:	e7c5      	b.n	800b1ca <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	441a      	add	r2, r3
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b24a:	2b1f      	cmp	r3, #31
 800b24c:	d801      	bhi.n	800b252 <create_name+0xc2>
 800b24e:	2304      	movs	r3, #4
 800b250:	e000      	b.n	800b254 <create_name+0xc4>
 800b252:	2300      	movs	r3, #0
 800b254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800b258:	e011      	b.n	800b27e <create_name+0xee>
		w = lfn[di - 1];
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b260:	3b01      	subs	r3, #1
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	4413      	add	r3, r2
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b26c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b26e:	2b20      	cmp	r3, #32
 800b270:	d002      	beq.n	800b278 <create_name+0xe8>
 800b272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b274:	2b2e      	cmp	r3, #46	; 0x2e
 800b276:	d106      	bne.n	800b286 <create_name+0xf6>
		di--;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1ea      	bne.n	800b25a <create_name+0xca>
 800b284:	e000      	b.n	800b288 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800b286:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <create_name+0x102>
 800b28e:	2306      	movs	r3, #6
 800b290:	e137      	b.n	800b502 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	005b      	lsls	r3, r3, #1
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	4413      	add	r3, r2
 800b29a:	2200      	movs	r2, #0
 800b29c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	220b      	movs	r2, #11
 800b2a8:	2120      	movs	r1, #32
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fe f827 	bl	80092fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	61bb      	str	r3, [r7, #24]
 800b2b4:	e002      	b.n	800b2bc <create_name+0x12c>
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	61bb      	str	r3, [r7, #24]
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	005b      	lsls	r3, r3, #1
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	2b20      	cmp	r3, #32
 800b2c8:	d0f5      	beq.n	800b2b6 <create_name+0x126>
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b2d6:	d0ee      	beq.n	800b2b6 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d009      	beq.n	800b2f2 <create_name+0x162>
 800b2de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2e2:	f043 0303 	orr.w	r3, r3, #3
 800b2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b2ea:	e002      	b.n	800b2f2 <create_name+0x162>
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d009      	beq.n	800b30c <create_name+0x17c>
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2fe:	3b01      	subs	r3, #1
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	4413      	add	r3, r2
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	2b2e      	cmp	r3, #46	; 0x2e
 800b30a:	d1ef      	bne.n	800b2ec <create_name+0x15c>

	b = i = 0; ni = 8;
 800b30c:	2300      	movs	r3, #0
 800b30e:	623b      	str	r3, [r7, #32]
 800b310:	2300      	movs	r3, #0
 800b312:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b316:	2308      	movs	r3, #8
 800b318:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	61ba      	str	r2, [r7, #24]
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	4413      	add	r3, r2
 800b326:	881b      	ldrh	r3, [r3, #0]
 800b328:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b32a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 8091 	beq.w	800b454 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b334:	2b20      	cmp	r3, #32
 800b336:	d006      	beq.n	800b346 <create_name+0x1b6>
 800b338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b33a:	2b2e      	cmp	r3, #46	; 0x2e
 800b33c:	d10a      	bne.n	800b354 <create_name+0x1c4>
 800b33e:	69ba      	ldr	r2, [r7, #24]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	429a      	cmp	r2, r3
 800b344:	d006      	beq.n	800b354 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800b346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b34a:	f043 0303 	orr.w	r3, r3, #3
 800b34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b352:	e07e      	b.n	800b452 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b354:	6a3a      	ldr	r2, [r7, #32]
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d203      	bcs.n	800b364 <create_name+0x1d4>
 800b35c:	69ba      	ldr	r2, [r7, #24]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	429a      	cmp	r2, r3
 800b362:	d123      	bne.n	800b3ac <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	2b0b      	cmp	r3, #11
 800b368:	d106      	bne.n	800b378 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800b36a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b36e:	f043 0303 	orr.w	r3, r3, #3
 800b372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b376:	e076      	b.n	800b466 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d005      	beq.n	800b38c <create_name+0x1fc>
 800b380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b384:	f043 0303 	orr.w	r3, r3, #3
 800b388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b38c:	69ba      	ldr	r2, [r7, #24]
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	429a      	cmp	r2, r3
 800b392:	d867      	bhi.n	800b464 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	61bb      	str	r3, [r7, #24]
 800b398:	2308      	movs	r3, #8
 800b39a:	623b      	str	r3, [r7, #32]
 800b39c:	230b      	movs	r3, #11
 800b39e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b3a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b3aa:	e052      	b.n	800b452 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b3ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ae:	2b7f      	cmp	r3, #127	; 0x7f
 800b3b0:	d914      	bls.n	800b3dc <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b3b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f002 f9f6 	bl	800d7a8 <ff_convert>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b3c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <create_name+0x240>
 800b3c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c8:	3b80      	subs	r3, #128	; 0x80
 800b3ca:	4a24      	ldr	r2, [pc, #144]	; (800b45c <create_name+0x2cc>)
 800b3cc:	5cd3      	ldrb	r3, [r2, r3]
 800b3ce:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3d4:	f043 0302 	orr.w	r3, r3, #2
 800b3d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b3dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d007      	beq.n	800b3f2 <create_name+0x262>
 800b3e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	481e      	ldr	r0, [pc, #120]	; (800b460 <create_name+0x2d0>)
 800b3e8:	f7fd ffcb 	bl	8009382 <chk_chr>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d008      	beq.n	800b404 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b3f2:	235f      	movs	r3, #95	; 0x5f
 800b3f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3fa:	f043 0303 	orr.w	r3, r3, #3
 800b3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b402:	e01b      	b.n	800b43c <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b406:	2b40      	cmp	r3, #64	; 0x40
 800b408:	d909      	bls.n	800b41e <create_name+0x28e>
 800b40a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b40c:	2b5a      	cmp	r3, #90	; 0x5a
 800b40e:	d806      	bhi.n	800b41e <create_name+0x28e>
					b |= 2;
 800b410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b414:	f043 0302 	orr.w	r3, r3, #2
 800b418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b41c:	e00e      	b.n	800b43c <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b420:	2b60      	cmp	r3, #96	; 0x60
 800b422:	d90b      	bls.n	800b43c <create_name+0x2ac>
 800b424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b426:	2b7a      	cmp	r3, #122	; 0x7a
 800b428:	d808      	bhi.n	800b43c <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800b42a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b42e:	f043 0301 	orr.w	r3, r3, #1
 800b432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b438:	3b20      	subs	r3, #32
 800b43a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b442:	699a      	ldr	r2, [r3, #24]
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	1c59      	adds	r1, r3, #1
 800b448:	6239      	str	r1, [r7, #32]
 800b44a:	4413      	add	r3, r2
 800b44c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b452:	e762      	b.n	800b31a <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800b454:	bf00      	nop
 800b456:	e006      	b.n	800b466 <create_name+0x2d6>
 800b458:	0800ee74 	.word	0x0800ee74
 800b45c:	0800eef4 	.word	0x0800eef4
 800b460:	0800ee80 	.word	0x0800ee80
			if (si > di) break;			/* No extension */
 800b464:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2be5      	cmp	r3, #229	; 0xe5
 800b472:	d105      	bne.n	800b480 <create_name+0x2f0>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	2205      	movs	r2, #5
 800b47e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	2b08      	cmp	r3, #8
 800b484:	d104      	bne.n	800b490 <create_name+0x300>
 800b486:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b490:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b494:	f003 030c 	and.w	r3, r3, #12
 800b498:	2b0c      	cmp	r3, #12
 800b49a:	d005      	beq.n	800b4a8 <create_name+0x318>
 800b49c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4a0:	f003 0303 	and.w	r3, r3, #3
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d105      	bne.n	800b4b4 <create_name+0x324>
		cf |= NS_LFN;
 800b4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4ac:	f043 0302 	orr.w	r3, r3, #2
 800b4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d117      	bne.n	800b4f0 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b4c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4c4:	f003 0303 	and.w	r3, r3, #3
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d105      	bne.n	800b4d8 <create_name+0x348>
 800b4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4d0:	f043 0310 	orr.w	r3, r3, #16
 800b4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b4d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4dc:	f003 030c 	and.w	r3, r3, #12
 800b4e0:	2b04      	cmp	r3, #4
 800b4e2:	d105      	bne.n	800b4f0 <create_name+0x360>
 800b4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4e8:	f043 0308 	orr.w	r3, r3, #8
 800b4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	330b      	adds	r3, #11
 800b4fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b4fe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b500:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b502:	4618      	mov	r0, r3
 800b504:	3728      	adds	r7, #40	; 0x28
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop

0800b50c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b2f      	cmp	r3, #47	; 0x2f
 800b51c:	d003      	beq.n	800b526 <follow_path+0x1a>
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	2b5c      	cmp	r3, #92	; 0x5c
 800b524:	d102      	bne.n	800b52c <follow_path+0x20>
		path++;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b532:	461a      	mov	r2, r3
 800b534:	2300      	movs	r3, #0
 800b536:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b1f      	cmp	r3, #31
 800b53e:	d80c      	bhi.n	800b55a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800b540:	2100      	movs	r1, #0
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7fe fdf9 	bl	800a13a <dir_sdi>
 800b548:	4603      	mov	r3, r0
 800b54a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b552:	461a      	mov	r2, r3
 800b554:	2300      	movs	r3, #0
 800b556:	6153      	str	r3, [r2, #20]
 800b558:	e049      	b.n	800b5ee <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b55a:	463b      	mov	r3, r7
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f7ff fe16 	bl	800b190 <create_name>
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d13a      	bne.n	800b5e4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f7ff fa97 	bl	800aaa2 <dir_find>
 800b574:	4603      	mov	r3, r0
 800b576:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	7adb      	ldrb	r3, [r3, #11]
 800b582:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00a      	beq.n	800b5a0 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	2b04      	cmp	r3, #4
 800b58e:	d12b      	bne.n	800b5e8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	f003 0304 	and.w	r3, r3, #4
 800b596:	2b00      	cmp	r3, #0
 800b598:	d126      	bne.n	800b5e8 <follow_path+0xdc>
 800b59a:	2305      	movs	r3, #5
 800b59c:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b59e:	e023      	b.n	800b5e8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5a0:	7bbb      	ldrb	r3, [r7, #14]
 800b5a2:	f003 0304 	and.w	r3, r3, #4
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d120      	bne.n	800b5ec <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	330b      	adds	r3, #11
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	f003 0310 	and.w	r3, r3, #16
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d102      	bne.n	800b5c8 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800b5c2:	2305      	movs	r3, #5
 800b5c4:	73fb      	strb	r3, [r7, #15]
 800b5c6:	e012      	b.n	800b5ee <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68b9      	ldr	r1, [r7, #8]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff f817 	bl	800a606 <ld_clust>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5e0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5e2:	e7ba      	b.n	800b55a <follow_path+0x4e>
			if (res != FR_OK) break;
 800b5e4:	bf00      	nop
 800b5e6:	e002      	b.n	800b5ee <follow_path+0xe2>
				break;
 800b5e8:	bf00      	nop
 800b5ea:	e000      	b.n	800b5ee <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5ec:	bf00      	nop
		}
	}

	return res;
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b600:	f04f 33ff 	mov.w	r3, #4294967295
 800b604:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d031      	beq.n	800b672 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	e002      	b.n	800b61c <get_ldnumber+0x24>
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	3301      	adds	r3, #1
 800b61a:	617b      	str	r3, [r7, #20]
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b1f      	cmp	r3, #31
 800b622:	d903      	bls.n	800b62c <get_ldnumber+0x34>
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	2b3a      	cmp	r3, #58	; 0x3a
 800b62a:	d1f4      	bne.n	800b616 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	2b3a      	cmp	r3, #58	; 0x3a
 800b632:	d11c      	bne.n	800b66e <get_ldnumber+0x76>
			tp = *path;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	60fa      	str	r2, [r7, #12]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	3b30      	subs	r3, #48	; 0x30
 800b644:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2b09      	cmp	r3, #9
 800b64a:	d80e      	bhi.n	800b66a <get_ldnumber+0x72>
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	429a      	cmp	r2, r3
 800b652:	d10a      	bne.n	800b66a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d107      	bne.n	800b66a <get_ldnumber+0x72>
					vol = (int)i;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	3301      	adds	r3, #1
 800b662:	617b      	str	r3, [r7, #20]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	e002      	b.n	800b674 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b66e:	2300      	movs	r3, #0
 800b670:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b672:	693b      	ldr	r3, [r7, #16]
}
 800b674:	4618      	mov	r0, r3
 800b676:	371c      	adds	r7, #28
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b690:	2200      	movs	r2, #0
 800b692:	711a      	strb	r2, [r3, #4]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b69a:	461a      	mov	r2, r3
 800b69c:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a0:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7fe f899 	bl	80097dc <move_window>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <check_fs+0x34>
		return 3;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e04a      	b.n	800b74a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	b21a      	sxth	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b6c8:	b21b      	sxth	r3, r3
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	b21b      	sxth	r3, r3
 800b6ce:	4a21      	ldr	r2, [pc, #132]	; (800b754 <check_fs+0xd4>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d001      	beq.n	800b6d8 <check_fs+0x58>
		return 2;
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	e038      	b.n	800b74a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	3336      	adds	r3, #54	; 0x36
 800b6dc:	3303      	adds	r3, #3
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	061a      	lsls	r2, r3, #24
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3336      	adds	r3, #54	; 0x36
 800b6e6:	3302      	adds	r3, #2
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	041b      	lsls	r3, r3, #16
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	3236      	adds	r2, #54	; 0x36
 800b6f2:	3201      	adds	r2, #1
 800b6f4:	7812      	ldrb	r2, [r2, #0]
 800b6f6:	0212      	lsls	r2, r2, #8
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b700:	4313      	orrs	r3, r2
 800b702:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b706:	4a14      	ldr	r2, [pc, #80]	; (800b758 <check_fs+0xd8>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d101      	bne.n	800b710 <check_fs+0x90>
		return 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	e01c      	b.n	800b74a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	3352      	adds	r3, #82	; 0x52
 800b714:	3303      	adds	r3, #3
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	061a      	lsls	r2, r3, #24
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3352      	adds	r3, #82	; 0x52
 800b71e:	3302      	adds	r3, #2
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	041b      	lsls	r3, r3, #16
 800b724:	4313      	orrs	r3, r2
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	3252      	adds	r2, #82	; 0x52
 800b72a:	3201      	adds	r2, #1
 800b72c:	7812      	ldrb	r2, [r2, #0]
 800b72e:	0212      	lsls	r2, r2, #8
 800b730:	4313      	orrs	r3, r2
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b738:	4313      	orrs	r3, r2
 800b73a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b73e:	4a06      	ldr	r2, [pc, #24]	; (800b758 <check_fs+0xd8>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d101      	bne.n	800b748 <check_fs+0xc8>
		return 0;
 800b744:	2300      	movs	r3, #0
 800b746:	e000      	b.n	800b74a <check_fs+0xca>

	return 1;
 800b748:	2301      	movs	r3, #1
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	ffffaa55 	.word	0xffffaa55
 800b758:	00544146 	.word	0x00544146

0800b75c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b096      	sub	sp, #88	; 0x58
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	4613      	mov	r3, r2
 800b768:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b770:	68b8      	ldr	r0, [r7, #8]
 800b772:	f7ff ff41 	bl	800b5f8 <get_ldnumber>
 800b776:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	da01      	bge.n	800b782 <find_volume+0x26>
 800b77e:	230b      	movs	r3, #11
 800b780:	e311      	b.n	800bda6 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b782:	4a98      	ldr	r2, [pc, #608]	; (800b9e4 <find_volume+0x288>)
 800b784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b78a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <find_volume+0x3a>
 800b792:	230c      	movs	r3, #12
 800b794:	e307      	b.n	800bda6 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b79a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d01c      	beq.n	800b7e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ae:	785b      	ldrb	r3, [r3, #1]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fd fce7 	bl	8009184 <disk_status>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b7bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10c      	bne.n	800b7e2 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d007      	beq.n	800b7de <find_volume+0x82>
 800b7ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b7da:	230a      	movs	r3, #10
 800b7dc:	e2e3      	b.n	800bda6 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e2e1      	b.n	800bda6 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7fe:	785b      	ldrb	r3, [r3, #1]
 800b800:	4618      	mov	r0, r3
 800b802:	f7fd fcd9 	bl	80091b8 <disk_initialize>
 800b806:	4603      	mov	r3, r0
 800b808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b80c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b818:	2303      	movs	r3, #3
 800b81a:	e2c4      	b.n	800bda6 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b81c:	79fb      	ldrb	r3, [r7, #7]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d007      	beq.n	800b832 <find_volume+0xd6>
 800b822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b826:	f003 0304 	and.w	r3, r3, #4
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800b82e:	230a      	movs	r3, #10
 800b830:	e2b9      	b.n	800bda6 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800b832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b838:	7858      	ldrb	r0, [r3, #1]
 800b83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b840:	330a      	adds	r3, #10
 800b842:	461a      	mov	r2, r3
 800b844:	2102      	movs	r1, #2
 800b846:	f7fd fd1d 	bl	8009284 <disk_ioctl>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10d      	bne.n	800b86c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b856:	895b      	ldrh	r3, [r3, #10]
 800b858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b85c:	d306      	bcc.n	800b86c <find_volume+0x110>
 800b85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b864:	895b      	ldrh	r3, [r3, #10]
 800b866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b86a:	d901      	bls.n	800b870 <find_volume+0x114>
 800b86c:	2301      	movs	r3, #1
 800b86e:	e29a      	b.n	800bda6 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b874:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b876:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b878:	f7ff ff02 	bl	800b680 <check_fs>
 800b87c:	4603      	mov	r3, r0
 800b87e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b882:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b886:	2b01      	cmp	r3, #1
 800b888:	d153      	bne.n	800b932 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b88a:	2300      	movs	r3, #0
 800b88c:	643b      	str	r3, [r7, #64]	; 0x40
 800b88e:	e028      	b.n	800b8e2 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b894:	011b      	lsls	r3, r3, #4
 800b896:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b89a:	4413      	add	r3, r2
 800b89c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d012      	beq.n	800b8ce <find_volume+0x172>
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	330b      	adds	r3, #11
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	061a      	lsls	r2, r3, #24
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	330a      	adds	r3, #10
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	041b      	lsls	r3, r3, #16
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8bc:	3209      	adds	r2, #9
 800b8be:	7812      	ldrb	r2, [r2, #0]
 800b8c0:	0212      	lsls	r2, r2, #8
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c6:	3208      	adds	r2, #8
 800b8c8:	7812      	ldrb	r2, [r2, #0]
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	e000      	b.n	800b8d0 <find_volume+0x174>
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	3358      	adds	r3, #88	; 0x58
 800b8d6:	443b      	add	r3, r7
 800b8d8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8de:	3301      	adds	r3, #1
 800b8e0:	643b      	str	r3, [r7, #64]	; 0x40
 800b8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8e4:	2b03      	cmp	r3, #3
 800b8e6:	d9d3      	bls.n	800b890 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <find_volume+0x19c>
 800b8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	3358      	adds	r3, #88	; 0x58
 800b8fe:	443b      	add	r3, r7
 800b900:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b904:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d005      	beq.n	800b918 <find_volume+0x1bc>
 800b90c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b90e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b910:	f7ff feb6 	bl	800b680 <check_fs>
 800b914:	4603      	mov	r3, r0
 800b916:	e000      	b.n	800b91a <find_volume+0x1be>
 800b918:	2302      	movs	r3, #2
 800b91a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b91e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b922:	2b00      	cmp	r3, #0
 800b924:	d005      	beq.n	800b932 <find_volume+0x1d6>
 800b926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b928:	3301      	adds	r3, #1
 800b92a:	643b      	str	r3, [r7, #64]	; 0x40
 800b92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b92e:	2b03      	cmp	r3, #3
 800b930:	d9e2      	bls.n	800b8f8 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b932:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b936:	2b03      	cmp	r3, #3
 800b938:	d101      	bne.n	800b93e <find_volume+0x1e2>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e233      	b.n	800bda6 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b93e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <find_volume+0x1ee>
 800b946:	230d      	movs	r3, #13
 800b948:	e22d      	b.n	800bda6 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	7b1b      	ldrb	r3, [r3, #12]
 800b94e:	021b      	lsls	r3, r3, #8
 800b950:	b21a      	sxth	r2, r3
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	7adb      	ldrb	r3, [r3, #11]
 800b956:	b21b      	sxth	r3, r3
 800b958:	4313      	orrs	r3, r2
 800b95a:	b21a      	sxth	r2, r3
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b962:	895b      	ldrh	r3, [r3, #10]
 800b964:	b21b      	sxth	r3, r3
 800b966:	429a      	cmp	r2, r3
 800b968:	d001      	beq.n	800b96e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800b96a:	230d      	movs	r3, #13
 800b96c:	e21b      	b.n	800bda6 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	7ddb      	ldrb	r3, [r3, #23]
 800b972:	021b      	lsls	r3, r3, #8
 800b974:	b21a      	sxth	r2, r3
 800b976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b978:	7d9b      	ldrb	r3, [r3, #22]
 800b97a:	b21b      	sxth	r3, r3
 800b97c:	4313      	orrs	r3, r2
 800b97e:	b21b      	sxth	r3, r3
 800b980:	b29b      	uxth	r3, r3
 800b982:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b986:	2b00      	cmp	r3, #0
 800b988:	d112      	bne.n	800b9b0 <find_volume+0x254>
 800b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b990:	061a      	lsls	r2, r3, #24
 800b992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b994:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b998:	041b      	lsls	r3, r3, #16
 800b99a:	4313      	orrs	r3, r2
 800b99c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b99e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b9a2:	0212      	lsls	r2, r2, #8
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9a8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ba:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	7c1a      	ldrb	r2, [r3, #16]
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c6:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9ce:	78db      	ldrb	r3, [r3, #3]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d009      	beq.n	800b9e8 <find_volume+0x28c>
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9da:	78db      	ldrb	r3, [r3, #3]
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d003      	beq.n	800b9e8 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800b9e0:	230d      	movs	r3, #13
 800b9e2:	e1e0      	b.n	800bda6 <find_volume+0x64a>
 800b9e4:	2000364c 	.word	0x2000364c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9ee:	78db      	ldrb	r3, [r3, #3]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9f4:	fb02 f303 	mul.w	r3, r2, r3
 800b9f8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fc:	7b5a      	ldrb	r2, [r3, #13]
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba04:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800ba06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba0c:	789b      	ldrb	r3, [r3, #2]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00c      	beq.n	800ba2c <find_volume+0x2d0>
 800ba12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba18:	789b      	ldrb	r3, [r3, #2]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba22:	789b      	ldrb	r3, [r3, #2]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	4013      	ands	r3, r2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800ba2c:	230d      	movs	r3, #13
 800ba2e:	e1ba      	b.n	800bda6 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800ba30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba32:	7c9b      	ldrb	r3, [r3, #18]
 800ba34:	021b      	lsls	r3, r3, #8
 800ba36:	b21a      	sxth	r2, r3
 800ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3a:	7c5b      	ldrb	r3, [r3, #17]
 800ba3c:	b21b      	sxth	r3, r3
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	b21b      	sxth	r3, r3
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba4a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba52:	891b      	ldrh	r3, [r3, #8]
 800ba54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba5a:	8952      	ldrh	r2, [r2, #10]
 800ba5c:	0952      	lsrs	r2, r2, #5
 800ba5e:	b292      	uxth	r2, r2
 800ba60:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba64:	fb01 f202 	mul.w	r2, r1, r2
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800ba70:	230d      	movs	r3, #13
 800ba72:	e198      	b.n	800bda6 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba76:	7d1b      	ldrb	r3, [r3, #20]
 800ba78:	021b      	lsls	r3, r3, #8
 800ba7a:	b21a      	sxth	r2, r3
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7e:	7cdb      	ldrb	r3, [r3, #19]
 800ba80:	b21b      	sxth	r3, r3
 800ba82:	4313      	orrs	r3, r2
 800ba84:	b21b      	sxth	r3, r3
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800ba8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d112      	bne.n	800bab6 <find_volume+0x35a>
 800ba90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba92:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ba96:	061a      	lsls	r2, r3, #24
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ba9e:	041b      	lsls	r3, r3, #16
 800baa0:	4313      	orrs	r3, r2
 800baa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baa4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800baa8:	0212      	lsls	r2, r2, #8
 800baaa:	4313      	orrs	r3, r2
 800baac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baae:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	7bdb      	ldrb	r3, [r3, #15]
 800baba:	021b      	lsls	r3, r3, #8
 800babc:	b21a      	sxth	r2, r3
 800babe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac0:	7b9b      	ldrb	r3, [r3, #14]
 800bac2:	b21b      	sxth	r3, r3
 800bac4:	4313      	orrs	r3, r2
 800bac6:	b21b      	sxth	r3, r3
 800bac8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800baca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <find_volume+0x378>
 800bad0:	230d      	movs	r3, #13
 800bad2:	e168      	b.n	800bda6 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800bad4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad8:	4413      	add	r3, r2
 800bada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800badc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bae0:	8911      	ldrh	r1, [r2, #8]
 800bae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bae4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bae8:	8952      	ldrh	r2, [r2, #10]
 800baea:	0952      	lsrs	r2, r2, #5
 800baec:	b292      	uxth	r2, r2
 800baee:	fbb1 f2f2 	udiv	r2, r1, r2
 800baf2:	b292      	uxth	r2, r2
 800baf4:	4413      	add	r3, r2
 800baf6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800baf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d201      	bcs.n	800bb04 <find_volume+0x3a8>
 800bb00:	230d      	movs	r3, #13
 800bb02:	e150      	b.n	800bda6 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800bb04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb10:	7892      	ldrb	r2, [r2, #2]
 800bb12:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb16:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <find_volume+0x3c6>
 800bb1e:	230d      	movs	r3, #13
 800bb20:	e141      	b.n	800bda6 <find_volume+0x64a>
	fmt = FS_FAT12;
 800bb22:	2301      	movs	r3, #1
 800bb24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d902      	bls.n	800bb38 <find_volume+0x3dc>
 800bb32:	2302      	movs	r3, #2
 800bb34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d902      	bls.n	800bb48 <find_volume+0x3ec>
 800bb42:	2303      	movs	r3, #3
 800bb44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	3302      	adds	r3, #2
 800bb4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb52:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800bb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb5e:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800bb60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb64:	4413      	add	r3, r2
 800bb66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb6c:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800bb6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	4413      	add	r3, r2
 800bb74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb7a:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800bb7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d124      	bne.n	800bbce <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800bb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb8a:	891b      	ldrh	r3, [r3, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <find_volume+0x438>
 800bb90:	230d      	movs	r3, #13
 800bb92:	e108      	b.n	800bda6 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800bb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb9a:	061a      	lsls	r2, r3, #24
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800bba2:	041b      	lsls	r3, r3, #16
 800bba4:	4313      	orrs	r3, r2
 800bba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bba8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800bbac:	0212      	lsls	r2, r2, #8
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbb2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbbe:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	647b      	str	r3, [r7, #68]	; 0x44
 800bbcc:	e02b      	b.n	800bc26 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800bbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbd4:	891b      	ldrh	r3, [r3, #8]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <find_volume+0x482>
 800bbda:	230d      	movs	r3, #13
 800bbdc:	e0e3      	b.n	800bda6 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800bbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbe4:	6a1a      	ldr	r2, [r3, #32]
 800bbe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe8:	4413      	add	r3, r2
 800bbea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbf0:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bbf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d105      	bne.n	800bc06 <find_volume+0x4aa>
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	005b      	lsls	r3, r3, #1
 800bc04:	e00e      	b.n	800bc24 <find_volume+0x4c8>
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0c:	695a      	ldr	r2, [r3, #20]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	005b      	lsls	r3, r3, #1
 800bc12:	4413      	add	r3, r2
 800bc14:	085a      	lsrs	r2, r3, #1
 800bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800bc24:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800bc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc2c:	699a      	ldr	r2, [r3, #24]
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc34:	895b      	ldrh	r3, [r3, #10]
 800bc36:	4619      	mov	r1, r3
 800bc38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc40:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800bc44:	8949      	ldrh	r1, [r1, #10]
 800bc46:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d201      	bcs.n	800bc52 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800bc4e:	230d      	movs	r3, #13
 800bc50:	e0a9      	b.n	800bda6 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc5e:	6113      	str	r3, [r2, #16]
 800bc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bc6e:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800bc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc76:	2280      	movs	r2, #128	; 0x80
 800bc78:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800bc7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d17a      	bne.n	800bd78 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800bc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc88:	021b      	lsls	r3, r3, #8
 800bc8a:	b21a      	sxth	r2, r3
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc92:	b21b      	sxth	r3, r3
 800bc94:	4313      	orrs	r3, r2
 800bc96:	b21b      	sxth	r3, r3
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d16d      	bne.n	800bd78 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800bc9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc9e:	3301      	adds	r3, #1
 800bca0:	4619      	mov	r1, r3
 800bca2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bca4:	f7fd fd9a 	bl	80097dc <move_window>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d164      	bne.n	800bd78 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcba:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800bcbe:	021b      	lsls	r3, r3, #8
 800bcc0:	b21a      	sxth	r2, r3
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800bcc8:	b21b      	sxth	r3, r3
 800bcca:	4313      	orrs	r3, r2
 800bccc:	b21b      	sxth	r3, r3
 800bcce:	4a38      	ldr	r2, [pc, #224]	; (800bdb0 <find_volume+0x654>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d151      	bne.n	800bd78 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd6:	78db      	ldrb	r3, [r3, #3]
 800bcd8:	061a      	lsls	r2, r3, #24
 800bcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcdc:	789b      	ldrb	r3, [r3, #2]
 800bcde:	041b      	lsls	r3, r3, #16
 800bce0:	4313      	orrs	r3, r2
 800bce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bce4:	7852      	ldrb	r2, [r2, #1]
 800bce6:	0212      	lsls	r2, r2, #8
 800bce8:	4313      	orrs	r3, r2
 800bcea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcec:	7812      	ldrb	r2, [r2, #0]
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	4a30      	ldr	r2, [pc, #192]	; (800bdb4 <find_volume+0x658>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d140      	bne.n	800bd78 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf8:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800bcfc:	061a      	lsls	r2, r3, #24
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd00:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800bd04:	041b      	lsls	r3, r3, #16
 800bd06:	4313      	orrs	r3, r2
 800bd08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd0a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800bd0e:	0212      	lsls	r2, r2, #8
 800bd10:	4313      	orrs	r3, r2
 800bd12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd14:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	4a27      	ldr	r2, [pc, #156]	; (800bdb8 <find_volume+0x65c>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d12b      	bne.n	800bd78 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800bd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd22:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800bd26:	061a      	lsls	r2, r3, #24
 800bd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800bd2e:	041b      	lsls	r3, r3, #16
 800bd30:	4313      	orrs	r3, r2
 800bd32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd34:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800bd38:	0212      	lsls	r2, r2, #8
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd3e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800bd42:	4313      	orrs	r3, r2
 800bd44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd4a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800bd52:	061a      	lsls	r2, r3, #24
 800bd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd56:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800bd5a:	041b      	lsls	r3, r3, #16
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd60:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800bd64:	0212      	lsls	r2, r2, #8
 800bd66:	4313      	orrs	r3, r2
 800bd68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd6a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd76:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800bd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd7e:	461a      	mov	r2, r3
 800bd80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd84:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800bd86:	4b0d      	ldr	r3, [pc, #52]	; (800bdbc <find_volume+0x660>)
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	4b0b      	ldr	r3, [pc, #44]	; (800bdbc <find_volume+0x660>)
 800bd90:	801a      	strh	r2, [r3, #0]
 800bd92:	4b0a      	ldr	r3, [pc, #40]	; (800bdbc <find_volume+0x660>)
 800bd94:	881a      	ldrh	r2, [r3, #0]
 800bd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd9c:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800bd9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bda0:	f7fd fca0 	bl	80096e4 <clear_lock>
#endif

	return FR_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3758      	adds	r7, #88	; 0x58
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	ffffaa55 	.word	0xffffaa55
 800bdb4:	41615252 	.word	0x41615252
 800bdb8:	61417272 	.word	0x61417272
 800bdbc:	20003650 	.word	0x20003650

0800bdc0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d02a      	beq.n	800be28 <validate+0x68>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d024      	beq.n	800be28 <validate+0x68>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d01b      	beq.n	800be28 <validate+0x68>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdfc:	88da      	ldrh	r2, [r3, #6]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be04:	889b      	ldrh	r3, [r3, #4]
 800be06:	429a      	cmp	r2, r3
 800be08:	d10e      	bne.n	800be28 <validate+0x68>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be16:	785b      	ldrb	r3, [r3, #1]
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fd f9b3 	bl	8009184 <disk_status>
 800be1e:	4603      	mov	r3, r0
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <validate+0x6c>
		return FR_INVALID_OBJECT;
 800be28:	2309      	movs	r3, #9
 800be2a:	e000      	b.n	800be2e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
	...

0800be38 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	4613      	mov	r3, r2
 800be44:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800be4a:	f107 0310 	add.w	r3, r7, #16
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff fbd2 	bl	800b5f8 <get_ldnumber>
 800be54:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	da01      	bge.n	800be60 <f_mount+0x28>
 800be5c:	230b      	movs	r3, #11
 800be5e:	e02f      	b.n	800bec0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800be60:	4a19      	ldr	r2, [pc, #100]	; (800bec8 <f_mount+0x90>)
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be68:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d007      	beq.n	800be80 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800be70:	69b8      	ldr	r0, [r7, #24]
 800be72:	f7fd fc37 	bl	80096e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be7c:	2200      	movs	r2, #0
 800be7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be8c:	2200      	movs	r2, #0
 800be8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	490d      	ldr	r1, [pc, #52]	; (800bec8 <f_mount+0x90>)
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <f_mount+0x6e>
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d001      	beq.n	800beaa <f_mount+0x72>
 800bea6:	2300      	movs	r3, #0
 800bea8:	e00a      	b.n	800bec0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800beaa:	f107 0108 	add.w	r1, r7, #8
 800beae:	f107 030c 	add.w	r3, r7, #12
 800beb2:	2200      	movs	r2, #0
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7ff fc51 	bl	800b75c <find_volume>
 800beba:	4603      	mov	r3, r0
 800bebc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bebe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3720      	adds	r7, #32
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	2000364c 	.word	0x2000364c

0800becc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800beda:	f843 0c4c 	str.w	r0, [r3, #-76]
 800bede:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bee2:	f843 1c50 	str.w	r1, [r3, #-80]
 800bee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800beea:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800beee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bef2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d101      	bne.n	800befe <f_open+0x32>
 800befa:	2309      	movs	r3, #9
 800befc:	e2f7      	b.n	800c4ee <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800befe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf02:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bf06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800bf10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf14:	461a      	mov	r2, r3
 800bf16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf1a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bf1e:	f003 031f 	and.w	r3, r3, #31
 800bf22:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800bf26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf2a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bf2e:	f023 0301 	bic.w	r3, r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	f107 0118 	add.w	r1, r7, #24
 800bf38:	3910      	subs	r1, #16
 800bf3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bf3e:	3b18      	subs	r3, #24
 800bf40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff fc09 	bl	800b75c <find_volume>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bf50:	f102 0217 	add.w	r2, r2, #23
 800bf54:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800bf56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf5a:	f103 0317 	add.w	r3, r3, #23
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f040 82bf 	bne.w	800c4e4 <f_open+0x618>
		INIT_BUF(dj);
 800bf66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	f107 0318 	add.w	r3, r7, #24
 800bf70:	3b04      	subs	r3, #4
 800bf72:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800bf76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	4bd4      	ldr	r3, [pc, #848]	; (800c2d0 <f_open+0x404>)
 800bf7e:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800bf82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf86:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800bf8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bf8e:	3b18      	subs	r3, #24
 800bf90:	4611      	mov	r1, r2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7ff faba 	bl	800b50c <follow_path>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bf9e:	f102 0217 	add.w	r2, r2, #23
 800bfa2:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800bfa4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bfa8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800bfac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bfb0:	f102 0210 	add.w	r2, r2, #16
 800bfb4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bfb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bfba:	f103 0317 	add.w	r3, r3, #23
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d126      	bne.n	800c012 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800bfc4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bfc8:	f103 0310 	add.w	r3, r3, #16
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d106      	bne.n	800bfe0 <f_open+0x114>
				res = FR_INVALID_NAME;
 800bfd2:	2306      	movs	r3, #6
 800bfd4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bfd8:	f102 0217 	add.w	r2, r2, #23
 800bfdc:	7013      	strb	r3, [r2, #0]
 800bfde:	e018      	b.n	800c012 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bfe0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bfe4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bfe8:	f023 0301 	bic.w	r3, r3, #1
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	bf14      	ite	ne
 800bff0:	2301      	movne	r3, #1
 800bff2:	2300      	moveq	r3, #0
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	461a      	mov	r2, r3
 800bff8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bffc:	3b18      	subs	r3, #24
 800bffe:	4611      	mov	r1, r2
 800c000:	4618      	mov	r0, r3
 800c002:	f7fd f9d9 	bl	80093b8 <chk_lock>
 800c006:	4603      	mov	r3, r0
 800c008:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c00c:	f102 0217 	add.w	r2, r2, #23
 800c010:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c016:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c01a:	f003 031c 	and.w	r3, r3, #28
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 813c 	beq.w	800c29c <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800c024:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c028:	f103 0317 	add.w	r3, r3, #23
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d02e      	beq.n	800c090 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800c032:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c036:	f103 0317 	add.w	r3, r3, #23
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	2b04      	cmp	r3, #4
 800c03e:	d112      	bne.n	800c066 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c040:	f7fd fa2a 	bl	8009498 <enq_lock>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d007      	beq.n	800c05a <f_open+0x18e>
 800c04a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c04e:	3b18      	subs	r3, #24
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe fea5 	bl	800ada0 <dir_register>
 800c056:	4603      	mov	r3, r0
 800c058:	e000      	b.n	800c05c <f_open+0x190>
 800c05a:	2312      	movs	r3, #18
 800c05c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c060:	f102 0217 	add.w	r2, r2, #23
 800c064:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c066:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c06a:	461a      	mov	r2, r3
 800c06c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c070:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c074:	f043 0308 	orr.w	r3, r3, #8
 800c078:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800c07c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c080:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800c084:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c088:	f102 0210 	add.w	r2, r2, #16
 800c08c:	6013      	str	r3, [r2, #0]
 800c08e:	e01f      	b.n	800c0d0 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c090:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c094:	f103 0310 	add.w	r3, r3, #16
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	330b      	adds	r3, #11
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	f003 0311 	and.w	r3, r3, #17
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d006      	beq.n	800c0b4 <f_open+0x1e8>
					res = FR_DENIED;
 800c0a6:	2307      	movs	r3, #7
 800c0a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c0ac:	f102 0217 	add.w	r2, r2, #23
 800c0b0:	7013      	strb	r3, [r2, #0]
 800c0b2:	e00d      	b.n	800c0d0 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800c0b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c0b8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c0bc:	f003 0304 	and.w	r3, r3, #4
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d005      	beq.n	800c0d0 <f_open+0x204>
						res = FR_EXIST;
 800c0c4:	2308      	movs	r3, #8
 800c0c6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c0ca:	f102 0217 	add.w	r2, r2, #23
 800c0ce:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c0d0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c0d4:	f103 0317 	add.w	r3, r3, #23
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f040 8113 	bne.w	800c306 <f_open+0x43a>
 800c0e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c0e4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c0e8:	f003 0308 	and.w	r3, r3, #8
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f000 810a 	beq.w	800c306 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800c0f2:	f7fc ffe9 	bl	80090c8 <get_fattime>
 800c0f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c0fa:	f103 030c 	add.w	r3, r3, #12
 800c0fe:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800c100:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c104:	f103 0310 	add.w	r3, r3, #16
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	330e      	adds	r3, #14
 800c10c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c110:	f102 020c 	add.w	r2, r2, #12
 800c114:	6812      	ldr	r2, [r2, #0]
 800c116:	b2d2      	uxtb	r2, r2
 800c118:	701a      	strb	r2, [r3, #0]
 800c11a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c11e:	f103 030c 	add.w	r3, r3, #12
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	b29b      	uxth	r3, r3
 800c126:	0a1b      	lsrs	r3, r3, #8
 800c128:	b29a      	uxth	r2, r3
 800c12a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c12e:	f103 0310 	add.w	r3, r3, #16
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	330f      	adds	r3, #15
 800c136:	b2d2      	uxtb	r2, r2
 800c138:	701a      	strb	r2, [r3, #0]
 800c13a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c13e:	f103 030c 	add.w	r3, r3, #12
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	0c1a      	lsrs	r2, r3, #16
 800c146:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c14a:	f103 0310 	add.w	r3, r3, #16
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3310      	adds	r3, #16
 800c152:	b2d2      	uxtb	r2, r2
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c15a:	f103 030c 	add.w	r3, r3, #12
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	0e1a      	lsrs	r2, r3, #24
 800c162:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c166:	f103 0310 	add.w	r3, r3, #16
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3311      	adds	r3, #17
 800c16e:	b2d2      	uxtb	r2, r2
 800c170:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800c172:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c176:	f103 0310 	add.w	r3, r3, #16
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	330b      	adds	r3, #11
 800c17e:	2200      	movs	r2, #0
 800c180:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800c182:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c186:	f103 0310 	add.w	r3, r3, #16
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	331c      	adds	r3, #28
 800c18e:	2200      	movs	r2, #0
 800c190:	701a      	strb	r2, [r3, #0]
 800c192:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c196:	f103 0310 	add.w	r3, r3, #16
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	331d      	adds	r3, #29
 800c19e:	2200      	movs	r2, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c1a6:	f103 0310 	add.w	r3, r3, #16
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	331e      	adds	r3, #30
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	701a      	strb	r2, [r3, #0]
 800c1b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c1b6:	f103 0310 	add.w	r3, r3, #16
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	331f      	adds	r3, #31
 800c1be:	2200      	movs	r2, #0
 800c1c0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800c1c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c1c6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c1ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c1ce:	f102 0210 	add.w	r2, r2, #16
 800c1d2:	6811      	ldr	r1, [r2, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe fa16 	bl	800a606 <ld_clust>
 800c1da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c1de:	f103 0308 	add.w	r3, r3, #8
 800c1e2:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c1ea:	f103 0310 	add.w	r3, r3, #16
 800c1ee:	6818      	ldr	r0, [r3, #0]
 800c1f0:	f7fe fa38 	bl	800a664 <st_clust>
				dj.fs->wflag = 1;
 800c1f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c1f8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c200:	2201      	movs	r2, #1
 800c202:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800c204:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c208:	f103 0308 	add.w	r3, r3, #8
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d079      	beq.n	800c306 <f_open+0x43a>
					dw = dj.fs->winsect;
 800c212:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c216:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c220:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c224:	f102 020c 	add.w	r2, r2, #12
 800c228:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800c22a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c22e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c232:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c236:	f102 0208 	add.w	r2, r2, #8
 800c23a:	6811      	ldr	r1, [r2, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fd fe32 	bl	8009ea6 <remove_chain>
 800c242:	4603      	mov	r3, r0
 800c244:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c248:	f102 0217 	add.w	r2, r2, #23
 800c24c:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800c24e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c252:	f103 0317 	add.w	r3, r3, #23
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d154      	bne.n	800c306 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800c25c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c260:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800c264:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c268:	f103 0308 	add.w	r3, r3, #8
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	3b01      	subs	r3, #1
 800c270:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c274:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800c276:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c27a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c27e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c282:	f102 020c 	add.w	r2, r2, #12
 800c286:	6811      	ldr	r1, [r2, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fd faa7 	bl	80097dc <move_window>
 800c28e:	4603      	mov	r3, r0
 800c290:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c294:	f102 0217 	add.w	r2, r2, #23
 800c298:	7013      	strb	r3, [r2, #0]
 800c29a:	e034      	b.n	800c306 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800c29c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c2a0:	f103 0317 	add.w	r3, r3, #23
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d12d      	bne.n	800c306 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800c2aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c2ae:	f103 0310 	add.w	r3, r3, #16
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	330b      	adds	r3, #11
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	f003 0310 	and.w	r3, r3, #16
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d009      	beq.n	800c2d4 <f_open+0x408>
					res = FR_NO_FILE;
 800c2c0:	2304      	movs	r3, #4
 800c2c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c2c6:	f102 0217 	add.w	r2, r2, #23
 800c2ca:	7013      	strb	r3, [r2, #0]
 800c2cc:	e01b      	b.n	800c306 <f_open+0x43a>
 800c2ce:	bf00      	nop
 800c2d0:	2000366c 	.word	0x2000366c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800c2d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c2d8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c2dc:	f003 0302 	and.w	r3, r3, #2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d010      	beq.n	800c306 <f_open+0x43a>
 800c2e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c2e8:	f103 0310 	add.w	r3, r3, #16
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	330b      	adds	r3, #11
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d005      	beq.n	800c306 <f_open+0x43a>
						res = FR_DENIED;
 800c2fa:	2307      	movs	r3, #7
 800c2fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c300:	f102 0217 	add.w	r2, r2, #23
 800c304:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800c306:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c30a:	f103 0317 	add.w	r3, r3, #23
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d157      	bne.n	800c3c4 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c314:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c318:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c31c:	f003 0308 	and.w	r3, r3, #8
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00a      	beq.n	800c33a <f_open+0x46e>
				mode |= FA__WRITTEN;
 800c324:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c328:	461a      	mov	r2, r3
 800c32a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c32e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c332:	f043 0320 	orr.w	r3, r3, #32
 800c336:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800c33a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c33e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c348:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c34c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800c350:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c354:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800c356:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c35a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c362:	461a      	mov	r2, r3
 800c364:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c368:	f103 0310 	add.w	r3, r3, #16
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c370:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c374:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c378:	f023 0301 	bic.w	r3, r3, #1
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	bf14      	ite	ne
 800c380:	2301      	movne	r3, #1
 800c382:	2300      	moveq	r3, #0
 800c384:	b2db      	uxtb	r3, r3
 800c386:	461a      	mov	r2, r3
 800c388:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c38c:	3b18      	subs	r3, #24
 800c38e:	4611      	mov	r1, r2
 800c390:	4618      	mov	r0, r3
 800c392:	f7fd f8a5 	bl	80094e0 <inc_lock>
 800c396:	4602      	mov	r2, r0
 800c398:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c39c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3a4:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800c3a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c3aa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c3ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d105      	bne.n	800c3c4 <f_open+0x4f8>
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c3be:	f102 0217 	add.w	r2, r2, #23
 800c3c2:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800c3c4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c3c8:	f103 0317 	add.w	r3, r3, #23
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f040 8088 	bne.w	800c4e4 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800c3d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c3d8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c3e6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c3ea:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800c3ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c3f0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800c3fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c400:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c404:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c408:	f102 0210 	add.w	r2, r2, #16
 800c40c:	6811      	ldr	r1, [r2, #0]
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fe f8f9 	bl	800a606 <ld_clust>
 800c414:	4602      	mov	r2, r0
 800c416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c41a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c422:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800c424:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c428:	f103 0310 	add.w	r3, r3, #16
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	331f      	adds	r3, #31
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	061a      	lsls	r2, r3, #24
 800c434:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c438:	f103 0310 	add.w	r3, r3, #16
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	331e      	adds	r3, #30
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	041b      	lsls	r3, r3, #16
 800c444:	4313      	orrs	r3, r2
 800c446:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c44a:	f102 0210 	add.w	r2, r2, #16
 800c44e:	6812      	ldr	r2, [r2, #0]
 800c450:	321d      	adds	r2, #29
 800c452:	7812      	ldrb	r2, [r2, #0]
 800c454:	0212      	lsls	r2, r2, #8
 800c456:	4313      	orrs	r3, r2
 800c458:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c45c:	f102 0210 	add.w	r2, r2, #16
 800c460:	6812      	ldr	r2, [r2, #0]
 800c462:	321c      	adds	r2, #28
 800c464:	7812      	ldrb	r2, [r2, #0]
 800c466:	4313      	orrs	r3, r2
 800c468:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c46c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800c470:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c474:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800c476:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c47a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c482:	461a      	mov	r2, r3
 800c484:	2300      	movs	r3, #0
 800c486:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800c488:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c48c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c494:	461a      	mov	r2, r3
 800c496:	2300      	movs	r3, #0
 800c498:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800c49a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c49e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c4a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800c4ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c4b0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c4b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c4b8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800c4bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c4c0:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800c4c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c4c6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4d4:	88da      	ldrh	r2, [r3, #6]
 800c4d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c4da:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c4de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e2:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800c4e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c4e8:	f103 0317 	add.w	r3, r3, #23
 800c4ec:	781b      	ldrb	r3, [r3, #0]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop

0800c4fc <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08c      	sub	sp, #48	; 0x30
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
 800c508:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	2200      	movs	r2, #0
 800c512:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f7ff fc53 	bl	800bdc0 <validate>
 800c51a:	4603      	mov	r3, r0
 800c51c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c51e:	7ffb      	ldrb	r3, [r7, #31]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d001      	beq.n	800c528 <f_read+0x2c>
 800c524:	7ffb      	ldrb	r3, [r7, #31]
 800c526:	e1cd      	b.n	800c8c4 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c52e:	79db      	ldrb	r3, [r3, #7]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d004      	beq.n	800c53e <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c53a:	79db      	ldrb	r3, [r3, #7]
 800c53c:	e1c2      	b.n	800c8c4 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c544:	799b      	ldrb	r3, [r3, #6]
 800c546:	f003 0301 	and.w	r3, r3, #1
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d101      	bne.n	800c552 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c54e:	2307      	movs	r3, #7
 800c550:	e1b8      	b.n	800c8c4 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c558:	68da      	ldr	r2, [r3, #12]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	f240 81a5 	bls.w	800c8ba <f_read+0x3be>
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c574:	e1a1      	b.n	800c8ba <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c584:	6812      	ldr	r2, [r2, #0]
 800c586:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c58a:	8952      	ldrh	r2, [r2, #10]
 800c58c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c590:	fb01 f202 	mul.w	r2, r1, r2
 800c594:	1a9b      	subs	r3, r3, r2
 800c596:	2b00      	cmp	r3, #0
 800c598:	f040 8140 	bne.w	800c81c <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c5aa:	6812      	ldr	r2, [r2, #0]
 800c5ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c5b0:	8952      	ldrh	r2, [r2, #10]
 800c5b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5c4:	789b      	ldrb	r3, [r3, #2]
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d143      	bne.n	800c65c <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d105      	bne.n	800c5ec <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5ea:	e01c      	b.n	800c626 <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d009      	beq.n	800c60c <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	4619      	mov	r1, r3
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f7fd fd58 	bl	800a0b8 <clmt_clust>
 800c608:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c60a:	e00c      	b.n	800c626 <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c61a:	695b      	ldr	r3, [r3, #20]
 800c61c:	4619      	mov	r1, r3
 800c61e:	4610      	mov	r0, r2
 800c620:	f7fd f9f2 	bl	8009a08 <get_fat>
 800c624:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800c626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d806      	bhi.n	800c63a <f_read+0x13e>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c632:	2202      	movs	r2, #2
 800c634:	71da      	strb	r2, [r3, #7]
 800c636:	2302      	movs	r3, #2
 800c638:	e144      	b.n	800c8c4 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c640:	d106      	bne.n	800c650 <f_read+0x154>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c648:	2201      	movs	r2, #1
 800c64a:	71da      	strb	r2, [r3, #7]
 800c64c:	2301      	movs	r3, #1
 800c64e:	e139      	b.n	800c8c4 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c656:	461a      	mov	r2, r3
 800c658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65a:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c66a:	695b      	ldr	r3, [r3, #20]
 800c66c:	4619      	mov	r1, r3
 800c66e:	4610      	mov	r0, r2
 800c670:	f7fd f9a5 	bl	80099be <clust2sect>
 800c674:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d106      	bne.n	800c68a <f_read+0x18e>
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c682:	2202      	movs	r2, #2
 800c684:	71da      	strb	r2, [r3, #7]
 800c686:	2302      	movs	r3, #2
 800c688:	e11c      	b.n	800c8c4 <f_read+0x3c8>
			sect += csect;
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	4413      	add	r3, r2
 800c690:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c69e:	895b      	ldrh	r3, [r3, #10]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6a8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d066      	beq.n	800c77e <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c6b0:	7dfa      	ldrb	r2, [r7, #23]
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b4:	4413      	add	r3, r2
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c6bc:	6812      	ldr	r2, [r2, #0]
 800c6be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c6c2:	7892      	ldrb	r2, [r2, #2]
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d90a      	bls.n	800c6de <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d4:	789b      	ldrb	r3, [r3, #2]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	7dfb      	ldrb	r3, [r7, #23]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ea:	7858      	ldrb	r0, [r3, #1]
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	6a39      	ldr	r1, [r7, #32]
 800c6f2:	f7fc fd87 	bl	8009204 <disk_read>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d006      	beq.n	800c70a <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c702:	2201      	movs	r2, #1
 800c704:	71da      	strb	r2, [r3, #7]
 800c706:	2301      	movs	r3, #1
 800c708:	e0dc      	b.n	800c8c4 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c710:	799b      	ldrb	r3, [r3, #6]
 800c712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c716:	2b00      	cmp	r3, #0
 800c718:	d024      	beq.n	800c764 <f_read+0x268>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c720:	699a      	ldr	r2, [r3, #24]
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c728:	429a      	cmp	r2, r3
 800c72a:	d91b      	bls.n	800c764 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	1ad3      	subs	r3, r2, r3
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c73e:	6812      	ldr	r2, [r2, #0]
 800c740:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c744:	8952      	ldrh	r2, [r2, #10]
 800c746:	fb02 f303 	mul.w	r3, r2, r3
 800c74a:	6a3a      	ldr	r2, [r7, #32]
 800c74c:	18d0      	adds	r0, r2, r3
 800c74e:	68f9      	ldr	r1, [r7, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c75c:	895b      	ldrh	r3, [r3, #10]
 800c75e:	461a      	mov	r2, r3
 800c760:	f7fc fdae 	bl	80092c0 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c770:	895b      	ldrh	r3, [r3, #10]
 800c772:	461a      	mov	r2, r3
 800c774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c776:	fb02 f303 	mul.w	r3, r2, r3
 800c77a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800c77c:	e085      	b.n	800c88a <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d041      	beq.n	800c810 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c792:	799b      	ldrb	r3, [r3, #6]
 800c794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d023      	beq.n	800c7e4 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7a8:	7858      	ldrb	r0, [r3, #1]
 800c7aa:	68f9      	ldr	r1, [r7, #12]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7b2:	699a      	ldr	r2, [r3, #24]
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	f7fc fd45 	bl	8009244 <disk_write>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d006      	beq.n	800c7ce <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	71da      	strb	r2, [r3, #7]
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e07a      	b.n	800c8c4 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7d4:	799b      	ldrb	r3, [r3, #6]
 800c7d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7da:	b2da      	uxtb	r2, r3
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7e2:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7f0:	7858      	ldrb	r0, [r3, #1]
 800c7f2:	68f9      	ldr	r1, [r7, #12]
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	f7fc fd04 	bl	8009204 <disk_read>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d006      	beq.n	800c810 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c808:	2201      	movs	r2, #1
 800c80a:	71da      	strb	r2, [r3, #7]
 800c80c:	2301      	movs	r3, #1
 800c80e:	e059      	b.n	800c8c4 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c816:	461a      	mov	r2, r3
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c828:	895b      	ldrh	r3, [r3, #10]
 800c82a:	4618      	mov	r0, r3
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c83a:	6812      	ldr	r2, [r2, #0]
 800c83c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c840:	8952      	ldrh	r2, [r2, #10]
 800c842:	fbb3 f1f2 	udiv	r1, r3, r2
 800c846:	fb01 f202 	mul.w	r2, r1, r2
 800c84a:	1a9b      	subs	r3, r3, r2
 800c84c:	1ac3      	subs	r3, r0, r3
 800c84e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800c850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	429a      	cmp	r2, r3
 800c856:	d901      	bls.n	800c85c <f_read+0x360>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c86a:	6812      	ldr	r2, [r2, #0]
 800c86c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c870:	8952      	ldrh	r2, [r2, #10]
 800c872:	fbb3 f1f2 	udiv	r1, r3, r2
 800c876:	fb01 f202 	mul.w	r2, r1, r2
 800c87a:	1a9b      	subs	r3, r3, r2
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	4413      	add	r3, r2
 800c880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c882:	4619      	mov	r1, r3
 800c884:	6a38      	ldr	r0, [r7, #32]
 800c886:	f7fc fd1b 	bl	80092c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c88a:	6a3a      	ldr	r2, [r7, #32]
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	4413      	add	r3, r2
 800c890:	623b      	str	r3, [r7, #32]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c898:	689a      	ldr	r2, [r3, #8]
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	4413      	add	r3, r2
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c8a4:	6093      	str	r3, [r2, #8]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	441a      	add	r2, r3
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	601a      	str	r2, [r3, #0]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f47f ae5a 	bne.w	800c576 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3730      	adds	r7, #48	; 0x30
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08a      	sub	sp, #40	; 0x28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f7ff fa6b 	bl	800bdc0 <validate>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <f_write+0x2c>
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	e21e      	b.n	800cd36 <f_write+0x46a>
	if (fp->err)							/* Check error */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8fe:	79db      	ldrb	r3, [r3, #7]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d004      	beq.n	800c90e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c90a:	79db      	ldrb	r3, [r3, #7]
 800c90c:	e213      	b.n	800cd36 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c914:	799b      	ldrb	r3, [r3, #6]
 800c916:	f003 0302 	and.w	r3, r3, #2
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c91e:	2307      	movs	r3, #7
 800c920:	e209      	b.n	800cd36 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c928:	689a      	ldr	r2, [r3, #8]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	441a      	add	r2, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	429a      	cmp	r2, r3
 800c938:	f080 81d9 	bcs.w	800ccee <f_write+0x422>
 800c93c:	2300      	movs	r3, #0
 800c93e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800c940:	e1d5      	b.n	800ccee <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c950:	6812      	ldr	r2, [r2, #0]
 800c952:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c956:	8952      	ldrh	r2, [r2, #10]
 800c958:	fbb3 f1f2 	udiv	r1, r3, r2
 800c95c:	fb01 f202 	mul.w	r2, r1, r2
 800c960:	1a9b      	subs	r3, r3, r2
 800c962:	2b00      	cmp	r3, #0
 800c964:	f040 8169 	bne.w	800cc3a <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c976:	6812      	ldr	r2, [r2, #0]
 800c978:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c97c:	8952      	ldrh	r2, [r2, #10]
 800c97e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c982:	b2da      	uxtb	r2, r3
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c990:	789b      	ldrb	r3, [r3, #2]
 800c992:	3b01      	subs	r3, #1
 800c994:	b2db      	uxtb	r3, r3
 800c996:	4013      	ands	r3, r2
 800c998:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800c99a:	7dbb      	ldrb	r3, [r7, #22]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d15f      	bne.n	800ca60 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d111      	bne.n	800c9d0 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d126      	bne.n	800ca0a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fd face 	bl	8009f68 <create_chain>
 800c9cc:	6278      	str	r0, [r7, #36]	; 0x24
 800c9ce:	e01c      	b.n	800ca0a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d009      	beq.n	800c9f0 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f7fd fb66 	bl	800a0b8 <clmt_clust>
 800c9ec:	6278      	str	r0, [r7, #36]	; 0x24
 800c9ee:	e00c      	b.n	800ca0a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9fe:	695b      	ldr	r3, [r3, #20]
 800ca00:	4619      	mov	r1, r3
 800ca02:	4610      	mov	r0, r2
 800ca04:	f7fd fab0 	bl	8009f68 <create_chain>
 800ca08:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f000 8173 	beq.w	800ccf8 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d106      	bne.n	800ca26 <f_write+0x15a>
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca1e:	2202      	movs	r2, #2
 800ca20:	71da      	strb	r2, [r3, #7]
 800ca22:	2302      	movs	r3, #2
 800ca24:	e187      	b.n	800cd36 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2c:	d106      	bne.n	800ca3c <f_write+0x170>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca34:	2201      	movs	r2, #1
 800ca36:	71da      	strb	r2, [r3, #7]
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e17c      	b.n	800cd36 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca42:	461a      	mov	r2, r3
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d105      	bne.n	800ca60 <f_write+0x194>
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca66:	799b      	ldrb	r3, [r3, #6]
 800ca68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d023      	beq.n	800cab8 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca7c:	7858      	ldrb	r0, [r3, #1]
 800ca7e:	68f9      	ldr	r1, [r7, #12]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca86:	699a      	ldr	r2, [r3, #24]
 800ca88:	2301      	movs	r3, #1
 800ca8a:	f7fc fbdb 	bl	8009244 <disk_write>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d006      	beq.n	800caa2 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	71da      	strb	r2, [r3, #7]
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e149      	b.n	800cd36 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caa8:	799b      	ldrb	r3, [r3, #6]
 800caaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cab6:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	4619      	mov	r1, r3
 800caca:	4610      	mov	r0, r2
 800cacc:	f7fc ff77 	bl	80099be <clust2sect>
 800cad0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d106      	bne.n	800cae6 <f_write+0x21a>
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cade:	2202      	movs	r2, #2
 800cae0:	71da      	strb	r2, [r3, #7]
 800cae2:	2302      	movs	r3, #2
 800cae4:	e127      	b.n	800cd36 <f_write+0x46a>
			sect += csect;
 800cae6:	7dbb      	ldrb	r3, [r7, #22]
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	4413      	add	r3, r2
 800caec:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cafa:	895b      	ldrh	r3, [r3, #10]
 800cafc:	461a      	mov	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb04:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d069      	beq.n	800cbe0 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800cb0c:	7dba      	ldrb	r2, [r7, #22]
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	4413      	add	r3, r2
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb18:	6812      	ldr	r2, [r2, #0]
 800cb1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb1e:	7892      	ldrb	r2, [r2, #2]
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d90a      	bls.n	800cb3a <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb30:	789b      	ldrb	r3, [r3, #2]
 800cb32:	461a      	mov	r2, r3
 800cb34:	7dbb      	ldrb	r3, [r7, #22]
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb46:	7858      	ldrb	r0, [r3, #1]
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	69b9      	ldr	r1, [r7, #24]
 800cb4e:	f7fc fb79 	bl	8009244 <disk_write>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d006      	beq.n	800cb66 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb5e:	2201      	movs	r2, #1
 800cb60:	71da      	strb	r2, [r3, #7]
 800cb62:	2301      	movs	r3, #1
 800cb64:	e0e7      	b.n	800cd36 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb6c:	699a      	ldr	r2, [r3, #24]
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	1ad3      	subs	r3, r2, r3
 800cb72:	69fa      	ldr	r2, [r7, #28]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d926      	bls.n	800cbc6 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb80:	699a      	ldr	r2, [r3, #24]
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	1ad3      	subs	r3, r2, r3
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb8c:	6812      	ldr	r2, [r2, #0]
 800cb8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb92:	8952      	ldrh	r2, [r2, #10]
 800cb94:	fb02 f303 	mul.w	r3, r2, r3
 800cb98:	69ba      	ldr	r2, [r7, #24]
 800cb9a:	18d1      	adds	r1, r2, r3
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba8:	895b      	ldrh	r3, [r3, #10]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	f7fc fb88 	bl	80092c0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb6:	799b      	ldrb	r3, [r3, #6]
 800cbb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbbc:	b2da      	uxtb	r2, r3
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbc4:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbd2:	895b      	ldrh	r3, [r3, #10]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	fb02 f303 	mul.w	r3, r2, r3
 800cbdc:	623b      	str	r3, [r7, #32]
				continue;
 800cbde:	e06e      	b.n	800ccbe <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d01f      	beq.n	800cc2e <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbf4:	689a      	ldr	r2, [r3, #8]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d215      	bcs.n	800cc2e <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc0e:	7858      	ldrb	r0, [r3, #1]
 800cc10:	68f9      	ldr	r1, [r7, #12]
 800cc12:	2301      	movs	r3, #1
 800cc14:	693a      	ldr	r2, [r7, #16]
 800cc16:	f7fc faf5 	bl	8009204 <disk_read>
 800cc1a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d006      	beq.n	800cc2e <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc26:	2201      	movs	r2, #1
 800cc28:	71da      	strb	r2, [r3, #7]
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e083      	b.n	800cd36 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc34:	461a      	mov	r2, r3
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc46:	895b      	ldrh	r3, [r3, #10]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cc58:	6812      	ldr	r2, [r2, #0]
 800cc5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cc5e:	8952      	ldrh	r2, [r2, #10]
 800cc60:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc64:	fb01 f202 	mul.w	r2, r1, r2
 800cc68:	1a9b      	subs	r3, r3, r2
 800cc6a:	1ac3      	subs	r3, r0, r3
 800cc6c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800cc6e:	6a3a      	ldr	r2, [r7, #32]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d901      	bls.n	800cc7a <f_write+0x3ae>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cc88:	6812      	ldr	r2, [r2, #0]
 800cc8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cc8e:	8952      	ldrh	r2, [r2, #10]
 800cc90:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc94:	fb01 f202 	mul.w	r2, r1, r2
 800cc98:	1a9b      	subs	r3, r3, r2
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	6a3a      	ldr	r2, [r7, #32]
 800cca0:	69b9      	ldr	r1, [r7, #24]
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fc fb0c 	bl	80092c0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccae:	799b      	ldrb	r3, [r3, #6]
 800ccb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccbc:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800ccbe:	69ba      	ldr	r2, [r7, #24]
 800ccc0:	6a3b      	ldr	r3, [r7, #32]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	61bb      	str	r3, [r7, #24]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cccc:	689a      	ldr	r2, [r3, #8]
 800ccce:	6a3b      	ldr	r3, [r7, #32]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ccd8:	6093      	str	r3, [r2, #8]
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	441a      	add	r2, r3
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f47f ae26 	bne.w	800c942 <f_write+0x76>
 800ccf6:	e000      	b.n	800ccfa <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ccf8:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd00:	689a      	ldr	r2, [r3, #8]
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d907      	bls.n	800cd1e <f_write+0x452>
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cd1c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd24:	799b      	ldrb	r3, [r3, #6]
 800cd26:	f043 0320 	orr.w	r3, r3, #32
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd32:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3728      	adds	r7, #40	; 0x28
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b086      	sub	sp, #24
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff f83a 	bl	800bdc0 <validate>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f040 80bc 	bne.w	800ced0 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd5e:	799b      	ldrb	r3, [r3, #6]
 800cd60:	f003 0320 	and.w	r3, r3, #32
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f000 80b3 	beq.w	800ced0 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd70:	799b      	ldrb	r3, [r3, #6]
 800cd72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d01e      	beq.n	800cdb8 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd86:	7858      	ldrb	r0, [r3, #1]
 800cd88:	6879      	ldr	r1, [r7, #4]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd90:	699a      	ldr	r2, [r3, #24]
 800cd92:	2301      	movs	r3, #1
 800cd94:	f7fc fa56 	bl	8009244 <disk_write>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e097      	b.n	800ced2 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cda8:	799b      	ldrb	r3, [r3, #6]
 800cdaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdae:	b2da      	uxtb	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdb6:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdc6:	69db      	ldr	r3, [r3, #28]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	4610      	mov	r0, r2
 800cdcc:	f7fc fd06 	bl	80097dc <move_window>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d17a      	bne.n	800ced0 <f_sync+0x192>
				dir = fp->dir_ptr;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	330b      	adds	r3, #11
 800cde8:	781a      	ldrb	r2, [r3, #0]
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	330b      	adds	r3, #11
 800cdee:	f042 0220 	orr.w	r2, r2, #32
 800cdf2:	b2d2      	uxtb	r2, r2
 800cdf4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdfc:	68da      	ldr	r2, [r3, #12]
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	331c      	adds	r3, #28
 800ce02:	b2d2      	uxtb	r2, r2
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	0a1b      	lsrs	r3, r3, #8
 800ce12:	b29a      	uxth	r2, r3
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	331d      	adds	r3, #29
 800ce18:	b2d2      	uxtb	r2, r2
 800ce1a:	701a      	strb	r2, [r3, #0]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	0c1a      	lsrs	r2, r3, #16
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	331e      	adds	r3, #30
 800ce2a:	b2d2      	uxtb	r2, r2
 800ce2c:	701a      	strb	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	0e1a      	lsrs	r2, r3, #24
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	331f      	adds	r3, #31
 800ce3c:	b2d2      	uxtb	r2, r2
 800ce3e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	6938      	ldr	r0, [r7, #16]
 800ce4c:	f7fd fc0a 	bl	800a664 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800ce50:	f7fc f93a 	bl	80090c8 <get_fattime>
 800ce54:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	3316      	adds	r3, #22
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	b2d2      	uxtb	r2, r2
 800ce5e:	701a      	strb	r2, [r3, #0]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	0a1b      	lsrs	r3, r3, #8
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	3317      	adds	r3, #23
 800ce6c:	b2d2      	uxtb	r2, r2
 800ce6e:	701a      	strb	r2, [r3, #0]
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	0c1a      	lsrs	r2, r3, #16
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	3318      	adds	r3, #24
 800ce78:	b2d2      	uxtb	r2, r2
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	0e1a      	lsrs	r2, r3, #24
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	3319      	adds	r3, #25
 800ce84:	b2d2      	uxtb	r2, r2
 800ce86:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	3312      	adds	r3, #18
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	701a      	strb	r2, [r3, #0]
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	3313      	adds	r3, #19
 800ce94:	2200      	movs	r2, #0
 800ce96:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce9e:	799b      	ldrb	r3, [r3, #6]
 800cea0:	f023 0320 	bic.w	r3, r3, #32
 800cea4:	b2da      	uxtb	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceac:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceba:	2201      	movs	r2, #1
 800cebc:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fc fcba 	bl	8009840 <sync_fs>
 800cecc:	4603      	mov	r3, r0
 800cece:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b084      	sub	sp, #16
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff ff2b 	bl	800cd3e <f_sync>
 800cee8:	4603      	mov	r3, r0
 800ceea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d119      	bne.n	800cf26 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7fe ff64 	bl	800bdc0 <validate>
 800cef8:	4603      	mov	r3, r0
 800cefa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d111      	bne.n	800cf26 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fc fba6 	bl	800965c <dec_lock>
 800cf10:	4603      	mov	r3, r0
 800cf12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d105      	bne.n	800cf26 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf20:	461a      	mov	r2, r3
 800cf22:	2300      	movs	r3, #0
 800cf24:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b090      	sub	sp, #64	; 0x40
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7fe ff40 	bl	800bdc0 <validate>
 800cf40:	4603      	mov	r3, r0
 800cf42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800cf46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d002      	beq.n	800cf54 <f_lseek+0x24>
 800cf4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cf52:	e2da      	b.n	800d50a <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf5a:	79db      	ldrb	r3, [r3, #7]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d004      	beq.n	800cf6a <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf66:	79db      	ldrb	r3, [r3, #7]
 800cf68:	e2cf      	b.n	800d50a <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 8124 	beq.w	800d1c0 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d16c      	bne.n	800d05a <f_lseek+0x12a>
			tbl = fp->cltbl;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf88:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	1d1a      	adds	r2, r3, #4
 800cf8e:	627a      	str	r2, [r7, #36]	; 0x24
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	617b      	str	r3, [r7, #20]
 800cf94:	2302      	movs	r3, #2
 800cf96:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d046      	beq.n	800d036 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfaa:	613b      	str	r3, [r7, #16]
 800cfac:	2300      	movs	r3, #0
 800cfae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	3302      	adds	r3, #2
 800cfb4:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	60fb      	str	r3, [r7, #12]
 800cfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fc fd1c 	bl	8009a08 <get_fat>
 800cfd0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d806      	bhi.n	800cfe6 <f_lseek+0xb6>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfde:	2202      	movs	r2, #2
 800cfe0:	71da      	strb	r2, [r3, #7]
 800cfe2:	2302      	movs	r3, #2
 800cfe4:	e291      	b.n	800d50a <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800cfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfec:	d106      	bne.n	800cffc <f_lseek+0xcc>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cff4:	2201      	movs	r2, #1
 800cff6:	71da      	strb	r2, [r3, #7]
 800cff8:	2301      	movs	r3, #1
 800cffa:	e286      	b.n	800d50a <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3301      	adds	r3, #1
 800d000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d002:	429a      	cmp	r2, r3
 800d004:	d0d7      	beq.n	800cfb6 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d809      	bhi.n	800d022 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d010:	1d1a      	adds	r2, r3, #4
 800d012:	627a      	str	r2, [r7, #36]	; 0x24
 800d014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	1d1a      	adds	r2, r3, #4
 800d01c:	627a      	str	r2, [r7, #36]	; 0x24
 800d01e:	693a      	ldr	r2, [r7, #16]
 800d020:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d032:	429a      	cmp	r2, r3
 800d034:	d3b8      	bcc.n	800cfa8 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d040:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800d042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	429a      	cmp	r2, r3
 800d048:	d803      	bhi.n	800d052 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	2200      	movs	r2, #0
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	e259      	b.n	800d506 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d052:	2311      	movs	r3, #17
 800d054:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d058:	e255      	b.n	800d506 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	683a      	ldr	r2, [r7, #0]
 800d064:	429a      	cmp	r2, r3
 800d066:	d904      	bls.n	800d072 <f_lseek+0x142>
				ofs = fp->fsize;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d078:	461a      	mov	r2, r3
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 8240 	beq.w	800d506 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	3b01      	subs	r3, #1
 800d08a:	4619      	mov	r1, r3
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7fd f813 	bl	800a0b8 <clmt_clust>
 800d092:	4602      	mov	r2, r0
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d09a:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0aa:	695b      	ldr	r3, [r3, #20]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	f7fc fc85 	bl	80099be <clust2sect>
 800d0b4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d106      	bne.n	800d0ca <f_lseek+0x19a>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	71da      	strb	r2, [r3, #7]
 800d0c6:	2302      	movs	r3, #2
 800d0c8:	e21f      	b.n	800d50a <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d0d4:	6812      	ldr	r2, [r2, #0]
 800d0d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d0da:	8952      	ldrh	r2, [r2, #10]
 800d0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d0e6:	6812      	ldr	r2, [r2, #0]
 800d0e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d0ec:	7892      	ldrb	r2, [r2, #2]
 800d0ee:	3a01      	subs	r2, #1
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	69ba      	ldr	r2, [r7, #24]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d106:	6812      	ldr	r2, [r2, #0]
 800d108:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d10c:	8952      	ldrh	r2, [r2, #10]
 800d10e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d112:	fb01 f202 	mul.w	r2, r1, r2
 800d116:	1a9b      	subs	r3, r3, r2
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f000 81f4 	beq.w	800d506 <f_lseek+0x5d6>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	69ba      	ldr	r2, [r7, #24]
 800d128:	429a      	cmp	r2, r3
 800d12a:	f000 81ec 	beq.w	800d506 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d134:	799b      	ldrb	r3, [r3, #6]
 800d136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d023      	beq.n	800d186 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d14a:	7858      	ldrb	r0, [r3, #1]
 800d14c:	6879      	ldr	r1, [r7, #4]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d154:	699a      	ldr	r2, [r3, #24]
 800d156:	2301      	movs	r3, #1
 800d158:	f7fc f874 	bl	8009244 <disk_write>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d006      	beq.n	800d170 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d168:	2201      	movs	r2, #1
 800d16a:	71da      	strb	r2, [r3, #7]
 800d16c:	2301      	movs	r3, #1
 800d16e:	e1cc      	b.n	800d50a <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d176:	799b      	ldrb	r3, [r3, #6]
 800d178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d184:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d192:	7858      	ldrb	r0, [r3, #1]
 800d194:	6879      	ldr	r1, [r7, #4]
 800d196:	2301      	movs	r3, #1
 800d198:	69ba      	ldr	r2, [r7, #24]
 800d19a:	f7fc f833 	bl	8009204 <disk_read>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d006      	beq.n	800d1b2 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	71da      	strb	r2, [r3, #7]
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e1ab      	b.n	800d50a <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	6193      	str	r3, [r2, #24]
 800d1be:	e1a2      	b.n	800d506 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d90c      	bls.n	800d1e8 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d4:	799b      	ldrb	r3, [r3, #6]
 800d1d6:	f003 0302 	and.w	r3, r3, #2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d104      	bne.n	800d1e8 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d200:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 8100 	beq.w	800d40a <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d216:	789b      	ldrb	r3, [r3, #2]
 800d218:	461a      	mov	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d226:	895b      	ldrh	r3, [r3, #10]
 800d228:	fb02 f303 	mul.w	r3, r2, r3
 800d22c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d021      	beq.n	800d278 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	1e5a      	subs	r2, r3, #1
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d23e:	6a3b      	ldr	r3, [r7, #32]
 800d240:	1e59      	subs	r1, r3, #1
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d248:	429a      	cmp	r2, r3
 800d24a:	d315      	bcc.n	800d278 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	1e5a      	subs	r2, r3, #1
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	425b      	negs	r3, r3
 800d254:	4013      	ands	r3, r2
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d25c:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	63bb      	str	r3, [r7, #56]	; 0x38
 800d276:	e031      	b.n	800d2dc <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d284:	2b00      	cmp	r3, #0
 800d286:	d123      	bne.n	800d2d0 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2100      	movs	r1, #0
 800d292:	4618      	mov	r0, r3
 800d294:	f7fc fe68 	bl	8009f68 <create_chain>
 800d298:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d106      	bne.n	800d2ae <f_lseek+0x37e>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a6:	2202      	movs	r2, #2
 800d2a8:	71da      	strb	r2, [r3, #7]
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	e12d      	b.n	800d50a <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b4:	d106      	bne.n	800d2c4 <f_lseek+0x394>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2bc:	2201      	movs	r2, #1
 800d2be:	71da      	strb	r2, [r3, #7]
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e122      	b.n	800d50a <f_lseek+0x5da>
					fp->sclust = clst;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ce:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2da:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800d2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 8093 	beq.w	800d40a <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800d2e4:	e052      	b.n	800d38c <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ec:	799b      	ldrb	r3, [r3, #6]
 800d2ee:	f003 0302 	and.w	r3, r3, #2
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00e      	beq.n	800d314 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d300:	4618      	mov	r0, r3
 800d302:	f7fc fe31 	bl	8009f68 <create_chain>
 800d306:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800d308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d10b      	bne.n	800d326 <f_lseek+0x3f6>
							ofs = bcs; break;
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	603b      	str	r3, [r7, #0]
 800d312:	e03f      	b.n	800d394 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fc fb72 	bl	8009a08 <get_fat>
 800d324:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32c:	d106      	bne.n	800d33c <f_lseek+0x40c>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d334:	2201      	movs	r2, #1
 800d336:	71da      	strb	r2, [r3, #7]
 800d338:	2301      	movs	r3, #1
 800d33a:	e0e6      	b.n	800d50a <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800d33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d909      	bls.n	800d356 <f_lseek+0x426>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d34e:	695b      	ldr	r3, [r3, #20]
 800d350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d352:	429a      	cmp	r2, r3
 800d354:	d306      	bcc.n	800d364 <f_lseek+0x434>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d35c:	2202      	movs	r2, #2
 800d35e:	71da      	strb	r2, [r3, #7]
 800d360:	2302      	movs	r3, #2
 800d362:	e0d2      	b.n	800d50a <f_lseek+0x5da>
					fp->clust = clst;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d36a:	461a      	mov	r2, r3
 800d36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36e:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d376:	689a      	ldr	r2, [r3, #8]
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	4413      	add	r3, r2
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d382:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800d384:	683a      	ldr	r2, [r7, #0]
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	429a      	cmp	r2, r3
 800d392:	d8a8      	bhi.n	800d2e6 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d39a:	689a      	ldr	r2, [r3, #8]
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	4413      	add	r3, r2
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d3a6:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3b4:	895b      	ldrh	r3, [r3, #10]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3be:	fb01 f202 	mul.w	r2, r1, r2
 800d3c2:	1a9b      	subs	r3, r3, r2
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d020      	beq.n	800d40a <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fc faf3 	bl	80099be <clust2sect>
 800d3d8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800d3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d106      	bne.n	800d3ee <f_lseek+0x4be>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3e6:	2202      	movs	r2, #2
 800d3e8:	71da      	strb	r2, [r3, #7]
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	e08d      	b.n	800d50a <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3fa:	895b      	ldrh	r3, [r3, #10]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	fbb3 f3f2 	udiv	r3, r3, r2
 800d404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d406:	4413      	add	r3, r2
 800d408:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d418:	6812      	ldr	r2, [r2, #0]
 800d41a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d41e:	8952      	ldrh	r2, [r2, #10]
 800d420:	fbb3 f1f2 	udiv	r1, r3, r2
 800d424:	fb01 f202 	mul.w	r2, r1, r2
 800d428:	1a9b      	subs	r3, r3, r2
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d04e      	beq.n	800d4cc <f_lseek+0x59c>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d438:	429a      	cmp	r2, r3
 800d43a:	d047      	beq.n	800d4cc <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d442:	799b      	ldrb	r3, [r3, #6]
 800d444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d023      	beq.n	800d494 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d458:	7858      	ldrb	r0, [r3, #1]
 800d45a:	6879      	ldr	r1, [r7, #4]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d462:	699a      	ldr	r2, [r3, #24]
 800d464:	2301      	movs	r3, #1
 800d466:	f7fb feed 	bl	8009244 <disk_write>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d006      	beq.n	800d47e <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d476:	2201      	movs	r2, #1
 800d478:	71da      	strb	r2, [r3, #7]
 800d47a:	2301      	movs	r3, #1
 800d47c:	e045      	b.n	800d50a <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d484:	799b      	ldrb	r3, [r3, #6]
 800d486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d492:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4a0:	7858      	ldrb	r0, [r3, #1]
 800d4a2:	6879      	ldr	r1, [r7, #4]
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a8:	f7fb feac 	bl	8009204 <disk_read>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d006      	beq.n	800d4c0 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	71da      	strb	r2, [r3, #7]
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e024      	b.n	800d50a <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ca:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4d2:	689a      	ldr	r2, [r3, #8]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d912      	bls.n	800d506 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d4ee:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4f6:	799b      	ldrb	r3, [r3, #6]
 800d4f8:	f043 0320 	orr.w	r3, r3, #32
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d504:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800d506:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3740      	adds	r7, #64	; 0x40
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
	...

0800d514 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d101      	bne.n	800d528 <f_opendir+0x14>
 800d524:	2309      	movs	r3, #9
 800d526:	e089      	b.n	800d63c <f_opendir+0x128>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800d528:	4639      	mov	r1, r7
 800d52a:	f107 0318 	add.w	r3, r7, #24
 800d52e:	2200      	movs	r2, #0
 800d530:	4618      	mov	r0, r3
 800d532:	f7fe f913 	bl	800b75c <find_volume>
 800d536:	4603      	mov	r3, r0
 800d538:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800d53a:	7ffb      	ldrb	r3, [r7, #31]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d173      	bne.n	800d628 <f_opendir+0x114>
		dp->fs = fs;
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d548:	6013      	str	r3, [r2, #0]
		INIT_BUF(*dp);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d550:	461a      	mov	r2, r3
 800d552:	f107 030c 	add.w	r3, r7, #12
 800d556:	6193      	str	r3, [r2, #24]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d55e:	461a      	mov	r2, r3
 800d560:	4b38      	ldr	r3, [pc, #224]	; (800d644 <f_opendir+0x130>)
 800d562:	6213      	str	r3, [r2, #32]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7fd ffcf 	bl	800b50c <follow_path>
 800d56e:	4603      	mov	r3, r0
 800d570:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800d572:	7ffb      	ldrb	r3, [r7, #31]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d152      	bne.n	800d61e <f_opendir+0x10a>
			if (dp->dir) {						/* It is not the origin directory itself */
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d57e:	695b      	ldr	r3, [r3, #20]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d01a      	beq.n	800d5ba <f_opendir+0xa6>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d58a:	695b      	ldr	r3, [r3, #20]
 800d58c:	330b      	adds	r3, #11
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	f003 0310 	and.w	r3, r3, #16
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00e      	beq.n	800d5b6 <f_opendir+0xa2>
					dp->sclust = ld_clust(fs, dp->dir);
 800d598:	69ba      	ldr	r2, [r7, #24]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	f7fd f82e 	bl	800a606 <ld_clust>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5b2:	609a      	str	r2, [r3, #8]
 800d5b4:	e001      	b.n	800d5ba <f_opendir+0xa6>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800d5b6:	2305      	movs	r3, #5
 800d5b8:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800d5ba:	7ffb      	ldrb	r3, [r7, #31]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d12e      	bne.n	800d61e <f_opendir+0x10a>
				dp->id = fs->id;
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5c6:	88da      	ldrh	r2, [r3, #6]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ce:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f7fc fdb1 	bl	800a13a <dir_sdi>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800d5dc:	7ffb      	ldrb	r3, [r7, #31]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d11d      	bne.n	800d61e <f_opendir+0x10a>
					if (dp->sclust) {
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d011      	beq.n	800d612 <f_opendir+0xfe>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f7fb ff75 	bl	80094e0 <inc_lock>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5fe:	61da      	str	r2, [r3, #28]
						if (!dp->lockid)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d606:	69db      	ldr	r3, [r3, #28]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d108      	bne.n	800d61e <f_opendir+0x10a>
							res = FR_TOO_MANY_OPEN_FILES;
 800d60c:	2312      	movs	r3, #18
 800d60e:	77fb      	strb	r3, [r7, #31]
 800d610:	e005      	b.n	800d61e <f_opendir+0x10a>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d618:	461a      	mov	r2, r3
 800d61a:	2300      	movs	r3, #0
 800d61c:	61d3      	str	r3, [r2, #28]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d61e:	7ffb      	ldrb	r3, [r7, #31]
 800d620:	2b04      	cmp	r3, #4
 800d622:	d101      	bne.n	800d628 <f_opendir+0x114>
 800d624:	2305      	movs	r3, #5
 800d626:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800d628:	7ffb      	ldrb	r3, [r7, #31]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d005      	beq.n	800d63a <f_opendir+0x126>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d634:	461a      	mov	r2, r3
 800d636:	2300      	movs	r3, #0
 800d638:	6013      	str	r3, [r2, #0]

	LEAVE_FF(fs, res);
 800d63a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3720      	adds	r7, #32
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	2000366c 	.word	0x2000366c

0800d648 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7fe fbb4 	bl	800bdc0 <validate>
 800d658:	4603      	mov	r3, r0
 800d65a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d65c:	7dfb      	ldrb	r3, [r7, #23]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d13f      	bne.n	800d6e2 <f_readdir+0x9a>
		if (!fno) {
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d106      	bne.n	800d676 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d668:	2100      	movs	r1, #0
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7fc fd65 	bl	800a13a <dir_sdi>
 800d670:	4603      	mov	r3, r0
 800d672:	75fb      	strb	r3, [r7, #23]
 800d674:	e035      	b.n	800d6e2 <f_readdir+0x9a>
		} else {
			INIT_BUF(*dp);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d67c:	461a      	mov	r2, r3
 800d67e:	f107 0308 	add.w	r3, r7, #8
 800d682:	6193      	str	r3, [r2, #24]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d68a:	461a      	mov	r2, r3
 800d68c:	4b17      	ldr	r3, [pc, #92]	; (800d6ec <f_readdir+0xa4>)
 800d68e:	6213      	str	r3, [r2, #32]
			res = dir_read(dp, 0);			/* Read an item */
 800d690:	2100      	movs	r1, #0
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7fd fad1 	bl	800ac3a <dir_read>
 800d698:	4603      	mov	r3, r0
 800d69a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
 800d69e:	2b04      	cmp	r3, #4
 800d6a0:	d107      	bne.n	800d6b2 <f_readdir+0x6a>
				dp->sect = 0;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	6113      	str	r3, [r2, #16]
				res = FR_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d114      	bne.n	800d6e2 <f_readdir+0x9a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d6b8:	6839      	ldr	r1, [r7, #0]
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f7fd fc94 	bl	800afe8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7fc fe07 	bl	800a2d6 <dir_next>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800d6cc:	7dfb      	ldrb	r3, [r7, #23]
 800d6ce:	2b04      	cmp	r3, #4
 800d6d0:	d107      	bne.n	800d6e2 <f_readdir+0x9a>
					dp->sect = 0;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6d8:	461a      	mov	r2, r3
 800d6da:	2300      	movs	r3, #0
 800d6dc:	6113      	str	r3, [r2, #16]
					res = FR_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	2000366c 	.word	0x2000366c

0800d6f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b087      	sub	sp, #28
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	4613      	mov	r3, r2
 800d6fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6fe:	2301      	movs	r3, #1
 800d700:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d702:	2300      	movs	r3, #0
 800d704:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800d706:	4b1f      	ldr	r3, [pc, #124]	; (800d784 <FATFS_LinkDriverEx+0x94>)
 800d708:	7a5b      	ldrb	r3, [r3, #9]
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d831      	bhi.n	800d774 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d710:	4b1c      	ldr	r3, [pc, #112]	; (800d784 <FATFS_LinkDriverEx+0x94>)
 800d712:	7a5b      	ldrb	r3, [r3, #9]
 800d714:	b2db      	uxtb	r3, r3
 800d716:	461a      	mov	r2, r3
 800d718:	4b1a      	ldr	r3, [pc, #104]	; (800d784 <FATFS_LinkDriverEx+0x94>)
 800d71a:	2100      	movs	r1, #0
 800d71c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800d71e:	4b19      	ldr	r3, [pc, #100]	; (800d784 <FATFS_LinkDriverEx+0x94>)
 800d720:	7a5b      	ldrb	r3, [r3, #9]
 800d722:	b2db      	uxtb	r3, r3
 800d724:	4a17      	ldr	r2, [pc, #92]	; (800d784 <FATFS_LinkDriverEx+0x94>)
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	4413      	add	r3, r2
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800d72e:	4b15      	ldr	r3, [pc, #84]	; (800d784 <FATFS_LinkDriverEx+0x94>)
 800d730:	7a5b      	ldrb	r3, [r3, #9]
 800d732:	b2db      	uxtb	r3, r3
 800d734:	461a      	mov	r2, r3
 800d736:	4b13      	ldr	r3, [pc, #76]	; (800d784 <FATFS_LinkDriverEx+0x94>)
 800d738:	4413      	add	r3, r2
 800d73a:	79fa      	ldrb	r2, [r7, #7]
 800d73c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d73e:	4b11      	ldr	r3, [pc, #68]	; (800d784 <FATFS_LinkDriverEx+0x94>)
 800d740:	7a5b      	ldrb	r3, [r3, #9]
 800d742:	b2db      	uxtb	r3, r3
 800d744:	1c5a      	adds	r2, r3, #1
 800d746:	b2d1      	uxtb	r1, r2
 800d748:	4a0e      	ldr	r2, [pc, #56]	; (800d784 <FATFS_LinkDriverEx+0x94>)
 800d74a:	7251      	strb	r1, [r2, #9]
 800d74c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d74e:	7dbb      	ldrb	r3, [r7, #22]
 800d750:	3330      	adds	r3, #48	; 0x30
 800d752:	b2da      	uxtb	r2, r3
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	3301      	adds	r3, #1
 800d75c:	223a      	movs	r2, #58	; 0x3a
 800d75e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	3302      	adds	r3, #2
 800d764:	222f      	movs	r2, #47	; 0x2f
 800d766:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	3303      	adds	r3, #3
 800d76c:	2200      	movs	r2, #0
 800d76e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d770:	2300      	movs	r3, #0
 800d772:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800d774:	7dfb      	ldrb	r3, [r7, #23]
}
 800d776:	4618      	mov	r0, r3
 800d778:	371c      	adds	r7, #28
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	2000386c 	.word	0x2000386c

0800d788 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d792:	2200      	movs	r2, #0
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff ffaa 	bl	800d6f0 <FATFS_LinkDriverEx>
 800d79c:	4603      	mov	r3, r0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3708      	adds	r7, #8
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
	...

0800d7a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	6039      	str	r1, [r7, #0]
 800d7b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d7b4:	88fb      	ldrh	r3, [r7, #6]
 800d7b6:	2b7f      	cmp	r3, #127	; 0x7f
 800d7b8:	d802      	bhi.n	800d7c0 <ff_convert+0x18>
		c = chr;
 800d7ba:	88fb      	ldrh	r3, [r7, #6]
 800d7bc:	81fb      	strh	r3, [r7, #14]
 800d7be:	e025      	b.n	800d80c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00b      	beq.n	800d7de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d7c6:	88fb      	ldrh	r3, [r7, #6]
 800d7c8:	2bff      	cmp	r3, #255	; 0xff
 800d7ca:	d805      	bhi.n	800d7d8 <ff_convert+0x30>
 800d7cc:	88fb      	ldrh	r3, [r7, #6]
 800d7ce:	3b80      	subs	r3, #128	; 0x80
 800d7d0:	4a12      	ldr	r2, [pc, #72]	; (800d81c <ff_convert+0x74>)
 800d7d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7d6:	e000      	b.n	800d7da <ff_convert+0x32>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	81fb      	strh	r3, [r7, #14]
 800d7dc:	e016      	b.n	800d80c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800d7de:	2300      	movs	r3, #0
 800d7e0:	81fb      	strh	r3, [r7, #14]
 800d7e2:	e009      	b.n	800d7f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d7e4:	89fb      	ldrh	r3, [r7, #14]
 800d7e6:	4a0d      	ldr	r2, [pc, #52]	; (800d81c <ff_convert+0x74>)
 800d7e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ec:	88fa      	ldrh	r2, [r7, #6]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d006      	beq.n	800d800 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d7f2:	89fb      	ldrh	r3, [r7, #14]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	81fb      	strh	r3, [r7, #14]
 800d7f8:	89fb      	ldrh	r3, [r7, #14]
 800d7fa:	2b7f      	cmp	r3, #127	; 0x7f
 800d7fc:	d9f2      	bls.n	800d7e4 <ff_convert+0x3c>
 800d7fe:	e000      	b.n	800d802 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d800:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d802:	89fb      	ldrh	r3, [r7, #14]
 800d804:	3380      	adds	r3, #128	; 0x80
 800d806:	b29b      	uxth	r3, r3
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d80c:	89fb      	ldrh	r3, [r7, #14]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	0800ef84 	.word	0x0800ef84

0800d820 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	4603      	mov	r3, r0
 800d828:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800d82a:	2300      	movs	r3, #0
 800d82c:	60fb      	str	r3, [r7, #12]
 800d82e:	e002      	b.n	800d836 <ff_wtoupper+0x16>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3301      	adds	r3, #1
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	4a0f      	ldr	r2, [pc, #60]	; (800d874 <ff_wtoupper+0x54>)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d006      	beq.n	800d850 <ff_wtoupper+0x30>
 800d842:	4a0c      	ldr	r2, [pc, #48]	; (800d874 <ff_wtoupper+0x54>)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d84a:	88fa      	ldrh	r2, [r7, #6]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d1ef      	bne.n	800d830 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800d850:	4a08      	ldr	r2, [pc, #32]	; (800d874 <ff_wtoupper+0x54>)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d004      	beq.n	800d866 <ff_wtoupper+0x46>
 800d85c:	4a06      	ldr	r2, [pc, #24]	; (800d878 <ff_wtoupper+0x58>)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d864:	e000      	b.n	800d868 <ff_wtoupper+0x48>
 800d866:	88fb      	ldrh	r3, [r7, #6]
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3714      	adds	r7, #20
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr
 800d874:	0800f084 	.word	0x0800f084
 800d878:	0800f264 	.word	0x0800f264

0800d87c <__errno>:
 800d87c:	4b01      	ldr	r3, [pc, #4]	; (800d884 <__errno+0x8>)
 800d87e:	6818      	ldr	r0, [r3, #0]
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	20000034 	.word	0x20000034

0800d888 <__libc_init_array>:
 800d888:	b570      	push	{r4, r5, r6, lr}
 800d88a:	4d0d      	ldr	r5, [pc, #52]	; (800d8c0 <__libc_init_array+0x38>)
 800d88c:	4c0d      	ldr	r4, [pc, #52]	; (800d8c4 <__libc_init_array+0x3c>)
 800d88e:	1b64      	subs	r4, r4, r5
 800d890:	10a4      	asrs	r4, r4, #2
 800d892:	2600      	movs	r6, #0
 800d894:	42a6      	cmp	r6, r4
 800d896:	d109      	bne.n	800d8ac <__libc_init_array+0x24>
 800d898:	4d0b      	ldr	r5, [pc, #44]	; (800d8c8 <__libc_init_array+0x40>)
 800d89a:	4c0c      	ldr	r4, [pc, #48]	; (800d8cc <__libc_init_array+0x44>)
 800d89c:	f001 fa00 	bl	800eca0 <_init>
 800d8a0:	1b64      	subs	r4, r4, r5
 800d8a2:	10a4      	asrs	r4, r4, #2
 800d8a4:	2600      	movs	r6, #0
 800d8a6:	42a6      	cmp	r6, r4
 800d8a8:	d105      	bne.n	800d8b6 <__libc_init_array+0x2e>
 800d8aa:	bd70      	pop	{r4, r5, r6, pc}
 800d8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8b0:	4798      	blx	r3
 800d8b2:	3601      	adds	r6, #1
 800d8b4:	e7ee      	b.n	800d894 <__libc_init_array+0xc>
 800d8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8ba:	4798      	blx	r3
 800d8bc:	3601      	adds	r6, #1
 800d8be:	e7f2      	b.n	800d8a6 <__libc_init_array+0x1e>
 800d8c0:	0800f4dc 	.word	0x0800f4dc
 800d8c4:	0800f4dc 	.word	0x0800f4dc
 800d8c8:	0800f4dc 	.word	0x0800f4dc
 800d8cc:	0800f4e0 	.word	0x0800f4e0

0800d8d0 <memset>:
 800d8d0:	4402      	add	r2, r0
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d100      	bne.n	800d8da <memset+0xa>
 800d8d8:	4770      	bx	lr
 800d8da:	f803 1b01 	strb.w	r1, [r3], #1
 800d8de:	e7f9      	b.n	800d8d4 <memset+0x4>

0800d8e0 <iprintf>:
 800d8e0:	b40f      	push	{r0, r1, r2, r3}
 800d8e2:	4b0a      	ldr	r3, [pc, #40]	; (800d90c <iprintf+0x2c>)
 800d8e4:	b513      	push	{r0, r1, r4, lr}
 800d8e6:	681c      	ldr	r4, [r3, #0]
 800d8e8:	b124      	cbz	r4, 800d8f4 <iprintf+0x14>
 800d8ea:	69a3      	ldr	r3, [r4, #24]
 800d8ec:	b913      	cbnz	r3, 800d8f4 <iprintf+0x14>
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f000 fa7e 	bl	800ddf0 <__sinit>
 800d8f4:	ab05      	add	r3, sp, #20
 800d8f6:	9a04      	ldr	r2, [sp, #16]
 800d8f8:	68a1      	ldr	r1, [r4, #8]
 800d8fa:	9301      	str	r3, [sp, #4]
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f000 fde3 	bl	800e4c8 <_vfiprintf_r>
 800d902:	b002      	add	sp, #8
 800d904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d908:	b004      	add	sp, #16
 800d90a:	4770      	bx	lr
 800d90c:	20000034 	.word	0x20000034

0800d910 <_puts_r>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	460e      	mov	r6, r1
 800d914:	4605      	mov	r5, r0
 800d916:	b118      	cbz	r0, 800d920 <_puts_r+0x10>
 800d918:	6983      	ldr	r3, [r0, #24]
 800d91a:	b90b      	cbnz	r3, 800d920 <_puts_r+0x10>
 800d91c:	f000 fa68 	bl	800ddf0 <__sinit>
 800d920:	69ab      	ldr	r3, [r5, #24]
 800d922:	68ac      	ldr	r4, [r5, #8]
 800d924:	b913      	cbnz	r3, 800d92c <_puts_r+0x1c>
 800d926:	4628      	mov	r0, r5
 800d928:	f000 fa62 	bl	800ddf0 <__sinit>
 800d92c:	4b2c      	ldr	r3, [pc, #176]	; (800d9e0 <_puts_r+0xd0>)
 800d92e:	429c      	cmp	r4, r3
 800d930:	d120      	bne.n	800d974 <_puts_r+0x64>
 800d932:	686c      	ldr	r4, [r5, #4]
 800d934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d936:	07db      	lsls	r3, r3, #31
 800d938:	d405      	bmi.n	800d946 <_puts_r+0x36>
 800d93a:	89a3      	ldrh	r3, [r4, #12]
 800d93c:	0598      	lsls	r0, r3, #22
 800d93e:	d402      	bmi.n	800d946 <_puts_r+0x36>
 800d940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d942:	f000 faf3 	bl	800df2c <__retarget_lock_acquire_recursive>
 800d946:	89a3      	ldrh	r3, [r4, #12]
 800d948:	0719      	lsls	r1, r3, #28
 800d94a:	d51d      	bpl.n	800d988 <_puts_r+0x78>
 800d94c:	6923      	ldr	r3, [r4, #16]
 800d94e:	b1db      	cbz	r3, 800d988 <_puts_r+0x78>
 800d950:	3e01      	subs	r6, #1
 800d952:	68a3      	ldr	r3, [r4, #8]
 800d954:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d958:	3b01      	subs	r3, #1
 800d95a:	60a3      	str	r3, [r4, #8]
 800d95c:	bb39      	cbnz	r1, 800d9ae <_puts_r+0x9e>
 800d95e:	2b00      	cmp	r3, #0
 800d960:	da38      	bge.n	800d9d4 <_puts_r+0xc4>
 800d962:	4622      	mov	r2, r4
 800d964:	210a      	movs	r1, #10
 800d966:	4628      	mov	r0, r5
 800d968:	f000 f868 	bl	800da3c <__swbuf_r>
 800d96c:	3001      	adds	r0, #1
 800d96e:	d011      	beq.n	800d994 <_puts_r+0x84>
 800d970:	250a      	movs	r5, #10
 800d972:	e011      	b.n	800d998 <_puts_r+0x88>
 800d974:	4b1b      	ldr	r3, [pc, #108]	; (800d9e4 <_puts_r+0xd4>)
 800d976:	429c      	cmp	r4, r3
 800d978:	d101      	bne.n	800d97e <_puts_r+0x6e>
 800d97a:	68ac      	ldr	r4, [r5, #8]
 800d97c:	e7da      	b.n	800d934 <_puts_r+0x24>
 800d97e:	4b1a      	ldr	r3, [pc, #104]	; (800d9e8 <_puts_r+0xd8>)
 800d980:	429c      	cmp	r4, r3
 800d982:	bf08      	it	eq
 800d984:	68ec      	ldreq	r4, [r5, #12]
 800d986:	e7d5      	b.n	800d934 <_puts_r+0x24>
 800d988:	4621      	mov	r1, r4
 800d98a:	4628      	mov	r0, r5
 800d98c:	f000 f8a8 	bl	800dae0 <__swsetup_r>
 800d990:	2800      	cmp	r0, #0
 800d992:	d0dd      	beq.n	800d950 <_puts_r+0x40>
 800d994:	f04f 35ff 	mov.w	r5, #4294967295
 800d998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d99a:	07da      	lsls	r2, r3, #31
 800d99c:	d405      	bmi.n	800d9aa <_puts_r+0x9a>
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	059b      	lsls	r3, r3, #22
 800d9a2:	d402      	bmi.n	800d9aa <_puts_r+0x9a>
 800d9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9a6:	f000 fac2 	bl	800df2e <__retarget_lock_release_recursive>
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	bd70      	pop	{r4, r5, r6, pc}
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	da04      	bge.n	800d9bc <_puts_r+0xac>
 800d9b2:	69a2      	ldr	r2, [r4, #24]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	dc06      	bgt.n	800d9c6 <_puts_r+0xb6>
 800d9b8:	290a      	cmp	r1, #10
 800d9ba:	d004      	beq.n	800d9c6 <_puts_r+0xb6>
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	6022      	str	r2, [r4, #0]
 800d9c2:	7019      	strb	r1, [r3, #0]
 800d9c4:	e7c5      	b.n	800d952 <_puts_r+0x42>
 800d9c6:	4622      	mov	r2, r4
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	f000 f837 	bl	800da3c <__swbuf_r>
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	d1bf      	bne.n	800d952 <_puts_r+0x42>
 800d9d2:	e7df      	b.n	800d994 <_puts_r+0x84>
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	250a      	movs	r5, #10
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	6022      	str	r2, [r4, #0]
 800d9dc:	701d      	strb	r5, [r3, #0]
 800d9de:	e7db      	b.n	800d998 <_puts_r+0x88>
 800d9e0:	0800f468 	.word	0x0800f468
 800d9e4:	0800f488 	.word	0x0800f488
 800d9e8:	0800f448 	.word	0x0800f448

0800d9ec <puts>:
 800d9ec:	4b02      	ldr	r3, [pc, #8]	; (800d9f8 <puts+0xc>)
 800d9ee:	4601      	mov	r1, r0
 800d9f0:	6818      	ldr	r0, [r3, #0]
 800d9f2:	f7ff bf8d 	b.w	800d910 <_puts_r>
 800d9f6:	bf00      	nop
 800d9f8:	20000034 	.word	0x20000034

0800d9fc <siprintf>:
 800d9fc:	b40e      	push	{r1, r2, r3}
 800d9fe:	b500      	push	{lr}
 800da00:	b09c      	sub	sp, #112	; 0x70
 800da02:	ab1d      	add	r3, sp, #116	; 0x74
 800da04:	9002      	str	r0, [sp, #8]
 800da06:	9006      	str	r0, [sp, #24]
 800da08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da0c:	4809      	ldr	r0, [pc, #36]	; (800da34 <siprintf+0x38>)
 800da0e:	9107      	str	r1, [sp, #28]
 800da10:	9104      	str	r1, [sp, #16]
 800da12:	4909      	ldr	r1, [pc, #36]	; (800da38 <siprintf+0x3c>)
 800da14:	f853 2b04 	ldr.w	r2, [r3], #4
 800da18:	9105      	str	r1, [sp, #20]
 800da1a:	6800      	ldr	r0, [r0, #0]
 800da1c:	9301      	str	r3, [sp, #4]
 800da1e:	a902      	add	r1, sp, #8
 800da20:	f000 fc28 	bl	800e274 <_svfiprintf_r>
 800da24:	9b02      	ldr	r3, [sp, #8]
 800da26:	2200      	movs	r2, #0
 800da28:	701a      	strb	r2, [r3, #0]
 800da2a:	b01c      	add	sp, #112	; 0x70
 800da2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da30:	b003      	add	sp, #12
 800da32:	4770      	bx	lr
 800da34:	20000034 	.word	0x20000034
 800da38:	ffff0208 	.word	0xffff0208

0800da3c <__swbuf_r>:
 800da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3e:	460e      	mov	r6, r1
 800da40:	4614      	mov	r4, r2
 800da42:	4605      	mov	r5, r0
 800da44:	b118      	cbz	r0, 800da4e <__swbuf_r+0x12>
 800da46:	6983      	ldr	r3, [r0, #24]
 800da48:	b90b      	cbnz	r3, 800da4e <__swbuf_r+0x12>
 800da4a:	f000 f9d1 	bl	800ddf0 <__sinit>
 800da4e:	4b21      	ldr	r3, [pc, #132]	; (800dad4 <__swbuf_r+0x98>)
 800da50:	429c      	cmp	r4, r3
 800da52:	d12b      	bne.n	800daac <__swbuf_r+0x70>
 800da54:	686c      	ldr	r4, [r5, #4]
 800da56:	69a3      	ldr	r3, [r4, #24]
 800da58:	60a3      	str	r3, [r4, #8]
 800da5a:	89a3      	ldrh	r3, [r4, #12]
 800da5c:	071a      	lsls	r2, r3, #28
 800da5e:	d52f      	bpl.n	800dac0 <__swbuf_r+0x84>
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	b36b      	cbz	r3, 800dac0 <__swbuf_r+0x84>
 800da64:	6923      	ldr	r3, [r4, #16]
 800da66:	6820      	ldr	r0, [r4, #0]
 800da68:	1ac0      	subs	r0, r0, r3
 800da6a:	6963      	ldr	r3, [r4, #20]
 800da6c:	b2f6      	uxtb	r6, r6
 800da6e:	4283      	cmp	r3, r0
 800da70:	4637      	mov	r7, r6
 800da72:	dc04      	bgt.n	800da7e <__swbuf_r+0x42>
 800da74:	4621      	mov	r1, r4
 800da76:	4628      	mov	r0, r5
 800da78:	f000 f926 	bl	800dcc8 <_fflush_r>
 800da7c:	bb30      	cbnz	r0, 800dacc <__swbuf_r+0x90>
 800da7e:	68a3      	ldr	r3, [r4, #8]
 800da80:	3b01      	subs	r3, #1
 800da82:	60a3      	str	r3, [r4, #8]
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	6022      	str	r2, [r4, #0]
 800da8a:	701e      	strb	r6, [r3, #0]
 800da8c:	6963      	ldr	r3, [r4, #20]
 800da8e:	3001      	adds	r0, #1
 800da90:	4283      	cmp	r3, r0
 800da92:	d004      	beq.n	800da9e <__swbuf_r+0x62>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	07db      	lsls	r3, r3, #31
 800da98:	d506      	bpl.n	800daa8 <__swbuf_r+0x6c>
 800da9a:	2e0a      	cmp	r6, #10
 800da9c:	d104      	bne.n	800daa8 <__swbuf_r+0x6c>
 800da9e:	4621      	mov	r1, r4
 800daa0:	4628      	mov	r0, r5
 800daa2:	f000 f911 	bl	800dcc8 <_fflush_r>
 800daa6:	b988      	cbnz	r0, 800dacc <__swbuf_r+0x90>
 800daa8:	4638      	mov	r0, r7
 800daaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daac:	4b0a      	ldr	r3, [pc, #40]	; (800dad8 <__swbuf_r+0x9c>)
 800daae:	429c      	cmp	r4, r3
 800dab0:	d101      	bne.n	800dab6 <__swbuf_r+0x7a>
 800dab2:	68ac      	ldr	r4, [r5, #8]
 800dab4:	e7cf      	b.n	800da56 <__swbuf_r+0x1a>
 800dab6:	4b09      	ldr	r3, [pc, #36]	; (800dadc <__swbuf_r+0xa0>)
 800dab8:	429c      	cmp	r4, r3
 800daba:	bf08      	it	eq
 800dabc:	68ec      	ldreq	r4, [r5, #12]
 800dabe:	e7ca      	b.n	800da56 <__swbuf_r+0x1a>
 800dac0:	4621      	mov	r1, r4
 800dac2:	4628      	mov	r0, r5
 800dac4:	f000 f80c 	bl	800dae0 <__swsetup_r>
 800dac8:	2800      	cmp	r0, #0
 800daca:	d0cb      	beq.n	800da64 <__swbuf_r+0x28>
 800dacc:	f04f 37ff 	mov.w	r7, #4294967295
 800dad0:	e7ea      	b.n	800daa8 <__swbuf_r+0x6c>
 800dad2:	bf00      	nop
 800dad4:	0800f468 	.word	0x0800f468
 800dad8:	0800f488 	.word	0x0800f488
 800dadc:	0800f448 	.word	0x0800f448

0800dae0 <__swsetup_r>:
 800dae0:	4b32      	ldr	r3, [pc, #200]	; (800dbac <__swsetup_r+0xcc>)
 800dae2:	b570      	push	{r4, r5, r6, lr}
 800dae4:	681d      	ldr	r5, [r3, #0]
 800dae6:	4606      	mov	r6, r0
 800dae8:	460c      	mov	r4, r1
 800daea:	b125      	cbz	r5, 800daf6 <__swsetup_r+0x16>
 800daec:	69ab      	ldr	r3, [r5, #24]
 800daee:	b913      	cbnz	r3, 800daf6 <__swsetup_r+0x16>
 800daf0:	4628      	mov	r0, r5
 800daf2:	f000 f97d 	bl	800ddf0 <__sinit>
 800daf6:	4b2e      	ldr	r3, [pc, #184]	; (800dbb0 <__swsetup_r+0xd0>)
 800daf8:	429c      	cmp	r4, r3
 800dafa:	d10f      	bne.n	800db1c <__swsetup_r+0x3c>
 800dafc:	686c      	ldr	r4, [r5, #4]
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db04:	0719      	lsls	r1, r3, #28
 800db06:	d42c      	bmi.n	800db62 <__swsetup_r+0x82>
 800db08:	06dd      	lsls	r5, r3, #27
 800db0a:	d411      	bmi.n	800db30 <__swsetup_r+0x50>
 800db0c:	2309      	movs	r3, #9
 800db0e:	6033      	str	r3, [r6, #0]
 800db10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db14:	81a3      	strh	r3, [r4, #12]
 800db16:	f04f 30ff 	mov.w	r0, #4294967295
 800db1a:	e03e      	b.n	800db9a <__swsetup_r+0xba>
 800db1c:	4b25      	ldr	r3, [pc, #148]	; (800dbb4 <__swsetup_r+0xd4>)
 800db1e:	429c      	cmp	r4, r3
 800db20:	d101      	bne.n	800db26 <__swsetup_r+0x46>
 800db22:	68ac      	ldr	r4, [r5, #8]
 800db24:	e7eb      	b.n	800dafe <__swsetup_r+0x1e>
 800db26:	4b24      	ldr	r3, [pc, #144]	; (800dbb8 <__swsetup_r+0xd8>)
 800db28:	429c      	cmp	r4, r3
 800db2a:	bf08      	it	eq
 800db2c:	68ec      	ldreq	r4, [r5, #12]
 800db2e:	e7e6      	b.n	800dafe <__swsetup_r+0x1e>
 800db30:	0758      	lsls	r0, r3, #29
 800db32:	d512      	bpl.n	800db5a <__swsetup_r+0x7a>
 800db34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db36:	b141      	cbz	r1, 800db4a <__swsetup_r+0x6a>
 800db38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db3c:	4299      	cmp	r1, r3
 800db3e:	d002      	beq.n	800db46 <__swsetup_r+0x66>
 800db40:	4630      	mov	r0, r6
 800db42:	f000 fa5b 	bl	800dffc <_free_r>
 800db46:	2300      	movs	r3, #0
 800db48:	6363      	str	r3, [r4, #52]	; 0x34
 800db4a:	89a3      	ldrh	r3, [r4, #12]
 800db4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db50:	81a3      	strh	r3, [r4, #12]
 800db52:	2300      	movs	r3, #0
 800db54:	6063      	str	r3, [r4, #4]
 800db56:	6923      	ldr	r3, [r4, #16]
 800db58:	6023      	str	r3, [r4, #0]
 800db5a:	89a3      	ldrh	r3, [r4, #12]
 800db5c:	f043 0308 	orr.w	r3, r3, #8
 800db60:	81a3      	strh	r3, [r4, #12]
 800db62:	6923      	ldr	r3, [r4, #16]
 800db64:	b94b      	cbnz	r3, 800db7a <__swsetup_r+0x9a>
 800db66:	89a3      	ldrh	r3, [r4, #12]
 800db68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db70:	d003      	beq.n	800db7a <__swsetup_r+0x9a>
 800db72:	4621      	mov	r1, r4
 800db74:	4630      	mov	r0, r6
 800db76:	f000 fa01 	bl	800df7c <__smakebuf_r>
 800db7a:	89a0      	ldrh	r0, [r4, #12]
 800db7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db80:	f010 0301 	ands.w	r3, r0, #1
 800db84:	d00a      	beq.n	800db9c <__swsetup_r+0xbc>
 800db86:	2300      	movs	r3, #0
 800db88:	60a3      	str	r3, [r4, #8]
 800db8a:	6963      	ldr	r3, [r4, #20]
 800db8c:	425b      	negs	r3, r3
 800db8e:	61a3      	str	r3, [r4, #24]
 800db90:	6923      	ldr	r3, [r4, #16]
 800db92:	b943      	cbnz	r3, 800dba6 <__swsetup_r+0xc6>
 800db94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db98:	d1ba      	bne.n	800db10 <__swsetup_r+0x30>
 800db9a:	bd70      	pop	{r4, r5, r6, pc}
 800db9c:	0781      	lsls	r1, r0, #30
 800db9e:	bf58      	it	pl
 800dba0:	6963      	ldrpl	r3, [r4, #20]
 800dba2:	60a3      	str	r3, [r4, #8]
 800dba4:	e7f4      	b.n	800db90 <__swsetup_r+0xb0>
 800dba6:	2000      	movs	r0, #0
 800dba8:	e7f7      	b.n	800db9a <__swsetup_r+0xba>
 800dbaa:	bf00      	nop
 800dbac:	20000034 	.word	0x20000034
 800dbb0:	0800f468 	.word	0x0800f468
 800dbb4:	0800f488 	.word	0x0800f488
 800dbb8:	0800f448 	.word	0x0800f448

0800dbbc <__sflush_r>:
 800dbbc:	898a      	ldrh	r2, [r1, #12]
 800dbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc2:	4605      	mov	r5, r0
 800dbc4:	0710      	lsls	r0, r2, #28
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	d458      	bmi.n	800dc7c <__sflush_r+0xc0>
 800dbca:	684b      	ldr	r3, [r1, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	dc05      	bgt.n	800dbdc <__sflush_r+0x20>
 800dbd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	dc02      	bgt.n	800dbdc <__sflush_r+0x20>
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbde:	2e00      	cmp	r6, #0
 800dbe0:	d0f9      	beq.n	800dbd6 <__sflush_r+0x1a>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbe8:	682f      	ldr	r7, [r5, #0]
 800dbea:	602b      	str	r3, [r5, #0]
 800dbec:	d032      	beq.n	800dc54 <__sflush_r+0x98>
 800dbee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbf0:	89a3      	ldrh	r3, [r4, #12]
 800dbf2:	075a      	lsls	r2, r3, #29
 800dbf4:	d505      	bpl.n	800dc02 <__sflush_r+0x46>
 800dbf6:	6863      	ldr	r3, [r4, #4]
 800dbf8:	1ac0      	subs	r0, r0, r3
 800dbfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbfc:	b10b      	cbz	r3, 800dc02 <__sflush_r+0x46>
 800dbfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc00:	1ac0      	subs	r0, r0, r3
 800dc02:	2300      	movs	r3, #0
 800dc04:	4602      	mov	r2, r0
 800dc06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc08:	6a21      	ldr	r1, [r4, #32]
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	47b0      	blx	r6
 800dc0e:	1c43      	adds	r3, r0, #1
 800dc10:	89a3      	ldrh	r3, [r4, #12]
 800dc12:	d106      	bne.n	800dc22 <__sflush_r+0x66>
 800dc14:	6829      	ldr	r1, [r5, #0]
 800dc16:	291d      	cmp	r1, #29
 800dc18:	d82c      	bhi.n	800dc74 <__sflush_r+0xb8>
 800dc1a:	4a2a      	ldr	r2, [pc, #168]	; (800dcc4 <__sflush_r+0x108>)
 800dc1c:	40ca      	lsrs	r2, r1
 800dc1e:	07d6      	lsls	r6, r2, #31
 800dc20:	d528      	bpl.n	800dc74 <__sflush_r+0xb8>
 800dc22:	2200      	movs	r2, #0
 800dc24:	6062      	str	r2, [r4, #4]
 800dc26:	04d9      	lsls	r1, r3, #19
 800dc28:	6922      	ldr	r2, [r4, #16]
 800dc2a:	6022      	str	r2, [r4, #0]
 800dc2c:	d504      	bpl.n	800dc38 <__sflush_r+0x7c>
 800dc2e:	1c42      	adds	r2, r0, #1
 800dc30:	d101      	bne.n	800dc36 <__sflush_r+0x7a>
 800dc32:	682b      	ldr	r3, [r5, #0]
 800dc34:	b903      	cbnz	r3, 800dc38 <__sflush_r+0x7c>
 800dc36:	6560      	str	r0, [r4, #84]	; 0x54
 800dc38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc3a:	602f      	str	r7, [r5, #0]
 800dc3c:	2900      	cmp	r1, #0
 800dc3e:	d0ca      	beq.n	800dbd6 <__sflush_r+0x1a>
 800dc40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc44:	4299      	cmp	r1, r3
 800dc46:	d002      	beq.n	800dc4e <__sflush_r+0x92>
 800dc48:	4628      	mov	r0, r5
 800dc4a:	f000 f9d7 	bl	800dffc <_free_r>
 800dc4e:	2000      	movs	r0, #0
 800dc50:	6360      	str	r0, [r4, #52]	; 0x34
 800dc52:	e7c1      	b.n	800dbd8 <__sflush_r+0x1c>
 800dc54:	6a21      	ldr	r1, [r4, #32]
 800dc56:	2301      	movs	r3, #1
 800dc58:	4628      	mov	r0, r5
 800dc5a:	47b0      	blx	r6
 800dc5c:	1c41      	adds	r1, r0, #1
 800dc5e:	d1c7      	bne.n	800dbf0 <__sflush_r+0x34>
 800dc60:	682b      	ldr	r3, [r5, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d0c4      	beq.n	800dbf0 <__sflush_r+0x34>
 800dc66:	2b1d      	cmp	r3, #29
 800dc68:	d001      	beq.n	800dc6e <__sflush_r+0xb2>
 800dc6a:	2b16      	cmp	r3, #22
 800dc6c:	d101      	bne.n	800dc72 <__sflush_r+0xb6>
 800dc6e:	602f      	str	r7, [r5, #0]
 800dc70:	e7b1      	b.n	800dbd6 <__sflush_r+0x1a>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc78:	81a3      	strh	r3, [r4, #12]
 800dc7a:	e7ad      	b.n	800dbd8 <__sflush_r+0x1c>
 800dc7c:	690f      	ldr	r7, [r1, #16]
 800dc7e:	2f00      	cmp	r7, #0
 800dc80:	d0a9      	beq.n	800dbd6 <__sflush_r+0x1a>
 800dc82:	0793      	lsls	r3, r2, #30
 800dc84:	680e      	ldr	r6, [r1, #0]
 800dc86:	bf08      	it	eq
 800dc88:	694b      	ldreq	r3, [r1, #20]
 800dc8a:	600f      	str	r7, [r1, #0]
 800dc8c:	bf18      	it	ne
 800dc8e:	2300      	movne	r3, #0
 800dc90:	eba6 0807 	sub.w	r8, r6, r7
 800dc94:	608b      	str	r3, [r1, #8]
 800dc96:	f1b8 0f00 	cmp.w	r8, #0
 800dc9a:	dd9c      	ble.n	800dbd6 <__sflush_r+0x1a>
 800dc9c:	6a21      	ldr	r1, [r4, #32]
 800dc9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dca0:	4643      	mov	r3, r8
 800dca2:	463a      	mov	r2, r7
 800dca4:	4628      	mov	r0, r5
 800dca6:	47b0      	blx	r6
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	dc06      	bgt.n	800dcba <__sflush_r+0xfe>
 800dcac:	89a3      	ldrh	r3, [r4, #12]
 800dcae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcb2:	81a3      	strh	r3, [r4, #12]
 800dcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb8:	e78e      	b.n	800dbd8 <__sflush_r+0x1c>
 800dcba:	4407      	add	r7, r0
 800dcbc:	eba8 0800 	sub.w	r8, r8, r0
 800dcc0:	e7e9      	b.n	800dc96 <__sflush_r+0xda>
 800dcc2:	bf00      	nop
 800dcc4:	20400001 	.word	0x20400001

0800dcc8 <_fflush_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	690b      	ldr	r3, [r1, #16]
 800dccc:	4605      	mov	r5, r0
 800dcce:	460c      	mov	r4, r1
 800dcd0:	b913      	cbnz	r3, 800dcd8 <_fflush_r+0x10>
 800dcd2:	2500      	movs	r5, #0
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	b118      	cbz	r0, 800dce2 <_fflush_r+0x1a>
 800dcda:	6983      	ldr	r3, [r0, #24]
 800dcdc:	b90b      	cbnz	r3, 800dce2 <_fflush_r+0x1a>
 800dcde:	f000 f887 	bl	800ddf0 <__sinit>
 800dce2:	4b14      	ldr	r3, [pc, #80]	; (800dd34 <_fflush_r+0x6c>)
 800dce4:	429c      	cmp	r4, r3
 800dce6:	d11b      	bne.n	800dd20 <_fflush_r+0x58>
 800dce8:	686c      	ldr	r4, [r5, #4]
 800dcea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d0ef      	beq.n	800dcd2 <_fflush_r+0xa>
 800dcf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dcf4:	07d0      	lsls	r0, r2, #31
 800dcf6:	d404      	bmi.n	800dd02 <_fflush_r+0x3a>
 800dcf8:	0599      	lsls	r1, r3, #22
 800dcfa:	d402      	bmi.n	800dd02 <_fflush_r+0x3a>
 800dcfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcfe:	f000 f915 	bl	800df2c <__retarget_lock_acquire_recursive>
 800dd02:	4628      	mov	r0, r5
 800dd04:	4621      	mov	r1, r4
 800dd06:	f7ff ff59 	bl	800dbbc <__sflush_r>
 800dd0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd0c:	07da      	lsls	r2, r3, #31
 800dd0e:	4605      	mov	r5, r0
 800dd10:	d4e0      	bmi.n	800dcd4 <_fflush_r+0xc>
 800dd12:	89a3      	ldrh	r3, [r4, #12]
 800dd14:	059b      	lsls	r3, r3, #22
 800dd16:	d4dd      	bmi.n	800dcd4 <_fflush_r+0xc>
 800dd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd1a:	f000 f908 	bl	800df2e <__retarget_lock_release_recursive>
 800dd1e:	e7d9      	b.n	800dcd4 <_fflush_r+0xc>
 800dd20:	4b05      	ldr	r3, [pc, #20]	; (800dd38 <_fflush_r+0x70>)
 800dd22:	429c      	cmp	r4, r3
 800dd24:	d101      	bne.n	800dd2a <_fflush_r+0x62>
 800dd26:	68ac      	ldr	r4, [r5, #8]
 800dd28:	e7df      	b.n	800dcea <_fflush_r+0x22>
 800dd2a:	4b04      	ldr	r3, [pc, #16]	; (800dd3c <_fflush_r+0x74>)
 800dd2c:	429c      	cmp	r4, r3
 800dd2e:	bf08      	it	eq
 800dd30:	68ec      	ldreq	r4, [r5, #12]
 800dd32:	e7da      	b.n	800dcea <_fflush_r+0x22>
 800dd34:	0800f468 	.word	0x0800f468
 800dd38:	0800f488 	.word	0x0800f488
 800dd3c:	0800f448 	.word	0x0800f448

0800dd40 <std>:
 800dd40:	2300      	movs	r3, #0
 800dd42:	b510      	push	{r4, lr}
 800dd44:	4604      	mov	r4, r0
 800dd46:	e9c0 3300 	strd	r3, r3, [r0]
 800dd4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd4e:	6083      	str	r3, [r0, #8]
 800dd50:	8181      	strh	r1, [r0, #12]
 800dd52:	6643      	str	r3, [r0, #100]	; 0x64
 800dd54:	81c2      	strh	r2, [r0, #14]
 800dd56:	6183      	str	r3, [r0, #24]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	2208      	movs	r2, #8
 800dd5c:	305c      	adds	r0, #92	; 0x5c
 800dd5e:	f7ff fdb7 	bl	800d8d0 <memset>
 800dd62:	4b05      	ldr	r3, [pc, #20]	; (800dd78 <std+0x38>)
 800dd64:	6263      	str	r3, [r4, #36]	; 0x24
 800dd66:	4b05      	ldr	r3, [pc, #20]	; (800dd7c <std+0x3c>)
 800dd68:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd6a:	4b05      	ldr	r3, [pc, #20]	; (800dd80 <std+0x40>)
 800dd6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd6e:	4b05      	ldr	r3, [pc, #20]	; (800dd84 <std+0x44>)
 800dd70:	6224      	str	r4, [r4, #32]
 800dd72:	6323      	str	r3, [r4, #48]	; 0x30
 800dd74:	bd10      	pop	{r4, pc}
 800dd76:	bf00      	nop
 800dd78:	0800ea71 	.word	0x0800ea71
 800dd7c:	0800ea93 	.word	0x0800ea93
 800dd80:	0800eacb 	.word	0x0800eacb
 800dd84:	0800eaef 	.word	0x0800eaef

0800dd88 <_cleanup_r>:
 800dd88:	4901      	ldr	r1, [pc, #4]	; (800dd90 <_cleanup_r+0x8>)
 800dd8a:	f000 b8af 	b.w	800deec <_fwalk_reent>
 800dd8e:	bf00      	nop
 800dd90:	0800dcc9 	.word	0x0800dcc9

0800dd94 <__sfmoreglue>:
 800dd94:	b570      	push	{r4, r5, r6, lr}
 800dd96:	2268      	movs	r2, #104	; 0x68
 800dd98:	1e4d      	subs	r5, r1, #1
 800dd9a:	4355      	muls	r5, r2
 800dd9c:	460e      	mov	r6, r1
 800dd9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dda2:	f000 f997 	bl	800e0d4 <_malloc_r>
 800dda6:	4604      	mov	r4, r0
 800dda8:	b140      	cbz	r0, 800ddbc <__sfmoreglue+0x28>
 800ddaa:	2100      	movs	r1, #0
 800ddac:	e9c0 1600 	strd	r1, r6, [r0]
 800ddb0:	300c      	adds	r0, #12
 800ddb2:	60a0      	str	r0, [r4, #8]
 800ddb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ddb8:	f7ff fd8a 	bl	800d8d0 <memset>
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	bd70      	pop	{r4, r5, r6, pc}

0800ddc0 <__sfp_lock_acquire>:
 800ddc0:	4801      	ldr	r0, [pc, #4]	; (800ddc8 <__sfp_lock_acquire+0x8>)
 800ddc2:	f000 b8b3 	b.w	800df2c <__retarget_lock_acquire_recursive>
 800ddc6:	bf00      	nop
 800ddc8:	20003879 	.word	0x20003879

0800ddcc <__sfp_lock_release>:
 800ddcc:	4801      	ldr	r0, [pc, #4]	; (800ddd4 <__sfp_lock_release+0x8>)
 800ddce:	f000 b8ae 	b.w	800df2e <__retarget_lock_release_recursive>
 800ddd2:	bf00      	nop
 800ddd4:	20003879 	.word	0x20003879

0800ddd8 <__sinit_lock_acquire>:
 800ddd8:	4801      	ldr	r0, [pc, #4]	; (800dde0 <__sinit_lock_acquire+0x8>)
 800ddda:	f000 b8a7 	b.w	800df2c <__retarget_lock_acquire_recursive>
 800ddde:	bf00      	nop
 800dde0:	2000387a 	.word	0x2000387a

0800dde4 <__sinit_lock_release>:
 800dde4:	4801      	ldr	r0, [pc, #4]	; (800ddec <__sinit_lock_release+0x8>)
 800dde6:	f000 b8a2 	b.w	800df2e <__retarget_lock_release_recursive>
 800ddea:	bf00      	nop
 800ddec:	2000387a 	.word	0x2000387a

0800ddf0 <__sinit>:
 800ddf0:	b510      	push	{r4, lr}
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	f7ff fff0 	bl	800ddd8 <__sinit_lock_acquire>
 800ddf8:	69a3      	ldr	r3, [r4, #24]
 800ddfa:	b11b      	cbz	r3, 800de04 <__sinit+0x14>
 800ddfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de00:	f7ff bff0 	b.w	800dde4 <__sinit_lock_release>
 800de04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de08:	6523      	str	r3, [r4, #80]	; 0x50
 800de0a:	4b13      	ldr	r3, [pc, #76]	; (800de58 <__sinit+0x68>)
 800de0c:	4a13      	ldr	r2, [pc, #76]	; (800de5c <__sinit+0x6c>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	62a2      	str	r2, [r4, #40]	; 0x28
 800de12:	42a3      	cmp	r3, r4
 800de14:	bf04      	itt	eq
 800de16:	2301      	moveq	r3, #1
 800de18:	61a3      	streq	r3, [r4, #24]
 800de1a:	4620      	mov	r0, r4
 800de1c:	f000 f820 	bl	800de60 <__sfp>
 800de20:	6060      	str	r0, [r4, #4]
 800de22:	4620      	mov	r0, r4
 800de24:	f000 f81c 	bl	800de60 <__sfp>
 800de28:	60a0      	str	r0, [r4, #8]
 800de2a:	4620      	mov	r0, r4
 800de2c:	f000 f818 	bl	800de60 <__sfp>
 800de30:	2200      	movs	r2, #0
 800de32:	60e0      	str	r0, [r4, #12]
 800de34:	2104      	movs	r1, #4
 800de36:	6860      	ldr	r0, [r4, #4]
 800de38:	f7ff ff82 	bl	800dd40 <std>
 800de3c:	68a0      	ldr	r0, [r4, #8]
 800de3e:	2201      	movs	r2, #1
 800de40:	2109      	movs	r1, #9
 800de42:	f7ff ff7d 	bl	800dd40 <std>
 800de46:	68e0      	ldr	r0, [r4, #12]
 800de48:	2202      	movs	r2, #2
 800de4a:	2112      	movs	r1, #18
 800de4c:	f7ff ff78 	bl	800dd40 <std>
 800de50:	2301      	movs	r3, #1
 800de52:	61a3      	str	r3, [r4, #24]
 800de54:	e7d2      	b.n	800ddfc <__sinit+0xc>
 800de56:	bf00      	nop
 800de58:	0800f444 	.word	0x0800f444
 800de5c:	0800dd89 	.word	0x0800dd89

0800de60 <__sfp>:
 800de60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de62:	4607      	mov	r7, r0
 800de64:	f7ff ffac 	bl	800ddc0 <__sfp_lock_acquire>
 800de68:	4b1e      	ldr	r3, [pc, #120]	; (800dee4 <__sfp+0x84>)
 800de6a:	681e      	ldr	r6, [r3, #0]
 800de6c:	69b3      	ldr	r3, [r6, #24]
 800de6e:	b913      	cbnz	r3, 800de76 <__sfp+0x16>
 800de70:	4630      	mov	r0, r6
 800de72:	f7ff ffbd 	bl	800ddf0 <__sinit>
 800de76:	3648      	adds	r6, #72	; 0x48
 800de78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de7c:	3b01      	subs	r3, #1
 800de7e:	d503      	bpl.n	800de88 <__sfp+0x28>
 800de80:	6833      	ldr	r3, [r6, #0]
 800de82:	b30b      	cbz	r3, 800dec8 <__sfp+0x68>
 800de84:	6836      	ldr	r6, [r6, #0]
 800de86:	e7f7      	b.n	800de78 <__sfp+0x18>
 800de88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de8c:	b9d5      	cbnz	r5, 800dec4 <__sfp+0x64>
 800de8e:	4b16      	ldr	r3, [pc, #88]	; (800dee8 <__sfp+0x88>)
 800de90:	60e3      	str	r3, [r4, #12]
 800de92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de96:	6665      	str	r5, [r4, #100]	; 0x64
 800de98:	f000 f847 	bl	800df2a <__retarget_lock_init_recursive>
 800de9c:	f7ff ff96 	bl	800ddcc <__sfp_lock_release>
 800dea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dea8:	6025      	str	r5, [r4, #0]
 800deaa:	61a5      	str	r5, [r4, #24]
 800deac:	2208      	movs	r2, #8
 800deae:	4629      	mov	r1, r5
 800deb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800deb4:	f7ff fd0c 	bl	800d8d0 <memset>
 800deb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800debc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dec0:	4620      	mov	r0, r4
 800dec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dec4:	3468      	adds	r4, #104	; 0x68
 800dec6:	e7d9      	b.n	800de7c <__sfp+0x1c>
 800dec8:	2104      	movs	r1, #4
 800deca:	4638      	mov	r0, r7
 800decc:	f7ff ff62 	bl	800dd94 <__sfmoreglue>
 800ded0:	4604      	mov	r4, r0
 800ded2:	6030      	str	r0, [r6, #0]
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d1d5      	bne.n	800de84 <__sfp+0x24>
 800ded8:	f7ff ff78 	bl	800ddcc <__sfp_lock_release>
 800dedc:	230c      	movs	r3, #12
 800dede:	603b      	str	r3, [r7, #0]
 800dee0:	e7ee      	b.n	800dec0 <__sfp+0x60>
 800dee2:	bf00      	nop
 800dee4:	0800f444 	.word	0x0800f444
 800dee8:	ffff0001 	.word	0xffff0001

0800deec <_fwalk_reent>:
 800deec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800def0:	4606      	mov	r6, r0
 800def2:	4688      	mov	r8, r1
 800def4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800def8:	2700      	movs	r7, #0
 800defa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800defe:	f1b9 0901 	subs.w	r9, r9, #1
 800df02:	d505      	bpl.n	800df10 <_fwalk_reent+0x24>
 800df04:	6824      	ldr	r4, [r4, #0]
 800df06:	2c00      	cmp	r4, #0
 800df08:	d1f7      	bne.n	800defa <_fwalk_reent+0xe>
 800df0a:	4638      	mov	r0, r7
 800df0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df10:	89ab      	ldrh	r3, [r5, #12]
 800df12:	2b01      	cmp	r3, #1
 800df14:	d907      	bls.n	800df26 <_fwalk_reent+0x3a>
 800df16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df1a:	3301      	adds	r3, #1
 800df1c:	d003      	beq.n	800df26 <_fwalk_reent+0x3a>
 800df1e:	4629      	mov	r1, r5
 800df20:	4630      	mov	r0, r6
 800df22:	47c0      	blx	r8
 800df24:	4307      	orrs	r7, r0
 800df26:	3568      	adds	r5, #104	; 0x68
 800df28:	e7e9      	b.n	800defe <_fwalk_reent+0x12>

0800df2a <__retarget_lock_init_recursive>:
 800df2a:	4770      	bx	lr

0800df2c <__retarget_lock_acquire_recursive>:
 800df2c:	4770      	bx	lr

0800df2e <__retarget_lock_release_recursive>:
 800df2e:	4770      	bx	lr

0800df30 <__swhatbuf_r>:
 800df30:	b570      	push	{r4, r5, r6, lr}
 800df32:	460e      	mov	r6, r1
 800df34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df38:	2900      	cmp	r1, #0
 800df3a:	b096      	sub	sp, #88	; 0x58
 800df3c:	4614      	mov	r4, r2
 800df3e:	461d      	mov	r5, r3
 800df40:	da08      	bge.n	800df54 <__swhatbuf_r+0x24>
 800df42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800df46:	2200      	movs	r2, #0
 800df48:	602a      	str	r2, [r5, #0]
 800df4a:	061a      	lsls	r2, r3, #24
 800df4c:	d410      	bmi.n	800df70 <__swhatbuf_r+0x40>
 800df4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df52:	e00e      	b.n	800df72 <__swhatbuf_r+0x42>
 800df54:	466a      	mov	r2, sp
 800df56:	f000 fdf1 	bl	800eb3c <_fstat_r>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	dbf1      	blt.n	800df42 <__swhatbuf_r+0x12>
 800df5e:	9a01      	ldr	r2, [sp, #4]
 800df60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df68:	425a      	negs	r2, r3
 800df6a:	415a      	adcs	r2, r3
 800df6c:	602a      	str	r2, [r5, #0]
 800df6e:	e7ee      	b.n	800df4e <__swhatbuf_r+0x1e>
 800df70:	2340      	movs	r3, #64	; 0x40
 800df72:	2000      	movs	r0, #0
 800df74:	6023      	str	r3, [r4, #0]
 800df76:	b016      	add	sp, #88	; 0x58
 800df78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800df7c <__smakebuf_r>:
 800df7c:	898b      	ldrh	r3, [r1, #12]
 800df7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df80:	079d      	lsls	r5, r3, #30
 800df82:	4606      	mov	r6, r0
 800df84:	460c      	mov	r4, r1
 800df86:	d507      	bpl.n	800df98 <__smakebuf_r+0x1c>
 800df88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df8c:	6023      	str	r3, [r4, #0]
 800df8e:	6123      	str	r3, [r4, #16]
 800df90:	2301      	movs	r3, #1
 800df92:	6163      	str	r3, [r4, #20]
 800df94:	b002      	add	sp, #8
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	ab01      	add	r3, sp, #4
 800df9a:	466a      	mov	r2, sp
 800df9c:	f7ff ffc8 	bl	800df30 <__swhatbuf_r>
 800dfa0:	9900      	ldr	r1, [sp, #0]
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	f000 f895 	bl	800e0d4 <_malloc_r>
 800dfaa:	b948      	cbnz	r0, 800dfc0 <__smakebuf_r+0x44>
 800dfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfb0:	059a      	lsls	r2, r3, #22
 800dfb2:	d4ef      	bmi.n	800df94 <__smakebuf_r+0x18>
 800dfb4:	f023 0303 	bic.w	r3, r3, #3
 800dfb8:	f043 0302 	orr.w	r3, r3, #2
 800dfbc:	81a3      	strh	r3, [r4, #12]
 800dfbe:	e7e3      	b.n	800df88 <__smakebuf_r+0xc>
 800dfc0:	4b0d      	ldr	r3, [pc, #52]	; (800dff8 <__smakebuf_r+0x7c>)
 800dfc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800dfc4:	89a3      	ldrh	r3, [r4, #12]
 800dfc6:	6020      	str	r0, [r4, #0]
 800dfc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfcc:	81a3      	strh	r3, [r4, #12]
 800dfce:	9b00      	ldr	r3, [sp, #0]
 800dfd0:	6163      	str	r3, [r4, #20]
 800dfd2:	9b01      	ldr	r3, [sp, #4]
 800dfd4:	6120      	str	r0, [r4, #16]
 800dfd6:	b15b      	cbz	r3, 800dff0 <__smakebuf_r+0x74>
 800dfd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfdc:	4630      	mov	r0, r6
 800dfde:	f000 fdbf 	bl	800eb60 <_isatty_r>
 800dfe2:	b128      	cbz	r0, 800dff0 <__smakebuf_r+0x74>
 800dfe4:	89a3      	ldrh	r3, [r4, #12]
 800dfe6:	f023 0303 	bic.w	r3, r3, #3
 800dfea:	f043 0301 	orr.w	r3, r3, #1
 800dfee:	81a3      	strh	r3, [r4, #12]
 800dff0:	89a0      	ldrh	r0, [r4, #12]
 800dff2:	4305      	orrs	r5, r0
 800dff4:	81a5      	strh	r5, [r4, #12]
 800dff6:	e7cd      	b.n	800df94 <__smakebuf_r+0x18>
 800dff8:	0800dd89 	.word	0x0800dd89

0800dffc <_free_r>:
 800dffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dffe:	2900      	cmp	r1, #0
 800e000:	d044      	beq.n	800e08c <_free_r+0x90>
 800e002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e006:	9001      	str	r0, [sp, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f1a1 0404 	sub.w	r4, r1, #4
 800e00e:	bfb8      	it	lt
 800e010:	18e4      	addlt	r4, r4, r3
 800e012:	f000 fdef 	bl	800ebf4 <__malloc_lock>
 800e016:	4a1e      	ldr	r2, [pc, #120]	; (800e090 <_free_r+0x94>)
 800e018:	9801      	ldr	r0, [sp, #4]
 800e01a:	6813      	ldr	r3, [r2, #0]
 800e01c:	b933      	cbnz	r3, 800e02c <_free_r+0x30>
 800e01e:	6063      	str	r3, [r4, #4]
 800e020:	6014      	str	r4, [r2, #0]
 800e022:	b003      	add	sp, #12
 800e024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e028:	f000 bdea 	b.w	800ec00 <__malloc_unlock>
 800e02c:	42a3      	cmp	r3, r4
 800e02e:	d908      	bls.n	800e042 <_free_r+0x46>
 800e030:	6825      	ldr	r5, [r4, #0]
 800e032:	1961      	adds	r1, r4, r5
 800e034:	428b      	cmp	r3, r1
 800e036:	bf01      	itttt	eq
 800e038:	6819      	ldreq	r1, [r3, #0]
 800e03a:	685b      	ldreq	r3, [r3, #4]
 800e03c:	1949      	addeq	r1, r1, r5
 800e03e:	6021      	streq	r1, [r4, #0]
 800e040:	e7ed      	b.n	800e01e <_free_r+0x22>
 800e042:	461a      	mov	r2, r3
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	b10b      	cbz	r3, 800e04c <_free_r+0x50>
 800e048:	42a3      	cmp	r3, r4
 800e04a:	d9fa      	bls.n	800e042 <_free_r+0x46>
 800e04c:	6811      	ldr	r1, [r2, #0]
 800e04e:	1855      	adds	r5, r2, r1
 800e050:	42a5      	cmp	r5, r4
 800e052:	d10b      	bne.n	800e06c <_free_r+0x70>
 800e054:	6824      	ldr	r4, [r4, #0]
 800e056:	4421      	add	r1, r4
 800e058:	1854      	adds	r4, r2, r1
 800e05a:	42a3      	cmp	r3, r4
 800e05c:	6011      	str	r1, [r2, #0]
 800e05e:	d1e0      	bne.n	800e022 <_free_r+0x26>
 800e060:	681c      	ldr	r4, [r3, #0]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	6053      	str	r3, [r2, #4]
 800e066:	4421      	add	r1, r4
 800e068:	6011      	str	r1, [r2, #0]
 800e06a:	e7da      	b.n	800e022 <_free_r+0x26>
 800e06c:	d902      	bls.n	800e074 <_free_r+0x78>
 800e06e:	230c      	movs	r3, #12
 800e070:	6003      	str	r3, [r0, #0]
 800e072:	e7d6      	b.n	800e022 <_free_r+0x26>
 800e074:	6825      	ldr	r5, [r4, #0]
 800e076:	1961      	adds	r1, r4, r5
 800e078:	428b      	cmp	r3, r1
 800e07a:	bf04      	itt	eq
 800e07c:	6819      	ldreq	r1, [r3, #0]
 800e07e:	685b      	ldreq	r3, [r3, #4]
 800e080:	6063      	str	r3, [r4, #4]
 800e082:	bf04      	itt	eq
 800e084:	1949      	addeq	r1, r1, r5
 800e086:	6021      	streq	r1, [r4, #0]
 800e088:	6054      	str	r4, [r2, #4]
 800e08a:	e7ca      	b.n	800e022 <_free_r+0x26>
 800e08c:	b003      	add	sp, #12
 800e08e:	bd30      	pop	{r4, r5, pc}
 800e090:	2000387c 	.word	0x2000387c

0800e094 <sbrk_aligned>:
 800e094:	b570      	push	{r4, r5, r6, lr}
 800e096:	4e0e      	ldr	r6, [pc, #56]	; (800e0d0 <sbrk_aligned+0x3c>)
 800e098:	460c      	mov	r4, r1
 800e09a:	6831      	ldr	r1, [r6, #0]
 800e09c:	4605      	mov	r5, r0
 800e09e:	b911      	cbnz	r1, 800e0a6 <sbrk_aligned+0x12>
 800e0a0:	f000 fcd6 	bl	800ea50 <_sbrk_r>
 800e0a4:	6030      	str	r0, [r6, #0]
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	f000 fcd1 	bl	800ea50 <_sbrk_r>
 800e0ae:	1c43      	adds	r3, r0, #1
 800e0b0:	d00a      	beq.n	800e0c8 <sbrk_aligned+0x34>
 800e0b2:	1cc4      	adds	r4, r0, #3
 800e0b4:	f024 0403 	bic.w	r4, r4, #3
 800e0b8:	42a0      	cmp	r0, r4
 800e0ba:	d007      	beq.n	800e0cc <sbrk_aligned+0x38>
 800e0bc:	1a21      	subs	r1, r4, r0
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f000 fcc6 	bl	800ea50 <_sbrk_r>
 800e0c4:	3001      	adds	r0, #1
 800e0c6:	d101      	bne.n	800e0cc <sbrk_aligned+0x38>
 800e0c8:	f04f 34ff 	mov.w	r4, #4294967295
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	bd70      	pop	{r4, r5, r6, pc}
 800e0d0:	20003880 	.word	0x20003880

0800e0d4 <_malloc_r>:
 800e0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d8:	1ccd      	adds	r5, r1, #3
 800e0da:	f025 0503 	bic.w	r5, r5, #3
 800e0de:	3508      	adds	r5, #8
 800e0e0:	2d0c      	cmp	r5, #12
 800e0e2:	bf38      	it	cc
 800e0e4:	250c      	movcc	r5, #12
 800e0e6:	2d00      	cmp	r5, #0
 800e0e8:	4607      	mov	r7, r0
 800e0ea:	db01      	blt.n	800e0f0 <_malloc_r+0x1c>
 800e0ec:	42a9      	cmp	r1, r5
 800e0ee:	d905      	bls.n	800e0fc <_malloc_r+0x28>
 800e0f0:	230c      	movs	r3, #12
 800e0f2:	603b      	str	r3, [r7, #0]
 800e0f4:	2600      	movs	r6, #0
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0fc:	4e2e      	ldr	r6, [pc, #184]	; (800e1b8 <_malloc_r+0xe4>)
 800e0fe:	f000 fd79 	bl	800ebf4 <__malloc_lock>
 800e102:	6833      	ldr	r3, [r6, #0]
 800e104:	461c      	mov	r4, r3
 800e106:	bb34      	cbnz	r4, 800e156 <_malloc_r+0x82>
 800e108:	4629      	mov	r1, r5
 800e10a:	4638      	mov	r0, r7
 800e10c:	f7ff ffc2 	bl	800e094 <sbrk_aligned>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	4604      	mov	r4, r0
 800e114:	d14d      	bne.n	800e1b2 <_malloc_r+0xde>
 800e116:	6834      	ldr	r4, [r6, #0]
 800e118:	4626      	mov	r6, r4
 800e11a:	2e00      	cmp	r6, #0
 800e11c:	d140      	bne.n	800e1a0 <_malloc_r+0xcc>
 800e11e:	6823      	ldr	r3, [r4, #0]
 800e120:	4631      	mov	r1, r6
 800e122:	4638      	mov	r0, r7
 800e124:	eb04 0803 	add.w	r8, r4, r3
 800e128:	f000 fc92 	bl	800ea50 <_sbrk_r>
 800e12c:	4580      	cmp	r8, r0
 800e12e:	d13a      	bne.n	800e1a6 <_malloc_r+0xd2>
 800e130:	6821      	ldr	r1, [r4, #0]
 800e132:	3503      	adds	r5, #3
 800e134:	1a6d      	subs	r5, r5, r1
 800e136:	f025 0503 	bic.w	r5, r5, #3
 800e13a:	3508      	adds	r5, #8
 800e13c:	2d0c      	cmp	r5, #12
 800e13e:	bf38      	it	cc
 800e140:	250c      	movcc	r5, #12
 800e142:	4629      	mov	r1, r5
 800e144:	4638      	mov	r0, r7
 800e146:	f7ff ffa5 	bl	800e094 <sbrk_aligned>
 800e14a:	3001      	adds	r0, #1
 800e14c:	d02b      	beq.n	800e1a6 <_malloc_r+0xd2>
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	442b      	add	r3, r5
 800e152:	6023      	str	r3, [r4, #0]
 800e154:	e00e      	b.n	800e174 <_malloc_r+0xa0>
 800e156:	6822      	ldr	r2, [r4, #0]
 800e158:	1b52      	subs	r2, r2, r5
 800e15a:	d41e      	bmi.n	800e19a <_malloc_r+0xc6>
 800e15c:	2a0b      	cmp	r2, #11
 800e15e:	d916      	bls.n	800e18e <_malloc_r+0xba>
 800e160:	1961      	adds	r1, r4, r5
 800e162:	42a3      	cmp	r3, r4
 800e164:	6025      	str	r5, [r4, #0]
 800e166:	bf18      	it	ne
 800e168:	6059      	strne	r1, [r3, #4]
 800e16a:	6863      	ldr	r3, [r4, #4]
 800e16c:	bf08      	it	eq
 800e16e:	6031      	streq	r1, [r6, #0]
 800e170:	5162      	str	r2, [r4, r5]
 800e172:	604b      	str	r3, [r1, #4]
 800e174:	4638      	mov	r0, r7
 800e176:	f104 060b 	add.w	r6, r4, #11
 800e17a:	f000 fd41 	bl	800ec00 <__malloc_unlock>
 800e17e:	f026 0607 	bic.w	r6, r6, #7
 800e182:	1d23      	adds	r3, r4, #4
 800e184:	1af2      	subs	r2, r6, r3
 800e186:	d0b6      	beq.n	800e0f6 <_malloc_r+0x22>
 800e188:	1b9b      	subs	r3, r3, r6
 800e18a:	50a3      	str	r3, [r4, r2]
 800e18c:	e7b3      	b.n	800e0f6 <_malloc_r+0x22>
 800e18e:	6862      	ldr	r2, [r4, #4]
 800e190:	42a3      	cmp	r3, r4
 800e192:	bf0c      	ite	eq
 800e194:	6032      	streq	r2, [r6, #0]
 800e196:	605a      	strne	r2, [r3, #4]
 800e198:	e7ec      	b.n	800e174 <_malloc_r+0xa0>
 800e19a:	4623      	mov	r3, r4
 800e19c:	6864      	ldr	r4, [r4, #4]
 800e19e:	e7b2      	b.n	800e106 <_malloc_r+0x32>
 800e1a0:	4634      	mov	r4, r6
 800e1a2:	6876      	ldr	r6, [r6, #4]
 800e1a4:	e7b9      	b.n	800e11a <_malloc_r+0x46>
 800e1a6:	230c      	movs	r3, #12
 800e1a8:	603b      	str	r3, [r7, #0]
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	f000 fd28 	bl	800ec00 <__malloc_unlock>
 800e1b0:	e7a1      	b.n	800e0f6 <_malloc_r+0x22>
 800e1b2:	6025      	str	r5, [r4, #0]
 800e1b4:	e7de      	b.n	800e174 <_malloc_r+0xa0>
 800e1b6:	bf00      	nop
 800e1b8:	2000387c 	.word	0x2000387c

0800e1bc <__ssputs_r>:
 800e1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1c0:	688e      	ldr	r6, [r1, #8]
 800e1c2:	429e      	cmp	r6, r3
 800e1c4:	4682      	mov	sl, r0
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	4690      	mov	r8, r2
 800e1ca:	461f      	mov	r7, r3
 800e1cc:	d838      	bhi.n	800e240 <__ssputs_r+0x84>
 800e1ce:	898a      	ldrh	r2, [r1, #12]
 800e1d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1d4:	d032      	beq.n	800e23c <__ssputs_r+0x80>
 800e1d6:	6825      	ldr	r5, [r4, #0]
 800e1d8:	6909      	ldr	r1, [r1, #16]
 800e1da:	eba5 0901 	sub.w	r9, r5, r1
 800e1de:	6965      	ldr	r5, [r4, #20]
 800e1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	444b      	add	r3, r9
 800e1ec:	106d      	asrs	r5, r5, #1
 800e1ee:	429d      	cmp	r5, r3
 800e1f0:	bf38      	it	cc
 800e1f2:	461d      	movcc	r5, r3
 800e1f4:	0553      	lsls	r3, r2, #21
 800e1f6:	d531      	bpl.n	800e25c <__ssputs_r+0xa0>
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	f7ff ff6b 	bl	800e0d4 <_malloc_r>
 800e1fe:	4606      	mov	r6, r0
 800e200:	b950      	cbnz	r0, 800e218 <__ssputs_r+0x5c>
 800e202:	230c      	movs	r3, #12
 800e204:	f8ca 3000 	str.w	r3, [sl]
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e20e:	81a3      	strh	r3, [r4, #12]
 800e210:	f04f 30ff 	mov.w	r0, #4294967295
 800e214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e218:	6921      	ldr	r1, [r4, #16]
 800e21a:	464a      	mov	r2, r9
 800e21c:	f000 fcc2 	bl	800eba4 <memcpy>
 800e220:	89a3      	ldrh	r3, [r4, #12]
 800e222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e22a:	81a3      	strh	r3, [r4, #12]
 800e22c:	6126      	str	r6, [r4, #16]
 800e22e:	6165      	str	r5, [r4, #20]
 800e230:	444e      	add	r6, r9
 800e232:	eba5 0509 	sub.w	r5, r5, r9
 800e236:	6026      	str	r6, [r4, #0]
 800e238:	60a5      	str	r5, [r4, #8]
 800e23a:	463e      	mov	r6, r7
 800e23c:	42be      	cmp	r6, r7
 800e23e:	d900      	bls.n	800e242 <__ssputs_r+0x86>
 800e240:	463e      	mov	r6, r7
 800e242:	6820      	ldr	r0, [r4, #0]
 800e244:	4632      	mov	r2, r6
 800e246:	4641      	mov	r1, r8
 800e248:	f000 fcba 	bl	800ebc0 <memmove>
 800e24c:	68a3      	ldr	r3, [r4, #8]
 800e24e:	1b9b      	subs	r3, r3, r6
 800e250:	60a3      	str	r3, [r4, #8]
 800e252:	6823      	ldr	r3, [r4, #0]
 800e254:	4433      	add	r3, r6
 800e256:	6023      	str	r3, [r4, #0]
 800e258:	2000      	movs	r0, #0
 800e25a:	e7db      	b.n	800e214 <__ssputs_r+0x58>
 800e25c:	462a      	mov	r2, r5
 800e25e:	f000 fcd5 	bl	800ec0c <_realloc_r>
 800e262:	4606      	mov	r6, r0
 800e264:	2800      	cmp	r0, #0
 800e266:	d1e1      	bne.n	800e22c <__ssputs_r+0x70>
 800e268:	6921      	ldr	r1, [r4, #16]
 800e26a:	4650      	mov	r0, sl
 800e26c:	f7ff fec6 	bl	800dffc <_free_r>
 800e270:	e7c7      	b.n	800e202 <__ssputs_r+0x46>
	...

0800e274 <_svfiprintf_r>:
 800e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e278:	4698      	mov	r8, r3
 800e27a:	898b      	ldrh	r3, [r1, #12]
 800e27c:	061b      	lsls	r3, r3, #24
 800e27e:	b09d      	sub	sp, #116	; 0x74
 800e280:	4607      	mov	r7, r0
 800e282:	460d      	mov	r5, r1
 800e284:	4614      	mov	r4, r2
 800e286:	d50e      	bpl.n	800e2a6 <_svfiprintf_r+0x32>
 800e288:	690b      	ldr	r3, [r1, #16]
 800e28a:	b963      	cbnz	r3, 800e2a6 <_svfiprintf_r+0x32>
 800e28c:	2140      	movs	r1, #64	; 0x40
 800e28e:	f7ff ff21 	bl	800e0d4 <_malloc_r>
 800e292:	6028      	str	r0, [r5, #0]
 800e294:	6128      	str	r0, [r5, #16]
 800e296:	b920      	cbnz	r0, 800e2a2 <_svfiprintf_r+0x2e>
 800e298:	230c      	movs	r3, #12
 800e29a:	603b      	str	r3, [r7, #0]
 800e29c:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a0:	e0d1      	b.n	800e446 <_svfiprintf_r+0x1d2>
 800e2a2:	2340      	movs	r3, #64	; 0x40
 800e2a4:	616b      	str	r3, [r5, #20]
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2aa:	2320      	movs	r3, #32
 800e2ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2b4:	2330      	movs	r3, #48	; 0x30
 800e2b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e460 <_svfiprintf_r+0x1ec>
 800e2ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2be:	f04f 0901 	mov.w	r9, #1
 800e2c2:	4623      	mov	r3, r4
 800e2c4:	469a      	mov	sl, r3
 800e2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2ca:	b10a      	cbz	r2, 800e2d0 <_svfiprintf_r+0x5c>
 800e2cc:	2a25      	cmp	r2, #37	; 0x25
 800e2ce:	d1f9      	bne.n	800e2c4 <_svfiprintf_r+0x50>
 800e2d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e2d4:	d00b      	beq.n	800e2ee <_svfiprintf_r+0x7a>
 800e2d6:	465b      	mov	r3, fp
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4629      	mov	r1, r5
 800e2dc:	4638      	mov	r0, r7
 800e2de:	f7ff ff6d 	bl	800e1bc <__ssputs_r>
 800e2e2:	3001      	adds	r0, #1
 800e2e4:	f000 80aa 	beq.w	800e43c <_svfiprintf_r+0x1c8>
 800e2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2ea:	445a      	add	r2, fp
 800e2ec:	9209      	str	r2, [sp, #36]	; 0x24
 800e2ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f000 80a2 	beq.w	800e43c <_svfiprintf_r+0x1c8>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e302:	f10a 0a01 	add.w	sl, sl, #1
 800e306:	9304      	str	r3, [sp, #16]
 800e308:	9307      	str	r3, [sp, #28]
 800e30a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e30e:	931a      	str	r3, [sp, #104]	; 0x68
 800e310:	4654      	mov	r4, sl
 800e312:	2205      	movs	r2, #5
 800e314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e318:	4851      	ldr	r0, [pc, #324]	; (800e460 <_svfiprintf_r+0x1ec>)
 800e31a:	f7f1 ff59 	bl	80001d0 <memchr>
 800e31e:	9a04      	ldr	r2, [sp, #16]
 800e320:	b9d8      	cbnz	r0, 800e35a <_svfiprintf_r+0xe6>
 800e322:	06d0      	lsls	r0, r2, #27
 800e324:	bf44      	itt	mi
 800e326:	2320      	movmi	r3, #32
 800e328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e32c:	0711      	lsls	r1, r2, #28
 800e32e:	bf44      	itt	mi
 800e330:	232b      	movmi	r3, #43	; 0x2b
 800e332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e336:	f89a 3000 	ldrb.w	r3, [sl]
 800e33a:	2b2a      	cmp	r3, #42	; 0x2a
 800e33c:	d015      	beq.n	800e36a <_svfiprintf_r+0xf6>
 800e33e:	9a07      	ldr	r2, [sp, #28]
 800e340:	4654      	mov	r4, sl
 800e342:	2000      	movs	r0, #0
 800e344:	f04f 0c0a 	mov.w	ip, #10
 800e348:	4621      	mov	r1, r4
 800e34a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e34e:	3b30      	subs	r3, #48	; 0x30
 800e350:	2b09      	cmp	r3, #9
 800e352:	d94e      	bls.n	800e3f2 <_svfiprintf_r+0x17e>
 800e354:	b1b0      	cbz	r0, 800e384 <_svfiprintf_r+0x110>
 800e356:	9207      	str	r2, [sp, #28]
 800e358:	e014      	b.n	800e384 <_svfiprintf_r+0x110>
 800e35a:	eba0 0308 	sub.w	r3, r0, r8
 800e35e:	fa09 f303 	lsl.w	r3, r9, r3
 800e362:	4313      	orrs	r3, r2
 800e364:	9304      	str	r3, [sp, #16]
 800e366:	46a2      	mov	sl, r4
 800e368:	e7d2      	b.n	800e310 <_svfiprintf_r+0x9c>
 800e36a:	9b03      	ldr	r3, [sp, #12]
 800e36c:	1d19      	adds	r1, r3, #4
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	9103      	str	r1, [sp, #12]
 800e372:	2b00      	cmp	r3, #0
 800e374:	bfbb      	ittet	lt
 800e376:	425b      	neglt	r3, r3
 800e378:	f042 0202 	orrlt.w	r2, r2, #2
 800e37c:	9307      	strge	r3, [sp, #28]
 800e37e:	9307      	strlt	r3, [sp, #28]
 800e380:	bfb8      	it	lt
 800e382:	9204      	strlt	r2, [sp, #16]
 800e384:	7823      	ldrb	r3, [r4, #0]
 800e386:	2b2e      	cmp	r3, #46	; 0x2e
 800e388:	d10c      	bne.n	800e3a4 <_svfiprintf_r+0x130>
 800e38a:	7863      	ldrb	r3, [r4, #1]
 800e38c:	2b2a      	cmp	r3, #42	; 0x2a
 800e38e:	d135      	bne.n	800e3fc <_svfiprintf_r+0x188>
 800e390:	9b03      	ldr	r3, [sp, #12]
 800e392:	1d1a      	adds	r2, r3, #4
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	9203      	str	r2, [sp, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	bfb8      	it	lt
 800e39c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3a0:	3402      	adds	r4, #2
 800e3a2:	9305      	str	r3, [sp, #20]
 800e3a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e470 <_svfiprintf_r+0x1fc>
 800e3a8:	7821      	ldrb	r1, [r4, #0]
 800e3aa:	2203      	movs	r2, #3
 800e3ac:	4650      	mov	r0, sl
 800e3ae:	f7f1 ff0f 	bl	80001d0 <memchr>
 800e3b2:	b140      	cbz	r0, 800e3c6 <_svfiprintf_r+0x152>
 800e3b4:	2340      	movs	r3, #64	; 0x40
 800e3b6:	eba0 000a 	sub.w	r0, r0, sl
 800e3ba:	fa03 f000 	lsl.w	r0, r3, r0
 800e3be:	9b04      	ldr	r3, [sp, #16]
 800e3c0:	4303      	orrs	r3, r0
 800e3c2:	3401      	adds	r4, #1
 800e3c4:	9304      	str	r3, [sp, #16]
 800e3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ca:	4826      	ldr	r0, [pc, #152]	; (800e464 <_svfiprintf_r+0x1f0>)
 800e3cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3d0:	2206      	movs	r2, #6
 800e3d2:	f7f1 fefd 	bl	80001d0 <memchr>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d038      	beq.n	800e44c <_svfiprintf_r+0x1d8>
 800e3da:	4b23      	ldr	r3, [pc, #140]	; (800e468 <_svfiprintf_r+0x1f4>)
 800e3dc:	bb1b      	cbnz	r3, 800e426 <_svfiprintf_r+0x1b2>
 800e3de:	9b03      	ldr	r3, [sp, #12]
 800e3e0:	3307      	adds	r3, #7
 800e3e2:	f023 0307 	bic.w	r3, r3, #7
 800e3e6:	3308      	adds	r3, #8
 800e3e8:	9303      	str	r3, [sp, #12]
 800e3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ec:	4433      	add	r3, r6
 800e3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f0:	e767      	b.n	800e2c2 <_svfiprintf_r+0x4e>
 800e3f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	2001      	movs	r0, #1
 800e3fa:	e7a5      	b.n	800e348 <_svfiprintf_r+0xd4>
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	3401      	adds	r4, #1
 800e400:	9305      	str	r3, [sp, #20]
 800e402:	4619      	mov	r1, r3
 800e404:	f04f 0c0a 	mov.w	ip, #10
 800e408:	4620      	mov	r0, r4
 800e40a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e40e:	3a30      	subs	r2, #48	; 0x30
 800e410:	2a09      	cmp	r2, #9
 800e412:	d903      	bls.n	800e41c <_svfiprintf_r+0x1a8>
 800e414:	2b00      	cmp	r3, #0
 800e416:	d0c5      	beq.n	800e3a4 <_svfiprintf_r+0x130>
 800e418:	9105      	str	r1, [sp, #20]
 800e41a:	e7c3      	b.n	800e3a4 <_svfiprintf_r+0x130>
 800e41c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e420:	4604      	mov	r4, r0
 800e422:	2301      	movs	r3, #1
 800e424:	e7f0      	b.n	800e408 <_svfiprintf_r+0x194>
 800e426:	ab03      	add	r3, sp, #12
 800e428:	9300      	str	r3, [sp, #0]
 800e42a:	462a      	mov	r2, r5
 800e42c:	4b0f      	ldr	r3, [pc, #60]	; (800e46c <_svfiprintf_r+0x1f8>)
 800e42e:	a904      	add	r1, sp, #16
 800e430:	4638      	mov	r0, r7
 800e432:	f3af 8000 	nop.w
 800e436:	1c42      	adds	r2, r0, #1
 800e438:	4606      	mov	r6, r0
 800e43a:	d1d6      	bne.n	800e3ea <_svfiprintf_r+0x176>
 800e43c:	89ab      	ldrh	r3, [r5, #12]
 800e43e:	065b      	lsls	r3, r3, #25
 800e440:	f53f af2c 	bmi.w	800e29c <_svfiprintf_r+0x28>
 800e444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e446:	b01d      	add	sp, #116	; 0x74
 800e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44c:	ab03      	add	r3, sp, #12
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	462a      	mov	r2, r5
 800e452:	4b06      	ldr	r3, [pc, #24]	; (800e46c <_svfiprintf_r+0x1f8>)
 800e454:	a904      	add	r1, sp, #16
 800e456:	4638      	mov	r0, r7
 800e458:	f000 f9d4 	bl	800e804 <_printf_i>
 800e45c:	e7eb      	b.n	800e436 <_svfiprintf_r+0x1c2>
 800e45e:	bf00      	nop
 800e460:	0800f4a8 	.word	0x0800f4a8
 800e464:	0800f4b2 	.word	0x0800f4b2
 800e468:	00000000 	.word	0x00000000
 800e46c:	0800e1bd 	.word	0x0800e1bd
 800e470:	0800f4ae 	.word	0x0800f4ae

0800e474 <__sfputc_r>:
 800e474:	6893      	ldr	r3, [r2, #8]
 800e476:	3b01      	subs	r3, #1
 800e478:	2b00      	cmp	r3, #0
 800e47a:	b410      	push	{r4}
 800e47c:	6093      	str	r3, [r2, #8]
 800e47e:	da08      	bge.n	800e492 <__sfputc_r+0x1e>
 800e480:	6994      	ldr	r4, [r2, #24]
 800e482:	42a3      	cmp	r3, r4
 800e484:	db01      	blt.n	800e48a <__sfputc_r+0x16>
 800e486:	290a      	cmp	r1, #10
 800e488:	d103      	bne.n	800e492 <__sfputc_r+0x1e>
 800e48a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e48e:	f7ff bad5 	b.w	800da3c <__swbuf_r>
 800e492:	6813      	ldr	r3, [r2, #0]
 800e494:	1c58      	adds	r0, r3, #1
 800e496:	6010      	str	r0, [r2, #0]
 800e498:	7019      	strb	r1, [r3, #0]
 800e49a:	4608      	mov	r0, r1
 800e49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4a0:	4770      	bx	lr

0800e4a2 <__sfputs_r>:
 800e4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a4:	4606      	mov	r6, r0
 800e4a6:	460f      	mov	r7, r1
 800e4a8:	4614      	mov	r4, r2
 800e4aa:	18d5      	adds	r5, r2, r3
 800e4ac:	42ac      	cmp	r4, r5
 800e4ae:	d101      	bne.n	800e4b4 <__sfputs_r+0x12>
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	e007      	b.n	800e4c4 <__sfputs_r+0x22>
 800e4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4b8:	463a      	mov	r2, r7
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	f7ff ffda 	bl	800e474 <__sfputc_r>
 800e4c0:	1c43      	adds	r3, r0, #1
 800e4c2:	d1f3      	bne.n	800e4ac <__sfputs_r+0xa>
 800e4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4c8 <_vfiprintf_r>:
 800e4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	460d      	mov	r5, r1
 800e4ce:	b09d      	sub	sp, #116	; 0x74
 800e4d0:	4614      	mov	r4, r2
 800e4d2:	4698      	mov	r8, r3
 800e4d4:	4606      	mov	r6, r0
 800e4d6:	b118      	cbz	r0, 800e4e0 <_vfiprintf_r+0x18>
 800e4d8:	6983      	ldr	r3, [r0, #24]
 800e4da:	b90b      	cbnz	r3, 800e4e0 <_vfiprintf_r+0x18>
 800e4dc:	f7ff fc88 	bl	800ddf0 <__sinit>
 800e4e0:	4b89      	ldr	r3, [pc, #548]	; (800e708 <_vfiprintf_r+0x240>)
 800e4e2:	429d      	cmp	r5, r3
 800e4e4:	d11b      	bne.n	800e51e <_vfiprintf_r+0x56>
 800e4e6:	6875      	ldr	r5, [r6, #4]
 800e4e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4ea:	07d9      	lsls	r1, r3, #31
 800e4ec:	d405      	bmi.n	800e4fa <_vfiprintf_r+0x32>
 800e4ee:	89ab      	ldrh	r3, [r5, #12]
 800e4f0:	059a      	lsls	r2, r3, #22
 800e4f2:	d402      	bmi.n	800e4fa <_vfiprintf_r+0x32>
 800e4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4f6:	f7ff fd19 	bl	800df2c <__retarget_lock_acquire_recursive>
 800e4fa:	89ab      	ldrh	r3, [r5, #12]
 800e4fc:	071b      	lsls	r3, r3, #28
 800e4fe:	d501      	bpl.n	800e504 <_vfiprintf_r+0x3c>
 800e500:	692b      	ldr	r3, [r5, #16]
 800e502:	b9eb      	cbnz	r3, 800e540 <_vfiprintf_r+0x78>
 800e504:	4629      	mov	r1, r5
 800e506:	4630      	mov	r0, r6
 800e508:	f7ff faea 	bl	800dae0 <__swsetup_r>
 800e50c:	b1c0      	cbz	r0, 800e540 <_vfiprintf_r+0x78>
 800e50e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e510:	07dc      	lsls	r4, r3, #31
 800e512:	d50e      	bpl.n	800e532 <_vfiprintf_r+0x6a>
 800e514:	f04f 30ff 	mov.w	r0, #4294967295
 800e518:	b01d      	add	sp, #116	; 0x74
 800e51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51e:	4b7b      	ldr	r3, [pc, #492]	; (800e70c <_vfiprintf_r+0x244>)
 800e520:	429d      	cmp	r5, r3
 800e522:	d101      	bne.n	800e528 <_vfiprintf_r+0x60>
 800e524:	68b5      	ldr	r5, [r6, #8]
 800e526:	e7df      	b.n	800e4e8 <_vfiprintf_r+0x20>
 800e528:	4b79      	ldr	r3, [pc, #484]	; (800e710 <_vfiprintf_r+0x248>)
 800e52a:	429d      	cmp	r5, r3
 800e52c:	bf08      	it	eq
 800e52e:	68f5      	ldreq	r5, [r6, #12]
 800e530:	e7da      	b.n	800e4e8 <_vfiprintf_r+0x20>
 800e532:	89ab      	ldrh	r3, [r5, #12]
 800e534:	0598      	lsls	r0, r3, #22
 800e536:	d4ed      	bmi.n	800e514 <_vfiprintf_r+0x4c>
 800e538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e53a:	f7ff fcf8 	bl	800df2e <__retarget_lock_release_recursive>
 800e53e:	e7e9      	b.n	800e514 <_vfiprintf_r+0x4c>
 800e540:	2300      	movs	r3, #0
 800e542:	9309      	str	r3, [sp, #36]	; 0x24
 800e544:	2320      	movs	r3, #32
 800e546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e54e:	2330      	movs	r3, #48	; 0x30
 800e550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e714 <_vfiprintf_r+0x24c>
 800e554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e558:	f04f 0901 	mov.w	r9, #1
 800e55c:	4623      	mov	r3, r4
 800e55e:	469a      	mov	sl, r3
 800e560:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e564:	b10a      	cbz	r2, 800e56a <_vfiprintf_r+0xa2>
 800e566:	2a25      	cmp	r2, #37	; 0x25
 800e568:	d1f9      	bne.n	800e55e <_vfiprintf_r+0x96>
 800e56a:	ebba 0b04 	subs.w	fp, sl, r4
 800e56e:	d00b      	beq.n	800e588 <_vfiprintf_r+0xc0>
 800e570:	465b      	mov	r3, fp
 800e572:	4622      	mov	r2, r4
 800e574:	4629      	mov	r1, r5
 800e576:	4630      	mov	r0, r6
 800e578:	f7ff ff93 	bl	800e4a2 <__sfputs_r>
 800e57c:	3001      	adds	r0, #1
 800e57e:	f000 80aa 	beq.w	800e6d6 <_vfiprintf_r+0x20e>
 800e582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e584:	445a      	add	r2, fp
 800e586:	9209      	str	r2, [sp, #36]	; 0x24
 800e588:	f89a 3000 	ldrb.w	r3, [sl]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 80a2 	beq.w	800e6d6 <_vfiprintf_r+0x20e>
 800e592:	2300      	movs	r3, #0
 800e594:	f04f 32ff 	mov.w	r2, #4294967295
 800e598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e59c:	f10a 0a01 	add.w	sl, sl, #1
 800e5a0:	9304      	str	r3, [sp, #16]
 800e5a2:	9307      	str	r3, [sp, #28]
 800e5a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5a8:	931a      	str	r3, [sp, #104]	; 0x68
 800e5aa:	4654      	mov	r4, sl
 800e5ac:	2205      	movs	r2, #5
 800e5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5b2:	4858      	ldr	r0, [pc, #352]	; (800e714 <_vfiprintf_r+0x24c>)
 800e5b4:	f7f1 fe0c 	bl	80001d0 <memchr>
 800e5b8:	9a04      	ldr	r2, [sp, #16]
 800e5ba:	b9d8      	cbnz	r0, 800e5f4 <_vfiprintf_r+0x12c>
 800e5bc:	06d1      	lsls	r1, r2, #27
 800e5be:	bf44      	itt	mi
 800e5c0:	2320      	movmi	r3, #32
 800e5c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5c6:	0713      	lsls	r3, r2, #28
 800e5c8:	bf44      	itt	mi
 800e5ca:	232b      	movmi	r3, #43	; 0x2b
 800e5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5d4:	2b2a      	cmp	r3, #42	; 0x2a
 800e5d6:	d015      	beq.n	800e604 <_vfiprintf_r+0x13c>
 800e5d8:	9a07      	ldr	r2, [sp, #28]
 800e5da:	4654      	mov	r4, sl
 800e5dc:	2000      	movs	r0, #0
 800e5de:	f04f 0c0a 	mov.w	ip, #10
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5e8:	3b30      	subs	r3, #48	; 0x30
 800e5ea:	2b09      	cmp	r3, #9
 800e5ec:	d94e      	bls.n	800e68c <_vfiprintf_r+0x1c4>
 800e5ee:	b1b0      	cbz	r0, 800e61e <_vfiprintf_r+0x156>
 800e5f0:	9207      	str	r2, [sp, #28]
 800e5f2:	e014      	b.n	800e61e <_vfiprintf_r+0x156>
 800e5f4:	eba0 0308 	sub.w	r3, r0, r8
 800e5f8:	fa09 f303 	lsl.w	r3, r9, r3
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	9304      	str	r3, [sp, #16]
 800e600:	46a2      	mov	sl, r4
 800e602:	e7d2      	b.n	800e5aa <_vfiprintf_r+0xe2>
 800e604:	9b03      	ldr	r3, [sp, #12]
 800e606:	1d19      	adds	r1, r3, #4
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	9103      	str	r1, [sp, #12]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	bfbb      	ittet	lt
 800e610:	425b      	neglt	r3, r3
 800e612:	f042 0202 	orrlt.w	r2, r2, #2
 800e616:	9307      	strge	r3, [sp, #28]
 800e618:	9307      	strlt	r3, [sp, #28]
 800e61a:	bfb8      	it	lt
 800e61c:	9204      	strlt	r2, [sp, #16]
 800e61e:	7823      	ldrb	r3, [r4, #0]
 800e620:	2b2e      	cmp	r3, #46	; 0x2e
 800e622:	d10c      	bne.n	800e63e <_vfiprintf_r+0x176>
 800e624:	7863      	ldrb	r3, [r4, #1]
 800e626:	2b2a      	cmp	r3, #42	; 0x2a
 800e628:	d135      	bne.n	800e696 <_vfiprintf_r+0x1ce>
 800e62a:	9b03      	ldr	r3, [sp, #12]
 800e62c:	1d1a      	adds	r2, r3, #4
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	9203      	str	r2, [sp, #12]
 800e632:	2b00      	cmp	r3, #0
 800e634:	bfb8      	it	lt
 800e636:	f04f 33ff 	movlt.w	r3, #4294967295
 800e63a:	3402      	adds	r4, #2
 800e63c:	9305      	str	r3, [sp, #20]
 800e63e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e724 <_vfiprintf_r+0x25c>
 800e642:	7821      	ldrb	r1, [r4, #0]
 800e644:	2203      	movs	r2, #3
 800e646:	4650      	mov	r0, sl
 800e648:	f7f1 fdc2 	bl	80001d0 <memchr>
 800e64c:	b140      	cbz	r0, 800e660 <_vfiprintf_r+0x198>
 800e64e:	2340      	movs	r3, #64	; 0x40
 800e650:	eba0 000a 	sub.w	r0, r0, sl
 800e654:	fa03 f000 	lsl.w	r0, r3, r0
 800e658:	9b04      	ldr	r3, [sp, #16]
 800e65a:	4303      	orrs	r3, r0
 800e65c:	3401      	adds	r4, #1
 800e65e:	9304      	str	r3, [sp, #16]
 800e660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e664:	482c      	ldr	r0, [pc, #176]	; (800e718 <_vfiprintf_r+0x250>)
 800e666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e66a:	2206      	movs	r2, #6
 800e66c:	f7f1 fdb0 	bl	80001d0 <memchr>
 800e670:	2800      	cmp	r0, #0
 800e672:	d03f      	beq.n	800e6f4 <_vfiprintf_r+0x22c>
 800e674:	4b29      	ldr	r3, [pc, #164]	; (800e71c <_vfiprintf_r+0x254>)
 800e676:	bb1b      	cbnz	r3, 800e6c0 <_vfiprintf_r+0x1f8>
 800e678:	9b03      	ldr	r3, [sp, #12]
 800e67a:	3307      	adds	r3, #7
 800e67c:	f023 0307 	bic.w	r3, r3, #7
 800e680:	3308      	adds	r3, #8
 800e682:	9303      	str	r3, [sp, #12]
 800e684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e686:	443b      	add	r3, r7
 800e688:	9309      	str	r3, [sp, #36]	; 0x24
 800e68a:	e767      	b.n	800e55c <_vfiprintf_r+0x94>
 800e68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e690:	460c      	mov	r4, r1
 800e692:	2001      	movs	r0, #1
 800e694:	e7a5      	b.n	800e5e2 <_vfiprintf_r+0x11a>
 800e696:	2300      	movs	r3, #0
 800e698:	3401      	adds	r4, #1
 800e69a:	9305      	str	r3, [sp, #20]
 800e69c:	4619      	mov	r1, r3
 800e69e:	f04f 0c0a 	mov.w	ip, #10
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6a8:	3a30      	subs	r2, #48	; 0x30
 800e6aa:	2a09      	cmp	r2, #9
 800e6ac:	d903      	bls.n	800e6b6 <_vfiprintf_r+0x1ee>
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d0c5      	beq.n	800e63e <_vfiprintf_r+0x176>
 800e6b2:	9105      	str	r1, [sp, #20]
 800e6b4:	e7c3      	b.n	800e63e <_vfiprintf_r+0x176>
 800e6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e7f0      	b.n	800e6a2 <_vfiprintf_r+0x1da>
 800e6c0:	ab03      	add	r3, sp, #12
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	462a      	mov	r2, r5
 800e6c6:	4b16      	ldr	r3, [pc, #88]	; (800e720 <_vfiprintf_r+0x258>)
 800e6c8:	a904      	add	r1, sp, #16
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f3af 8000 	nop.w
 800e6d0:	4607      	mov	r7, r0
 800e6d2:	1c78      	adds	r0, r7, #1
 800e6d4:	d1d6      	bne.n	800e684 <_vfiprintf_r+0x1bc>
 800e6d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6d8:	07d9      	lsls	r1, r3, #31
 800e6da:	d405      	bmi.n	800e6e8 <_vfiprintf_r+0x220>
 800e6dc:	89ab      	ldrh	r3, [r5, #12]
 800e6de:	059a      	lsls	r2, r3, #22
 800e6e0:	d402      	bmi.n	800e6e8 <_vfiprintf_r+0x220>
 800e6e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6e4:	f7ff fc23 	bl	800df2e <__retarget_lock_release_recursive>
 800e6e8:	89ab      	ldrh	r3, [r5, #12]
 800e6ea:	065b      	lsls	r3, r3, #25
 800e6ec:	f53f af12 	bmi.w	800e514 <_vfiprintf_r+0x4c>
 800e6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6f2:	e711      	b.n	800e518 <_vfiprintf_r+0x50>
 800e6f4:	ab03      	add	r3, sp, #12
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	462a      	mov	r2, r5
 800e6fa:	4b09      	ldr	r3, [pc, #36]	; (800e720 <_vfiprintf_r+0x258>)
 800e6fc:	a904      	add	r1, sp, #16
 800e6fe:	4630      	mov	r0, r6
 800e700:	f000 f880 	bl	800e804 <_printf_i>
 800e704:	e7e4      	b.n	800e6d0 <_vfiprintf_r+0x208>
 800e706:	bf00      	nop
 800e708:	0800f468 	.word	0x0800f468
 800e70c:	0800f488 	.word	0x0800f488
 800e710:	0800f448 	.word	0x0800f448
 800e714:	0800f4a8 	.word	0x0800f4a8
 800e718:	0800f4b2 	.word	0x0800f4b2
 800e71c:	00000000 	.word	0x00000000
 800e720:	0800e4a3 	.word	0x0800e4a3
 800e724:	0800f4ae 	.word	0x0800f4ae

0800e728 <_printf_common>:
 800e728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e72c:	4616      	mov	r6, r2
 800e72e:	4699      	mov	r9, r3
 800e730:	688a      	ldr	r2, [r1, #8]
 800e732:	690b      	ldr	r3, [r1, #16]
 800e734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e738:	4293      	cmp	r3, r2
 800e73a:	bfb8      	it	lt
 800e73c:	4613      	movlt	r3, r2
 800e73e:	6033      	str	r3, [r6, #0]
 800e740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e744:	4607      	mov	r7, r0
 800e746:	460c      	mov	r4, r1
 800e748:	b10a      	cbz	r2, 800e74e <_printf_common+0x26>
 800e74a:	3301      	adds	r3, #1
 800e74c:	6033      	str	r3, [r6, #0]
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	0699      	lsls	r1, r3, #26
 800e752:	bf42      	ittt	mi
 800e754:	6833      	ldrmi	r3, [r6, #0]
 800e756:	3302      	addmi	r3, #2
 800e758:	6033      	strmi	r3, [r6, #0]
 800e75a:	6825      	ldr	r5, [r4, #0]
 800e75c:	f015 0506 	ands.w	r5, r5, #6
 800e760:	d106      	bne.n	800e770 <_printf_common+0x48>
 800e762:	f104 0a19 	add.w	sl, r4, #25
 800e766:	68e3      	ldr	r3, [r4, #12]
 800e768:	6832      	ldr	r2, [r6, #0]
 800e76a:	1a9b      	subs	r3, r3, r2
 800e76c:	42ab      	cmp	r3, r5
 800e76e:	dc26      	bgt.n	800e7be <_printf_common+0x96>
 800e770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e774:	1e13      	subs	r3, r2, #0
 800e776:	6822      	ldr	r2, [r4, #0]
 800e778:	bf18      	it	ne
 800e77a:	2301      	movne	r3, #1
 800e77c:	0692      	lsls	r2, r2, #26
 800e77e:	d42b      	bmi.n	800e7d8 <_printf_common+0xb0>
 800e780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e784:	4649      	mov	r1, r9
 800e786:	4638      	mov	r0, r7
 800e788:	47c0      	blx	r8
 800e78a:	3001      	adds	r0, #1
 800e78c:	d01e      	beq.n	800e7cc <_printf_common+0xa4>
 800e78e:	6823      	ldr	r3, [r4, #0]
 800e790:	68e5      	ldr	r5, [r4, #12]
 800e792:	6832      	ldr	r2, [r6, #0]
 800e794:	f003 0306 	and.w	r3, r3, #6
 800e798:	2b04      	cmp	r3, #4
 800e79a:	bf08      	it	eq
 800e79c:	1aad      	subeq	r5, r5, r2
 800e79e:	68a3      	ldr	r3, [r4, #8]
 800e7a0:	6922      	ldr	r2, [r4, #16]
 800e7a2:	bf0c      	ite	eq
 800e7a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7a8:	2500      	movne	r5, #0
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	bfc4      	itt	gt
 800e7ae:	1a9b      	subgt	r3, r3, r2
 800e7b0:	18ed      	addgt	r5, r5, r3
 800e7b2:	2600      	movs	r6, #0
 800e7b4:	341a      	adds	r4, #26
 800e7b6:	42b5      	cmp	r5, r6
 800e7b8:	d11a      	bne.n	800e7f0 <_printf_common+0xc8>
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	e008      	b.n	800e7d0 <_printf_common+0xa8>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	4652      	mov	r2, sl
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	4638      	mov	r0, r7
 800e7c6:	47c0      	blx	r8
 800e7c8:	3001      	adds	r0, #1
 800e7ca:	d103      	bne.n	800e7d4 <_printf_common+0xac>
 800e7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d4:	3501      	adds	r5, #1
 800e7d6:	e7c6      	b.n	800e766 <_printf_common+0x3e>
 800e7d8:	18e1      	adds	r1, r4, r3
 800e7da:	1c5a      	adds	r2, r3, #1
 800e7dc:	2030      	movs	r0, #48	; 0x30
 800e7de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7e2:	4422      	add	r2, r4
 800e7e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e7e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e7ec:	3302      	adds	r3, #2
 800e7ee:	e7c7      	b.n	800e780 <_printf_common+0x58>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	4622      	mov	r2, r4
 800e7f4:	4649      	mov	r1, r9
 800e7f6:	4638      	mov	r0, r7
 800e7f8:	47c0      	blx	r8
 800e7fa:	3001      	adds	r0, #1
 800e7fc:	d0e6      	beq.n	800e7cc <_printf_common+0xa4>
 800e7fe:	3601      	adds	r6, #1
 800e800:	e7d9      	b.n	800e7b6 <_printf_common+0x8e>
	...

0800e804 <_printf_i>:
 800e804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e808:	7e0f      	ldrb	r7, [r1, #24]
 800e80a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e80c:	2f78      	cmp	r7, #120	; 0x78
 800e80e:	4691      	mov	r9, r2
 800e810:	4680      	mov	r8, r0
 800e812:	460c      	mov	r4, r1
 800e814:	469a      	mov	sl, r3
 800e816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e81a:	d807      	bhi.n	800e82c <_printf_i+0x28>
 800e81c:	2f62      	cmp	r7, #98	; 0x62
 800e81e:	d80a      	bhi.n	800e836 <_printf_i+0x32>
 800e820:	2f00      	cmp	r7, #0
 800e822:	f000 80d8 	beq.w	800e9d6 <_printf_i+0x1d2>
 800e826:	2f58      	cmp	r7, #88	; 0x58
 800e828:	f000 80a3 	beq.w	800e972 <_printf_i+0x16e>
 800e82c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e834:	e03a      	b.n	800e8ac <_printf_i+0xa8>
 800e836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e83a:	2b15      	cmp	r3, #21
 800e83c:	d8f6      	bhi.n	800e82c <_printf_i+0x28>
 800e83e:	a101      	add	r1, pc, #4	; (adr r1, 800e844 <_printf_i+0x40>)
 800e840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e844:	0800e89d 	.word	0x0800e89d
 800e848:	0800e8b1 	.word	0x0800e8b1
 800e84c:	0800e82d 	.word	0x0800e82d
 800e850:	0800e82d 	.word	0x0800e82d
 800e854:	0800e82d 	.word	0x0800e82d
 800e858:	0800e82d 	.word	0x0800e82d
 800e85c:	0800e8b1 	.word	0x0800e8b1
 800e860:	0800e82d 	.word	0x0800e82d
 800e864:	0800e82d 	.word	0x0800e82d
 800e868:	0800e82d 	.word	0x0800e82d
 800e86c:	0800e82d 	.word	0x0800e82d
 800e870:	0800e9bd 	.word	0x0800e9bd
 800e874:	0800e8e1 	.word	0x0800e8e1
 800e878:	0800e99f 	.word	0x0800e99f
 800e87c:	0800e82d 	.word	0x0800e82d
 800e880:	0800e82d 	.word	0x0800e82d
 800e884:	0800e9df 	.word	0x0800e9df
 800e888:	0800e82d 	.word	0x0800e82d
 800e88c:	0800e8e1 	.word	0x0800e8e1
 800e890:	0800e82d 	.word	0x0800e82d
 800e894:	0800e82d 	.word	0x0800e82d
 800e898:	0800e9a7 	.word	0x0800e9a7
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	1d1a      	adds	r2, r3, #4
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	602a      	str	r2, [r5, #0]
 800e8a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e0a3      	b.n	800e9f8 <_printf_i+0x1f4>
 800e8b0:	6820      	ldr	r0, [r4, #0]
 800e8b2:	6829      	ldr	r1, [r5, #0]
 800e8b4:	0606      	lsls	r6, r0, #24
 800e8b6:	f101 0304 	add.w	r3, r1, #4
 800e8ba:	d50a      	bpl.n	800e8d2 <_printf_i+0xce>
 800e8bc:	680e      	ldr	r6, [r1, #0]
 800e8be:	602b      	str	r3, [r5, #0]
 800e8c0:	2e00      	cmp	r6, #0
 800e8c2:	da03      	bge.n	800e8cc <_printf_i+0xc8>
 800e8c4:	232d      	movs	r3, #45	; 0x2d
 800e8c6:	4276      	negs	r6, r6
 800e8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8cc:	485e      	ldr	r0, [pc, #376]	; (800ea48 <_printf_i+0x244>)
 800e8ce:	230a      	movs	r3, #10
 800e8d0:	e019      	b.n	800e906 <_printf_i+0x102>
 800e8d2:	680e      	ldr	r6, [r1, #0]
 800e8d4:	602b      	str	r3, [r5, #0]
 800e8d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e8da:	bf18      	it	ne
 800e8dc:	b236      	sxthne	r6, r6
 800e8de:	e7ef      	b.n	800e8c0 <_printf_i+0xbc>
 800e8e0:	682b      	ldr	r3, [r5, #0]
 800e8e2:	6820      	ldr	r0, [r4, #0]
 800e8e4:	1d19      	adds	r1, r3, #4
 800e8e6:	6029      	str	r1, [r5, #0]
 800e8e8:	0601      	lsls	r1, r0, #24
 800e8ea:	d501      	bpl.n	800e8f0 <_printf_i+0xec>
 800e8ec:	681e      	ldr	r6, [r3, #0]
 800e8ee:	e002      	b.n	800e8f6 <_printf_i+0xf2>
 800e8f0:	0646      	lsls	r6, r0, #25
 800e8f2:	d5fb      	bpl.n	800e8ec <_printf_i+0xe8>
 800e8f4:	881e      	ldrh	r6, [r3, #0]
 800e8f6:	4854      	ldr	r0, [pc, #336]	; (800ea48 <_printf_i+0x244>)
 800e8f8:	2f6f      	cmp	r7, #111	; 0x6f
 800e8fa:	bf0c      	ite	eq
 800e8fc:	2308      	moveq	r3, #8
 800e8fe:	230a      	movne	r3, #10
 800e900:	2100      	movs	r1, #0
 800e902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e906:	6865      	ldr	r5, [r4, #4]
 800e908:	60a5      	str	r5, [r4, #8]
 800e90a:	2d00      	cmp	r5, #0
 800e90c:	bfa2      	ittt	ge
 800e90e:	6821      	ldrge	r1, [r4, #0]
 800e910:	f021 0104 	bicge.w	r1, r1, #4
 800e914:	6021      	strge	r1, [r4, #0]
 800e916:	b90e      	cbnz	r6, 800e91c <_printf_i+0x118>
 800e918:	2d00      	cmp	r5, #0
 800e91a:	d04d      	beq.n	800e9b8 <_printf_i+0x1b4>
 800e91c:	4615      	mov	r5, r2
 800e91e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e922:	fb03 6711 	mls	r7, r3, r1, r6
 800e926:	5dc7      	ldrb	r7, [r0, r7]
 800e928:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e92c:	4637      	mov	r7, r6
 800e92e:	42bb      	cmp	r3, r7
 800e930:	460e      	mov	r6, r1
 800e932:	d9f4      	bls.n	800e91e <_printf_i+0x11a>
 800e934:	2b08      	cmp	r3, #8
 800e936:	d10b      	bne.n	800e950 <_printf_i+0x14c>
 800e938:	6823      	ldr	r3, [r4, #0]
 800e93a:	07de      	lsls	r6, r3, #31
 800e93c:	d508      	bpl.n	800e950 <_printf_i+0x14c>
 800e93e:	6923      	ldr	r3, [r4, #16]
 800e940:	6861      	ldr	r1, [r4, #4]
 800e942:	4299      	cmp	r1, r3
 800e944:	bfde      	ittt	le
 800e946:	2330      	movle	r3, #48	; 0x30
 800e948:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e94c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e950:	1b52      	subs	r2, r2, r5
 800e952:	6122      	str	r2, [r4, #16]
 800e954:	f8cd a000 	str.w	sl, [sp]
 800e958:	464b      	mov	r3, r9
 800e95a:	aa03      	add	r2, sp, #12
 800e95c:	4621      	mov	r1, r4
 800e95e:	4640      	mov	r0, r8
 800e960:	f7ff fee2 	bl	800e728 <_printf_common>
 800e964:	3001      	adds	r0, #1
 800e966:	d14c      	bne.n	800ea02 <_printf_i+0x1fe>
 800e968:	f04f 30ff 	mov.w	r0, #4294967295
 800e96c:	b004      	add	sp, #16
 800e96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e972:	4835      	ldr	r0, [pc, #212]	; (800ea48 <_printf_i+0x244>)
 800e974:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e978:	6829      	ldr	r1, [r5, #0]
 800e97a:	6823      	ldr	r3, [r4, #0]
 800e97c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e980:	6029      	str	r1, [r5, #0]
 800e982:	061d      	lsls	r5, r3, #24
 800e984:	d514      	bpl.n	800e9b0 <_printf_i+0x1ac>
 800e986:	07df      	lsls	r7, r3, #31
 800e988:	bf44      	itt	mi
 800e98a:	f043 0320 	orrmi.w	r3, r3, #32
 800e98e:	6023      	strmi	r3, [r4, #0]
 800e990:	b91e      	cbnz	r6, 800e99a <_printf_i+0x196>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	f023 0320 	bic.w	r3, r3, #32
 800e998:	6023      	str	r3, [r4, #0]
 800e99a:	2310      	movs	r3, #16
 800e99c:	e7b0      	b.n	800e900 <_printf_i+0xfc>
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	f043 0320 	orr.w	r3, r3, #32
 800e9a4:	6023      	str	r3, [r4, #0]
 800e9a6:	2378      	movs	r3, #120	; 0x78
 800e9a8:	4828      	ldr	r0, [pc, #160]	; (800ea4c <_printf_i+0x248>)
 800e9aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9ae:	e7e3      	b.n	800e978 <_printf_i+0x174>
 800e9b0:	0659      	lsls	r1, r3, #25
 800e9b2:	bf48      	it	mi
 800e9b4:	b2b6      	uxthmi	r6, r6
 800e9b6:	e7e6      	b.n	800e986 <_printf_i+0x182>
 800e9b8:	4615      	mov	r5, r2
 800e9ba:	e7bb      	b.n	800e934 <_printf_i+0x130>
 800e9bc:	682b      	ldr	r3, [r5, #0]
 800e9be:	6826      	ldr	r6, [r4, #0]
 800e9c0:	6961      	ldr	r1, [r4, #20]
 800e9c2:	1d18      	adds	r0, r3, #4
 800e9c4:	6028      	str	r0, [r5, #0]
 800e9c6:	0635      	lsls	r5, r6, #24
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	d501      	bpl.n	800e9d0 <_printf_i+0x1cc>
 800e9cc:	6019      	str	r1, [r3, #0]
 800e9ce:	e002      	b.n	800e9d6 <_printf_i+0x1d2>
 800e9d0:	0670      	lsls	r0, r6, #25
 800e9d2:	d5fb      	bpl.n	800e9cc <_printf_i+0x1c8>
 800e9d4:	8019      	strh	r1, [r3, #0]
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	6123      	str	r3, [r4, #16]
 800e9da:	4615      	mov	r5, r2
 800e9dc:	e7ba      	b.n	800e954 <_printf_i+0x150>
 800e9de:	682b      	ldr	r3, [r5, #0]
 800e9e0:	1d1a      	adds	r2, r3, #4
 800e9e2:	602a      	str	r2, [r5, #0]
 800e9e4:	681d      	ldr	r5, [r3, #0]
 800e9e6:	6862      	ldr	r2, [r4, #4]
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	f7f1 fbf0 	bl	80001d0 <memchr>
 800e9f0:	b108      	cbz	r0, 800e9f6 <_printf_i+0x1f2>
 800e9f2:	1b40      	subs	r0, r0, r5
 800e9f4:	6060      	str	r0, [r4, #4]
 800e9f6:	6863      	ldr	r3, [r4, #4]
 800e9f8:	6123      	str	r3, [r4, #16]
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea00:	e7a8      	b.n	800e954 <_printf_i+0x150>
 800ea02:	6923      	ldr	r3, [r4, #16]
 800ea04:	462a      	mov	r2, r5
 800ea06:	4649      	mov	r1, r9
 800ea08:	4640      	mov	r0, r8
 800ea0a:	47d0      	blx	sl
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	d0ab      	beq.n	800e968 <_printf_i+0x164>
 800ea10:	6823      	ldr	r3, [r4, #0]
 800ea12:	079b      	lsls	r3, r3, #30
 800ea14:	d413      	bmi.n	800ea3e <_printf_i+0x23a>
 800ea16:	68e0      	ldr	r0, [r4, #12]
 800ea18:	9b03      	ldr	r3, [sp, #12]
 800ea1a:	4298      	cmp	r0, r3
 800ea1c:	bfb8      	it	lt
 800ea1e:	4618      	movlt	r0, r3
 800ea20:	e7a4      	b.n	800e96c <_printf_i+0x168>
 800ea22:	2301      	movs	r3, #1
 800ea24:	4632      	mov	r2, r6
 800ea26:	4649      	mov	r1, r9
 800ea28:	4640      	mov	r0, r8
 800ea2a:	47d0      	blx	sl
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	d09b      	beq.n	800e968 <_printf_i+0x164>
 800ea30:	3501      	adds	r5, #1
 800ea32:	68e3      	ldr	r3, [r4, #12]
 800ea34:	9903      	ldr	r1, [sp, #12]
 800ea36:	1a5b      	subs	r3, r3, r1
 800ea38:	42ab      	cmp	r3, r5
 800ea3a:	dcf2      	bgt.n	800ea22 <_printf_i+0x21e>
 800ea3c:	e7eb      	b.n	800ea16 <_printf_i+0x212>
 800ea3e:	2500      	movs	r5, #0
 800ea40:	f104 0619 	add.w	r6, r4, #25
 800ea44:	e7f5      	b.n	800ea32 <_printf_i+0x22e>
 800ea46:	bf00      	nop
 800ea48:	0800f4b9 	.word	0x0800f4b9
 800ea4c:	0800f4ca 	.word	0x0800f4ca

0800ea50 <_sbrk_r>:
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	4d06      	ldr	r5, [pc, #24]	; (800ea6c <_sbrk_r+0x1c>)
 800ea54:	2300      	movs	r3, #0
 800ea56:	4604      	mov	r4, r0
 800ea58:	4608      	mov	r0, r1
 800ea5a:	602b      	str	r3, [r5, #0]
 800ea5c:	f7f3 ff62 	bl	8002924 <_sbrk>
 800ea60:	1c43      	adds	r3, r0, #1
 800ea62:	d102      	bne.n	800ea6a <_sbrk_r+0x1a>
 800ea64:	682b      	ldr	r3, [r5, #0]
 800ea66:	b103      	cbz	r3, 800ea6a <_sbrk_r+0x1a>
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	bd38      	pop	{r3, r4, r5, pc}
 800ea6c:	20003884 	.word	0x20003884

0800ea70 <__sread>:
 800ea70:	b510      	push	{r4, lr}
 800ea72:	460c      	mov	r4, r1
 800ea74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea78:	f000 f8f8 	bl	800ec6c <_read_r>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	bfab      	itete	ge
 800ea80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea82:	89a3      	ldrhlt	r3, [r4, #12]
 800ea84:	181b      	addge	r3, r3, r0
 800ea86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea8a:	bfac      	ite	ge
 800ea8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea8e:	81a3      	strhlt	r3, [r4, #12]
 800ea90:	bd10      	pop	{r4, pc}

0800ea92 <__swrite>:
 800ea92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea96:	461f      	mov	r7, r3
 800ea98:	898b      	ldrh	r3, [r1, #12]
 800ea9a:	05db      	lsls	r3, r3, #23
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	4616      	mov	r6, r2
 800eaa2:	d505      	bpl.n	800eab0 <__swrite+0x1e>
 800eaa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaa8:	2302      	movs	r3, #2
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f000 f868 	bl	800eb80 <_lseek_r>
 800eab0:	89a3      	ldrh	r3, [r4, #12]
 800eab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eaba:	81a3      	strh	r3, [r4, #12]
 800eabc:	4632      	mov	r2, r6
 800eabe:	463b      	mov	r3, r7
 800eac0:	4628      	mov	r0, r5
 800eac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eac6:	f000 b817 	b.w	800eaf8 <_write_r>

0800eaca <__sseek>:
 800eaca:	b510      	push	{r4, lr}
 800eacc:	460c      	mov	r4, r1
 800eace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ead2:	f000 f855 	bl	800eb80 <_lseek_r>
 800ead6:	1c43      	adds	r3, r0, #1
 800ead8:	89a3      	ldrh	r3, [r4, #12]
 800eada:	bf15      	itete	ne
 800eadc:	6560      	strne	r0, [r4, #84]	; 0x54
 800eade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eae6:	81a3      	strheq	r3, [r4, #12]
 800eae8:	bf18      	it	ne
 800eaea:	81a3      	strhne	r3, [r4, #12]
 800eaec:	bd10      	pop	{r4, pc}

0800eaee <__sclose>:
 800eaee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaf2:	f000 b813 	b.w	800eb1c <_close_r>
	...

0800eaf8 <_write_r>:
 800eaf8:	b538      	push	{r3, r4, r5, lr}
 800eafa:	4d07      	ldr	r5, [pc, #28]	; (800eb18 <_write_r+0x20>)
 800eafc:	4604      	mov	r4, r0
 800eafe:	4608      	mov	r0, r1
 800eb00:	4611      	mov	r1, r2
 800eb02:	2200      	movs	r2, #0
 800eb04:	602a      	str	r2, [r5, #0]
 800eb06:	461a      	mov	r2, r3
 800eb08:	f7f3 febb 	bl	8002882 <_write>
 800eb0c:	1c43      	adds	r3, r0, #1
 800eb0e:	d102      	bne.n	800eb16 <_write_r+0x1e>
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	b103      	cbz	r3, 800eb16 <_write_r+0x1e>
 800eb14:	6023      	str	r3, [r4, #0]
 800eb16:	bd38      	pop	{r3, r4, r5, pc}
 800eb18:	20003884 	.word	0x20003884

0800eb1c <_close_r>:
 800eb1c:	b538      	push	{r3, r4, r5, lr}
 800eb1e:	4d06      	ldr	r5, [pc, #24]	; (800eb38 <_close_r+0x1c>)
 800eb20:	2300      	movs	r3, #0
 800eb22:	4604      	mov	r4, r0
 800eb24:	4608      	mov	r0, r1
 800eb26:	602b      	str	r3, [r5, #0]
 800eb28:	f7f3 fec7 	bl	80028ba <_close>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	d102      	bne.n	800eb36 <_close_r+0x1a>
 800eb30:	682b      	ldr	r3, [r5, #0]
 800eb32:	b103      	cbz	r3, 800eb36 <_close_r+0x1a>
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	bd38      	pop	{r3, r4, r5, pc}
 800eb38:	20003884 	.word	0x20003884

0800eb3c <_fstat_r>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	4d07      	ldr	r5, [pc, #28]	; (800eb5c <_fstat_r+0x20>)
 800eb40:	2300      	movs	r3, #0
 800eb42:	4604      	mov	r4, r0
 800eb44:	4608      	mov	r0, r1
 800eb46:	4611      	mov	r1, r2
 800eb48:	602b      	str	r3, [r5, #0]
 800eb4a:	f7f3 fec2 	bl	80028d2 <_fstat>
 800eb4e:	1c43      	adds	r3, r0, #1
 800eb50:	d102      	bne.n	800eb58 <_fstat_r+0x1c>
 800eb52:	682b      	ldr	r3, [r5, #0]
 800eb54:	b103      	cbz	r3, 800eb58 <_fstat_r+0x1c>
 800eb56:	6023      	str	r3, [r4, #0]
 800eb58:	bd38      	pop	{r3, r4, r5, pc}
 800eb5a:	bf00      	nop
 800eb5c:	20003884 	.word	0x20003884

0800eb60 <_isatty_r>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	4d06      	ldr	r5, [pc, #24]	; (800eb7c <_isatty_r+0x1c>)
 800eb64:	2300      	movs	r3, #0
 800eb66:	4604      	mov	r4, r0
 800eb68:	4608      	mov	r0, r1
 800eb6a:	602b      	str	r3, [r5, #0]
 800eb6c:	f7f3 fec1 	bl	80028f2 <_isatty>
 800eb70:	1c43      	adds	r3, r0, #1
 800eb72:	d102      	bne.n	800eb7a <_isatty_r+0x1a>
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	b103      	cbz	r3, 800eb7a <_isatty_r+0x1a>
 800eb78:	6023      	str	r3, [r4, #0]
 800eb7a:	bd38      	pop	{r3, r4, r5, pc}
 800eb7c:	20003884 	.word	0x20003884

0800eb80 <_lseek_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	4d07      	ldr	r5, [pc, #28]	; (800eba0 <_lseek_r+0x20>)
 800eb84:	4604      	mov	r4, r0
 800eb86:	4608      	mov	r0, r1
 800eb88:	4611      	mov	r1, r2
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	602a      	str	r2, [r5, #0]
 800eb8e:	461a      	mov	r2, r3
 800eb90:	f7f3 feba 	bl	8002908 <_lseek>
 800eb94:	1c43      	adds	r3, r0, #1
 800eb96:	d102      	bne.n	800eb9e <_lseek_r+0x1e>
 800eb98:	682b      	ldr	r3, [r5, #0]
 800eb9a:	b103      	cbz	r3, 800eb9e <_lseek_r+0x1e>
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	bd38      	pop	{r3, r4, r5, pc}
 800eba0:	20003884 	.word	0x20003884

0800eba4 <memcpy>:
 800eba4:	440a      	add	r2, r1
 800eba6:	4291      	cmp	r1, r2
 800eba8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebac:	d100      	bne.n	800ebb0 <memcpy+0xc>
 800ebae:	4770      	bx	lr
 800ebb0:	b510      	push	{r4, lr}
 800ebb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebba:	4291      	cmp	r1, r2
 800ebbc:	d1f9      	bne.n	800ebb2 <memcpy+0xe>
 800ebbe:	bd10      	pop	{r4, pc}

0800ebc0 <memmove>:
 800ebc0:	4288      	cmp	r0, r1
 800ebc2:	b510      	push	{r4, lr}
 800ebc4:	eb01 0402 	add.w	r4, r1, r2
 800ebc8:	d902      	bls.n	800ebd0 <memmove+0x10>
 800ebca:	4284      	cmp	r4, r0
 800ebcc:	4623      	mov	r3, r4
 800ebce:	d807      	bhi.n	800ebe0 <memmove+0x20>
 800ebd0:	1e43      	subs	r3, r0, #1
 800ebd2:	42a1      	cmp	r1, r4
 800ebd4:	d008      	beq.n	800ebe8 <memmove+0x28>
 800ebd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebde:	e7f8      	b.n	800ebd2 <memmove+0x12>
 800ebe0:	4402      	add	r2, r0
 800ebe2:	4601      	mov	r1, r0
 800ebe4:	428a      	cmp	r2, r1
 800ebe6:	d100      	bne.n	800ebea <memmove+0x2a>
 800ebe8:	bd10      	pop	{r4, pc}
 800ebea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebf2:	e7f7      	b.n	800ebe4 <memmove+0x24>

0800ebf4 <__malloc_lock>:
 800ebf4:	4801      	ldr	r0, [pc, #4]	; (800ebfc <__malloc_lock+0x8>)
 800ebf6:	f7ff b999 	b.w	800df2c <__retarget_lock_acquire_recursive>
 800ebfa:	bf00      	nop
 800ebfc:	20003878 	.word	0x20003878

0800ec00 <__malloc_unlock>:
 800ec00:	4801      	ldr	r0, [pc, #4]	; (800ec08 <__malloc_unlock+0x8>)
 800ec02:	f7ff b994 	b.w	800df2e <__retarget_lock_release_recursive>
 800ec06:	bf00      	nop
 800ec08:	20003878 	.word	0x20003878

0800ec0c <_realloc_r>:
 800ec0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec10:	4680      	mov	r8, r0
 800ec12:	4614      	mov	r4, r2
 800ec14:	460e      	mov	r6, r1
 800ec16:	b921      	cbnz	r1, 800ec22 <_realloc_r+0x16>
 800ec18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1c:	4611      	mov	r1, r2
 800ec1e:	f7ff ba59 	b.w	800e0d4 <_malloc_r>
 800ec22:	b92a      	cbnz	r2, 800ec30 <_realloc_r+0x24>
 800ec24:	f7ff f9ea 	bl	800dffc <_free_r>
 800ec28:	4625      	mov	r5, r4
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec30:	f000 f82e 	bl	800ec90 <_malloc_usable_size_r>
 800ec34:	4284      	cmp	r4, r0
 800ec36:	4607      	mov	r7, r0
 800ec38:	d802      	bhi.n	800ec40 <_realloc_r+0x34>
 800ec3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec3e:	d812      	bhi.n	800ec66 <_realloc_r+0x5a>
 800ec40:	4621      	mov	r1, r4
 800ec42:	4640      	mov	r0, r8
 800ec44:	f7ff fa46 	bl	800e0d4 <_malloc_r>
 800ec48:	4605      	mov	r5, r0
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d0ed      	beq.n	800ec2a <_realloc_r+0x1e>
 800ec4e:	42bc      	cmp	r4, r7
 800ec50:	4622      	mov	r2, r4
 800ec52:	4631      	mov	r1, r6
 800ec54:	bf28      	it	cs
 800ec56:	463a      	movcs	r2, r7
 800ec58:	f7ff ffa4 	bl	800eba4 <memcpy>
 800ec5c:	4631      	mov	r1, r6
 800ec5e:	4640      	mov	r0, r8
 800ec60:	f7ff f9cc 	bl	800dffc <_free_r>
 800ec64:	e7e1      	b.n	800ec2a <_realloc_r+0x1e>
 800ec66:	4635      	mov	r5, r6
 800ec68:	e7df      	b.n	800ec2a <_realloc_r+0x1e>
	...

0800ec6c <_read_r>:
 800ec6c:	b538      	push	{r3, r4, r5, lr}
 800ec6e:	4d07      	ldr	r5, [pc, #28]	; (800ec8c <_read_r+0x20>)
 800ec70:	4604      	mov	r4, r0
 800ec72:	4608      	mov	r0, r1
 800ec74:	4611      	mov	r1, r2
 800ec76:	2200      	movs	r2, #0
 800ec78:	602a      	str	r2, [r5, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	f7f3 fde4 	bl	8002848 <_read>
 800ec80:	1c43      	adds	r3, r0, #1
 800ec82:	d102      	bne.n	800ec8a <_read_r+0x1e>
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	b103      	cbz	r3, 800ec8a <_read_r+0x1e>
 800ec88:	6023      	str	r3, [r4, #0]
 800ec8a:	bd38      	pop	{r3, r4, r5, pc}
 800ec8c:	20003884 	.word	0x20003884

0800ec90 <_malloc_usable_size_r>:
 800ec90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec94:	1f18      	subs	r0, r3, #4
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	bfbc      	itt	lt
 800ec9a:	580b      	ldrlt	r3, [r1, r0]
 800ec9c:	18c0      	addlt	r0, r0, r3
 800ec9e:	4770      	bx	lr

0800eca0 <_init>:
 800eca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca2:	bf00      	nop
 800eca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca6:	bc08      	pop	{r3}
 800eca8:	469e      	mov	lr, r3
 800ecaa:	4770      	bx	lr

0800ecac <_fini>:
 800ecac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecae:	bf00      	nop
 800ecb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecb2:	bc08      	pop	{r3}
 800ecb4:	469e      	mov	lr, r3
 800ecb6:	4770      	bx	lr
