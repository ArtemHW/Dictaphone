
music_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800da34  0800da34  0001da34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e208  0800e208  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800e208  0800e208  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e208  0800e208  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e208  0800e208  0001e208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e20c  0800e20c  0001e20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800e210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003748  20000098  0800e2a8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037e0  0800e2a8  000237e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2a5  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bd  00000000  00000000  0003a36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0003db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  0003f218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f037  00000000  00000000  00040788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edf9  00000000  00000000  0005f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad3f1  00000000  00000000  0007e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b9a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d0  00000000  00000000  0012b9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da1c 	.word	0x0800da1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800da1c 	.word	0x0800da1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027a:	4804      	ldr	r0, [pc, #16]	; (800028c <SELECT+0x1c>)
 800027c:	f002 fe84 	bl	8002f88 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000280:	2001      	movs	r0, #1
 8000282:	f002 f9ed 	bl	8002660 <HAL_Delay>
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	48000400 	.word	0x48000400

08000290 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029a:	4804      	ldr	r0, [pc, #16]	; (80002ac <DESELECT+0x1c>)
 800029c:	f002 fe74 	bl	8002f88 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f002 f9dd 	bl	8002660 <HAL_Delay>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	48000400 	.word	0x48000400

080002b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002ba:	bf00      	nop
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <SPI_TxByte+0x30>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d1f8      	bne.n	80002bc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80002ca:	1df9      	adds	r1, r7, #7
 80002cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d0:	2201      	movs	r2, #1
 80002d2:	4803      	ldr	r0, [pc, #12]	; (80002e0 <SPI_TxByte+0x30>)
 80002d4:	f004 ff65 	bl	80051a2 <HAL_SPI_Transmit>
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000114 	.word	0x20000114

080002e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002f0:	bf00      	nop
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <SPI_TxBuffer+0x34>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f003 0302 	and.w	r3, r3, #2
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	d1f8      	bne.n	80002f2 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000300:	887a      	ldrh	r2, [r7, #2]
 8000302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000306:	6879      	ldr	r1, [r7, #4]
 8000308:	4803      	ldr	r0, [pc, #12]	; (8000318 <SPI_TxBuffer+0x34>)
 800030a:	f004 ff4a 	bl	80051a2 <HAL_SPI_Transmit>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000114 	.word	0x20000114

0800031c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000322:	23ff      	movs	r3, #255	; 0xff
 8000324:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000326:	bf00      	nop
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <SPI_RxByte+0x38>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	2b02      	cmp	r3, #2
 8000334:	d1f8      	bne.n	8000328 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000336:	1dba      	adds	r2, r7, #6
 8000338:	1df9      	adds	r1, r7, #7
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	2301      	movs	r3, #1
 8000342:	4804      	ldr	r0, [pc, #16]	; (8000354 <SPI_RxByte+0x38>)
 8000344:	f005 f8a2 	bl	800548c <HAL_SPI_TransmitReceive>

  return data;
 8000348:	79bb      	ldrb	r3, [r7, #6]
}
 800034a:	4618      	mov	r0, r3
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000114 	.word	0x20000114

08000358 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000360:	f7ff ffdc 	bl	800031c <SPI_RxByte>
 8000364:	4603      	mov	r3, r0
 8000366:	461a      	mov	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	701a      	strb	r2, [r3, #0]
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <SD_ReadyWait+0x30>)
 800037c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000380:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000382:	f7ff ffcb 	bl	800031c <SPI_RxByte>
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2bff      	cmp	r3, #255	; 0xff
 800038e:	d003      	beq.n	8000398 <SD_ReadyWait+0x24>
 8000390:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SD_ReadyWait+0x30>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d1f4      	bne.n	8000382 <SD_ReadyWait+0xe>

  return res;
 8000398:	79fb      	ldrb	r3, [r7, #7]
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200000b6 	.word	0x200000b6

080003a8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80003ae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80003b2:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80003b4:	f7ff ff6c 	bl	8000290 <DESELECT>
  for(int i = 0; i < 10; i++)
 80003b8:	2300      	movs	r3, #0
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	e005      	b.n	80003ca <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80003be:	20ff      	movs	r0, #255	; 0xff
 80003c0:	f7ff ff76 	bl	80002b0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	3301      	adds	r3, #1
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	2b09      	cmp	r3, #9
 80003ce:	ddf6      	ble.n	80003be <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80003d0:	f7ff ff4e 	bl	8000270 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80003d4:	2340      	movs	r3, #64	; 0x40
 80003d6:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80003e8:	2395      	movs	r3, #149	; 0x95
 80003ea:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80003ec:	463b      	mov	r3, r7
 80003ee:	2106      	movs	r1, #6
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff ff77 	bl	80002e4 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80003f6:	e002      	b.n	80003fe <SD_PowerOn+0x56>
  {
    cnt--;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80003fe:	f7ff ff8d 	bl	800031c <SPI_RxByte>
 8000402:	4603      	mov	r3, r0
 8000404:	2b01      	cmp	r3, #1
 8000406:	d002      	beq.n	800040e <SD_PowerOn+0x66>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1f4      	bne.n	80003f8 <SD_PowerOn+0x50>
  }

  DESELECT();
 800040e:	f7ff ff3f 	bl	8000290 <DESELECT>
  SPI_TxByte(0XFF);
 8000412:	20ff      	movs	r0, #255	; 0xff
 8000414:	f7ff ff4c 	bl	80002b0 <SPI_TxByte>

  PowerFlag = 1;
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <SD_PowerOn+0x80>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200000b9 	.word	0x200000b9

0800042c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <SD_PowerOff+0x14>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	200000b9 	.word	0x200000b9

08000444 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <SD_CheckPower+0x14>)
 800044a:	781b      	ldrb	r3, [r3, #0]
}
 800044c:	4618      	mov	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	200000b9 	.word	0x200000b9

0800045c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <SD_RxDataBlock+0x58>)
 8000468:	22c8      	movs	r2, #200	; 0xc8
 800046a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800046c:	f7ff ff56 	bl	800031c <SPI_RxByte>
 8000470:	4603      	mov	r3, r0
 8000472:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	2bff      	cmp	r3, #255	; 0xff
 8000478:	d103      	bne.n	8000482 <SD_RxDataBlock+0x26>
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <SD_RxDataBlock+0x58>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1f4      	bne.n	800046c <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	2bfe      	cmp	r3, #254	; 0xfe
 8000486:	d001      	beq.n	800048c <SD_RxDataBlock+0x30>
 8000488:	2300      	movs	r3, #0
 800048a:	e00f      	b.n	80004ac <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff60 	bl	8000358 <SPI_RxBytePtr>
  } while(len--);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	1e5a      	subs	r2, r3, #1
 800049c:	603a      	str	r2, [r7, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d1f4      	bne.n	800048c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80004a2:	f7ff ff3b 	bl	800031c <SPI_RxByte>
  SPI_RxByte();
 80004a6:	f7ff ff39 	bl	800031c <SPI_RxByte>

  return TRUE;
 80004aa:	2301      	movs	r3, #1
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200000b4 	.word	0x200000b4

080004b8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80004c8:	f7ff ff54 	bl	8000374 <SD_ReadyWait>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2bff      	cmp	r3, #255	; 0xff
 80004d0:	d001      	beq.n	80004d6 <SD_TxDataBlock+0x1e>
 80004d2:	2300      	movs	r3, #0
 80004d4:	e02f      	b.n	8000536 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fee9 	bl	80002b0 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80004de:	78fb      	ldrb	r3, [r7, #3]
 80004e0:	2bfd      	cmp	r3, #253	; 0xfd
 80004e2:	d020      	beq.n	8000526 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80004e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff fefb 	bl	80002e4 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80004ee:	f7ff ff15 	bl	800031c <SPI_RxByte>
    SPI_RxByte();
 80004f2:	f7ff ff13 	bl	800031c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80004f6:	e00b      	b.n	8000510 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80004f8:	f7ff ff10 	bl	800031c <SPI_RxByte>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f003 031f 	and.w	r3, r3, #31
 8000506:	2b05      	cmp	r3, #5
 8000508:	d006      	beq.n	8000518 <SD_TxDataBlock+0x60>
      i++;
 800050a:	7bbb      	ldrb	r3, [r7, #14]
 800050c:	3301      	adds	r3, #1
 800050e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000510:	7bbb      	ldrb	r3, [r7, #14]
 8000512:	2b40      	cmp	r3, #64	; 0x40
 8000514:	d9f0      	bls.n	80004f8 <SD_TxDataBlock+0x40>
 8000516:	e000      	b.n	800051a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000518:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800051a:	bf00      	nop
 800051c:	f7ff fefe 	bl	800031c <SPI_RxByte>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0fa      	beq.n	800051c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	2b05      	cmp	r3, #5
 800052e:	d101      	bne.n	8000534 <SD_TxDataBlock+0x7c>
 8000530:	2301      	movs	r3, #1
 8000532:	e000      	b.n	8000536 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	4603      	mov	r3, r0
 8000546:	6039      	str	r1, [r7, #0]
 8000548:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800054a:	f7ff ff13 	bl	8000374 <SD_ReadyWait>
 800054e:	4603      	mov	r3, r0
 8000550:	2bff      	cmp	r3, #255	; 0xff
 8000552:	d001      	beq.n	8000558 <SD_SendCmd+0x1a>
 8000554:	23ff      	movs	r3, #255	; 0xff
 8000556:	e042      	b.n	80005de <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fea8 	bl	80002b0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	0e1b      	lsrs	r3, r3, #24
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fea2 	bl	80002b0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fe9c 	bl	80002b0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	0a1b      	lsrs	r3, r3, #8
 800057c:	b2db      	uxtb	r3, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fe96 	bl	80002b0 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe91 	bl	80002b0 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b40      	cmp	r3, #64	; 0x40
 8000592:	d102      	bne.n	800059a <SD_SendCmd+0x5c>
 8000594:	2395      	movs	r3, #149	; 0x95
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e007      	b.n	80005aa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b48      	cmp	r3, #72	; 0x48
 800059e:	d102      	bne.n	80005a6 <SD_SendCmd+0x68>
 80005a0:	2387      	movs	r3, #135	; 0x87
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	e001      	b.n	80005aa <SD_SendCmd+0x6c>
  else crc = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe7f 	bl	80002b0 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b4c      	cmp	r3, #76	; 0x4c
 80005b6:	d101      	bne.n	80005bc <SD_SendCmd+0x7e>
 80005b8:	f7ff feb0 	bl	800031c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80005bc:	230a      	movs	r3, #10
 80005be:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80005c0:	f7ff feac 	bl	800031c <SPI_RxByte>
 80005c4:	4603      	mov	r3, r0
 80005c6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80005c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da05      	bge.n	80005dc <SD_SendCmd+0x9e>
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	73bb      	strb	r3, [r7, #14]
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1f1      	bne.n	80005c0 <SD_SendCmd+0x82>

  return res;
 80005dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SD_disk_initialize+0x14>
 80005f8:	2301      	movs	r3, #1
 80005fa:	e0d1      	b.n	80007a0 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80005fc:	4b6a      	ldr	r3, [pc, #424]	; (80007a8 <SD_disk_initialize+0x1c0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	2b00      	cmp	r3, #0
 8000608:	d003      	beq.n	8000612 <SD_disk_initialize+0x2a>
 800060a:	4b67      	ldr	r3, [pc, #412]	; (80007a8 <SD_disk_initialize+0x1c0>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	e0c6      	b.n	80007a0 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000612:	f7ff fec9 	bl	80003a8 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000616:	f7ff fe2b 	bl	8000270 <SELECT>

  /* check disk type */
  type = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800061e:	2100      	movs	r1, #0
 8000620:	2040      	movs	r0, #64	; 0x40
 8000622:	f7ff ff8c 	bl	800053e <SD_SendCmd>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	f040 80a1 	bne.w	8000770 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800062e:	4b5f      	ldr	r3, [pc, #380]	; (80007ac <SD_disk_initialize+0x1c4>)
 8000630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000634:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000636:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800063a:	2048      	movs	r0, #72	; 0x48
 800063c:	f7ff ff7f 	bl	800053e <SD_SendCmd>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d155      	bne.n	80006f2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e00c      	b.n	8000666 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800064c:	7bfc      	ldrb	r4, [r7, #15]
 800064e:	f7ff fe65 	bl	800031c <SPI_RxByte>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	f104 0310 	add.w	r3, r4, #16
 800065a:	443b      	add	r3, r7
 800065c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	3301      	adds	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d9ef      	bls.n	800064c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800066c:	7abb      	ldrb	r3, [r7, #10]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d17e      	bne.n	8000770 <SD_disk_initialize+0x188>
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	2baa      	cmp	r3, #170	; 0xaa
 8000676:	d17b      	bne.n	8000770 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000678:	2100      	movs	r1, #0
 800067a:	2077      	movs	r0, #119	; 0x77
 800067c:	f7ff ff5f 	bl	800053e <SD_SendCmd>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d807      	bhi.n	8000696 <SD_disk_initialize+0xae>
 8000686:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800068a:	2069      	movs	r0, #105	; 0x69
 800068c:	f7ff ff57 	bl	800053e <SD_SendCmd>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d004      	beq.n	80006a0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000696:	4b45      	ldr	r3, [pc, #276]	; (80007ac <SD_disk_initialize+0x1c4>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1ec      	bne.n	8000678 <SD_disk_initialize+0x90>
 800069e:	e000      	b.n	80006a2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80006a0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80006a2:	4b42      	ldr	r3, [pc, #264]	; (80007ac <SD_disk_initialize+0x1c4>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d062      	beq.n	8000770 <SD_disk_initialize+0x188>
 80006aa:	2100      	movs	r1, #0
 80006ac:	207a      	movs	r0, #122	; 0x7a
 80006ae:	f7ff ff46 	bl	800053e <SD_SendCmd>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d15b      	bne.n	8000770 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	e00c      	b.n	80006d8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80006be:	7bfc      	ldrb	r4, [r7, #15]
 80006c0:	f7ff fe2c 	bl	800031c <SPI_RxByte>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	f104 0310 	add.w	r3, r4, #16
 80006cc:	443b      	add	r3, r7
 80006ce:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	3301      	adds	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d9ef      	bls.n	80006be <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80006de:	7a3b      	ldrb	r3, [r7, #8]
 80006e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SD_disk_initialize+0x104>
 80006e8:	230c      	movs	r3, #12
 80006ea:	e000      	b.n	80006ee <SD_disk_initialize+0x106>
 80006ec:	2304      	movs	r3, #4
 80006ee:	73bb      	strb	r3, [r7, #14]
 80006f0:	e03e      	b.n	8000770 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80006f2:	2100      	movs	r1, #0
 80006f4:	2077      	movs	r0, #119	; 0x77
 80006f6:	f7ff ff22 	bl	800053e <SD_SendCmd>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d808      	bhi.n	8000712 <SD_disk_initialize+0x12a>
 8000700:	2100      	movs	r1, #0
 8000702:	2069      	movs	r0, #105	; 0x69
 8000704:	f7ff ff1b 	bl	800053e <SD_SendCmd>
 8000708:	4603      	mov	r3, r0
 800070a:	2b01      	cmp	r3, #1
 800070c:	d801      	bhi.n	8000712 <SD_disk_initialize+0x12a>
 800070e:	2302      	movs	r3, #2
 8000710:	e000      	b.n	8000714 <SD_disk_initialize+0x12c>
 8000712:	2301      	movs	r3, #1
 8000714:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d10e      	bne.n	800073a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800071c:	2100      	movs	r1, #0
 800071e:	2077      	movs	r0, #119	; 0x77
 8000720:	f7ff ff0d 	bl	800053e <SD_SendCmd>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d80e      	bhi.n	8000748 <SD_disk_initialize+0x160>
 800072a:	2100      	movs	r1, #0
 800072c:	2069      	movs	r0, #105	; 0x69
 800072e:	f7ff ff06 	bl	800053e <SD_SendCmd>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d107      	bne.n	8000748 <SD_disk_initialize+0x160>
 8000738:	e00c      	b.n	8000754 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800073a:	2100      	movs	r1, #0
 800073c:	2041      	movs	r0, #65	; 0x41
 800073e:	f7ff fefe 	bl	800053e <SD_SendCmd>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <SD_disk_initialize+0x1c4>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e2      	bne.n	8000716 <SD_disk_initialize+0x12e>
 8000750:	e000      	b.n	8000754 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000752:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <SD_disk_initialize+0x1c4>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d007      	beq.n	800076c <SD_disk_initialize+0x184>
 800075c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000760:	2050      	movs	r0, #80	; 0x50
 8000762:	f7ff feec 	bl	800053e <SD_SendCmd>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SD_disk_initialize+0x188>
 800076c:	2300      	movs	r3, #0
 800076e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000770:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <SD_disk_initialize+0x1c8>)
 8000772:	7bbb      	ldrb	r3, [r7, #14]
 8000774:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000776:	f7ff fd8b 	bl	8000290 <DESELECT>
  SPI_RxByte();
 800077a:	f7ff fdcf 	bl	800031c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d008      	beq.n	8000796 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <SD_disk_initialize+0x1c0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	f023 0301 	bic.w	r3, r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SD_disk_initialize+0x1c0>)
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	e001      	b.n	800079a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000796:	f7ff fe49 	bl	800042c <SD_PowerOff>
  }

  return Stat;
 800079a:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <SD_disk_initialize+0x1c0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	20000000 	.word	0x20000000
 80007ac:	200000b4 	.word	0x200000b4
 80007b0:	200000b8 	.word	0x200000b8

080007b4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SD_disk_status+0x14>
 80007c4:	2301      	movs	r3, #1
 80007c6:	e002      	b.n	80007ce <SD_disk_status+0x1a>
  return Stat;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SD_disk_status+0x28>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000000 	.word	0x20000000

080007e0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4603      	mov	r3, r0
 80007ee:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d102      	bne.n	80007fc <SD_disk_read+0x1c>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <SD_disk_read+0x20>
 80007fc:	2304      	movs	r3, #4
 80007fe:	e051      	b.n	80008a4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000800:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <SD_disk_read+0xcc>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SD_disk_read+0x32>
 800080e:	2303      	movs	r3, #3
 8000810:	e048      	b.n	80008a4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <SD_disk_read+0xd0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	2b00      	cmp	r3, #0
 800081c:	d102      	bne.n	8000824 <SD_disk_read+0x44>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	025b      	lsls	r3, r3, #9
 8000822:	607b      	str	r3, [r7, #4]

  SELECT();
 8000824:	f7ff fd24 	bl	8000270 <SELECT>

  if (count == 1)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d111      	bne.n	8000852 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2051      	movs	r0, #81	; 0x51
 8000832:	f7ff fe84 	bl	800053e <SD_SendCmd>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d129      	bne.n	8000890 <SD_disk_read+0xb0>
 800083c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f7ff fe0b 	bl	800045c <SD_RxDataBlock>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d021      	beq.n	8000890 <SD_disk_read+0xb0>
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	e01e      	b.n	8000890 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	2052      	movs	r0, #82	; 0x52
 8000856:	f7ff fe72 	bl	800053e <SD_SendCmd>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d117      	bne.n	8000890 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000864:	68b8      	ldr	r0, [r7, #8]
 8000866:	f7ff fdf9 	bl	800045c <SD_RxDataBlock>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00a      	beq.n	8000886 <SD_disk_read+0xa6>
        buff += 512;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000876:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1ed      	bne.n	8000860 <SD_disk_read+0x80>
 8000884:	e000      	b.n	8000888 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000886:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000888:	2100      	movs	r1, #0
 800088a:	204c      	movs	r0, #76	; 0x4c
 800088c:	f7ff fe57 	bl	800053e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000890:	f7ff fcfe 	bl	8000290 <DESELECT>
  SPI_RxByte();
 8000894:	f7ff fd42 	bl	800031c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf14      	ite	ne
 800089e:	2301      	movne	r3, #1
 80008a0:	2300      	moveq	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000000 	.word	0x20000000
 80008b0:	200000b8 	.word	0x200000b8

080008b4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	4603      	mov	r3, r0
 80008c2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d102      	bne.n	80008d0 <SD_disk_write+0x1c>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d101      	bne.n	80008d4 <SD_disk_write+0x20>
 80008d0:	2304      	movs	r3, #4
 80008d2:	e06b      	b.n	80009ac <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008d4:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <SD_disk_write+0x100>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SD_disk_write+0x32>
 80008e2:	2303      	movs	r3, #3
 80008e4:	e062      	b.n	80009ac <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80008e6:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <SD_disk_write+0x100>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SD_disk_write+0x44>
 80008f4:	2302      	movs	r3, #2
 80008f6:	e059      	b.n	80009ac <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <SD_disk_write+0x104>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <SD_disk_write+0x56>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	025b      	lsls	r3, r3, #9
 8000908:	607b      	str	r3, [r7, #4]

  SELECT();
 800090a:	f7ff fcb1 	bl	8000270 <SELECT>

  if (count == 1)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d110      	bne.n	8000936 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	2058      	movs	r0, #88	; 0x58
 8000918:	f7ff fe11 	bl	800053e <SD_SendCmd>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d13a      	bne.n	8000998 <SD_disk_write+0xe4>
 8000922:	21fe      	movs	r1, #254	; 0xfe
 8000924:	68b8      	ldr	r0, [r7, #8]
 8000926:	f7ff fdc7 	bl	80004b8 <SD_TxDataBlock>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d033      	beq.n	8000998 <SD_disk_write+0xe4>
      count = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	e030      	b.n	8000998 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <SD_disk_write+0x104>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d007      	beq.n	8000952 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	2077      	movs	r0, #119	; 0x77
 8000946:	f7ff fdfa 	bl	800053e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800094a:	6839      	ldr	r1, [r7, #0]
 800094c:	2057      	movs	r0, #87	; 0x57
 800094e:	f7ff fdf6 	bl	800053e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	2059      	movs	r0, #89	; 0x59
 8000956:	f7ff fdf2 	bl	800053e <SD_SendCmd>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d11b      	bne.n	8000998 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000960:	21fc      	movs	r1, #252	; 0xfc
 8000962:	68b8      	ldr	r0, [r7, #8]
 8000964:	f7ff fda8 	bl	80004b8 <SD_TxDataBlock>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00a      	beq.n	8000984 <SD_disk_write+0xd0>
        buff += 512;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000974:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	3b01      	subs	r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1ee      	bne.n	8000960 <SD_disk_write+0xac>
 8000982:	e000      	b.n	8000986 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000984:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000986:	21fd      	movs	r1, #253	; 0xfd
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fd95 	bl	80004b8 <SD_TxDataBlock>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d101      	bne.n	8000998 <SD_disk_write+0xe4>
      {
        count = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000998:	f7ff fc7a 	bl	8000290 <DESELECT>
  SPI_RxByte();
 800099c:	f7ff fcbe 	bl	800031c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	200000b8 	.word	0x200000b8

080009bc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	603a      	str	r2, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	460b      	mov	r3, r1
 80009ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SD_disk_ioctl+0x1e>
 80009d6:	2304      	movs	r3, #4
 80009d8:	e115      	b.n	8000c06 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	d124      	bne.n	8000a30 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d012      	beq.n	8000a14 <SD_disk_ioctl+0x58>
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	dc1a      	bgt.n	8000a28 <SD_disk_ioctl+0x6c>
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <SD_disk_ioctl+0x40>
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d006      	beq.n	8000a08 <SD_disk_ioctl+0x4c>
 80009fa:	e015      	b.n	8000a28 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80009fc:	f7ff fd16 	bl	800042c <SD_PowerOff>
      res = RES_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a06:	e0fc      	b.n	8000c02 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8000a08:	f7ff fcce 	bl	80003a8 <SD_PowerOn>
      res = RES_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a12:	e0f6      	b.n	8000c02 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	1c5c      	adds	r4, r3, #1
 8000a18:	f7ff fd14 	bl	8000444 <SD_CheckPower>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000a20:	2300      	movs	r3, #0
 8000a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a26:	e0ec      	b.n	8000c02 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a2e:	e0e8      	b.n	8000c02 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a30:	4b77      	ldr	r3, [pc, #476]	; (8000c10 <SD_disk_ioctl+0x254>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SD_disk_ioctl+0x86>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e0e1      	b.n	8000c06 <SD_disk_ioctl+0x24a>

    SELECT();
 8000a42:	f7ff fc15 	bl	8000270 <SELECT>

    switch (ctrl)
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	2b0d      	cmp	r3, #13
 8000a4a:	f200 80cb 	bhi.w	8000be4 <SD_disk_ioctl+0x228>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <SD_disk_ioctl+0x98>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000b4f 	.word	0x08000b4f
 8000a58:	08000a8d 	.word	0x08000a8d
 8000a5c:	08000b3f 	.word	0x08000b3f
 8000a60:	08000be5 	.word	0x08000be5
 8000a64:	08000be5 	.word	0x08000be5
 8000a68:	08000be5 	.word	0x08000be5
 8000a6c:	08000be5 	.word	0x08000be5
 8000a70:	08000be5 	.word	0x08000be5
 8000a74:	08000be5 	.word	0x08000be5
 8000a78:	08000be5 	.word	0x08000be5
 8000a7c:	08000be5 	.word	0x08000be5
 8000a80:	08000b61 	.word	0x08000b61
 8000a84:	08000b85 	.word	0x08000b85
 8000a88:	08000ba9 	.word	0x08000ba9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2049      	movs	r0, #73	; 0x49
 8000a90:	f7ff fd55 	bl	800053e <SD_SendCmd>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 80a8 	bne.w	8000bec <SD_disk_ioctl+0x230>
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fcda 	bl	800045c <SD_RxDataBlock>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 809e 	beq.w	8000bec <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8000ab0:	7b3b      	ldrb	r3, [r7, #12]
 8000ab2:	099b      	lsrs	r3, r3, #6
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d10e      	bne.n	8000ad8 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000aba:	7d7b      	ldrb	r3, [r7, #21]
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	7d3b      	ldrb	r3, [r7, #20]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	3301      	adds	r3, #1
 8000acc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000ace:	8bfb      	ldrh	r3, [r7, #30]
 8000ad0:	029a      	lsls	r2, r3, #10
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e02e      	b.n	8000b36 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ad8:	7c7b      	ldrb	r3, [r7, #17]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	7dbb      	ldrb	r3, [r7, #22]
 8000ae2:	09db      	lsrs	r3, r3, #7
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	7d7b      	ldrb	r3, [r7, #21]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f003 0306 	and.w	r3, r3, #6
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	3302      	adds	r3, #2
 8000afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000b00:	7d3b      	ldrb	r3, [r7, #20]
 8000b02:	099b      	lsrs	r3, r3, #6
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	7cfb      	ldrb	r3, [r7, #19]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4413      	add	r3, r2
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	7cbb      	ldrb	r3, [r7, #18]
 8000b16:	029b      	lsls	r3, r3, #10
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	3301      	adds	r3, #1
 8000b26:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000b28:	8bfa      	ldrh	r2, [r7, #30]
 8000b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b2e:	3b09      	subs	r3, #9
 8000b30:	409a      	lsls	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000b3c:	e056      	b.n	8000bec <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b4c:	e055      	b.n	8000bfa <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000b4e:	f7ff fc11 	bl	8000374 <SD_ReadyWait>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2bff      	cmp	r3, #255	; 0xff
 8000b56:	d14b      	bne.n	8000bf0 <SD_disk_ioctl+0x234>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b5e:	e047      	b.n	8000bf0 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b60:	2100      	movs	r1, #0
 8000b62:	2049      	movs	r0, #73	; 0x49
 8000b64:	f7ff fceb 	bl	800053e <SD_SendCmd>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d142      	bne.n	8000bf4 <SD_disk_ioctl+0x238>
 8000b6e:	2110      	movs	r1, #16
 8000b70:	6a38      	ldr	r0, [r7, #32]
 8000b72:	f7ff fc73 	bl	800045c <SD_RxDataBlock>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d03b      	beq.n	8000bf4 <SD_disk_ioctl+0x238>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b82:	e037      	b.n	8000bf4 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b84:	2100      	movs	r1, #0
 8000b86:	204a      	movs	r0, #74	; 0x4a
 8000b88:	f7ff fcd9 	bl	800053e <SD_SendCmd>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d132      	bne.n	8000bf8 <SD_disk_ioctl+0x23c>
 8000b92:	2110      	movs	r1, #16
 8000b94:	6a38      	ldr	r0, [r7, #32]
 8000b96:	f7ff fc61 	bl	800045c <SD_RxDataBlock>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d02b      	beq.n	8000bf8 <SD_disk_ioctl+0x23c>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ba6:	e027      	b.n	8000bf8 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	207a      	movs	r0, #122	; 0x7a
 8000bac:	f7ff fcc7 	bl	800053e <SD_SendCmd>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d116      	bne.n	8000be4 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bbc:	e00b      	b.n	8000bd6 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8000bbe:	6a3c      	ldr	r4, [r7, #32]
 8000bc0:	1c63      	adds	r3, r4, #1
 8000bc2:	623b      	str	r3, [r7, #32]
 8000bc4:	f7ff fbaa 	bl	800031c <SPI_RxByte>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d9ef      	bls.n	8000bbe <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8000be4:	2304      	movs	r3, #4
 8000be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bea:	e006      	b.n	8000bfa <SD_disk_ioctl+0x23e>
      break;
 8000bec:	bf00      	nop
 8000bee:	e004      	b.n	8000bfa <SD_disk_ioctl+0x23e>
      break;
 8000bf0:	bf00      	nop
 8000bf2:	e002      	b.n	8000bfa <SD_disk_ioctl+0x23e>
      break;
 8000bf4:	bf00      	nop
 8000bf6:	e000      	b.n	8000bfa <SD_disk_ioctl+0x23e>
      break;
 8000bf8:	bf00      	nop
    }

    DESELECT();
 8000bfa:	f7ff fb49 	bl	8000290 <DESELECT>
    SPI_RxByte();
 8000bfe:	f7ff fb8d 	bl	800031c <SPI_RxByte>
  }

  return res;
 8000c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	372c      	adds	r7, #44	; 0x2c
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000

08000c14 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000c1e:	4a38      	ldr	r2, [pc, #224]	; (8000d00 <HD44780_Init+0xec>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <HD44780_Init+0xf0>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000c2a:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <HD44780_Init+0xf4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000c30:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <HD44780_Init+0xec>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d907      	bls.n	8000c48 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000c38:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <HD44780_Init+0xf4>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <HD44780_Init+0xf4>)
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e006      	b.n	8000c56 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <HD44780_Init+0xf4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <HD44780_Init+0xf4>)
 8000c54:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000c56:	f000 f9b1 	bl	8000fbc <DelayInit>
  HAL_Delay(50);
 8000c5a:	2032      	movs	r0, #50	; 0x32
 8000c5c:	f001 fd00 	bl	8002660 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <HD44780_Init+0xf0>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f96f 	bl	8000f48 <ExpanderWrite>
  HAL_Delay(1000);
 8000c6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6e:	f001 fcf7 	bl	8002660 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000c72:	2030      	movs	r0, #48	; 0x30
 8000c74:	f000 f957 	bl	8000f26 <Write4Bits>
  DelayUS(4500);
 8000c78:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c7c:	f000 f9c8 	bl	8001010 <DelayUS>

  Write4Bits(0x03 << 4);
 8000c80:	2030      	movs	r0, #48	; 0x30
 8000c82:	f000 f950 	bl	8000f26 <Write4Bits>
  DelayUS(4500);
 8000c86:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c8a:	f000 f9c1 	bl	8001010 <DelayUS>

  Write4Bits(0x03 << 4);
 8000c8e:	2030      	movs	r0, #48	; 0x30
 8000c90:	f000 f949 	bl	8000f26 <Write4Bits>
  DelayUS(4500);
 8000c94:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c98:	f000 f9ba 	bl	8001010 <DelayUS>

  Write4Bits(0x02 << 4);
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f000 f942 	bl	8000f26 <Write4Bits>
  DelayUS(100);
 8000ca2:	2064      	movs	r0, #100	; 0x64
 8000ca4:	f000 f9b4 	bl	8001010 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HD44780_Init+0xf4>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f8fa 	bl	8000eac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HD44780_Init+0xf8>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000cbe:	f000 f875 	bl	8000dac <HD44780_Display>
  HD44780_Clear();
 8000cc2:	f000 f82b 	bl	8000d1c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HD44780_Init+0xfc>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HD44780_Init+0xfc>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f8e8 	bl	8000eac <SendCommand>
  DelayUS(4500);
 8000cdc:	f241 1094 	movw	r0, #4500	; 0x1194
 8000ce0:	f000 f996 	bl	8001010 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000ce4:	490b      	ldr	r1, [pc, #44]	; (8000d14 <HD44780_Init+0x100>)
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f8a2 	bl	8000e30 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000cec:	490a      	ldr	r1, [pc, #40]	; (8000d18 <HD44780_Init+0x104>)
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 f89e 	bl	8000e30 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000cf4:	f000 f81d 	bl	8000d32 <HD44780_Home>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000bd 	.word	0x200000bd
 8000d04:	200000be 	.word	0x200000be
 8000d08:	200000ba 	.word	0x200000ba
 8000d0c:	200000bb 	.word	0x200000bb
 8000d10:	200000bc 	.word	0x200000bc
 8000d14:	20000004 	.word	0x20000004
 8000d18:	2000000c 	.word	0x2000000c

08000d1c <HD44780_Clear>:

void HD44780_Clear()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 f8c3 	bl	8000eac <SendCommand>
  DelayUS(2000);
 8000d26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d2a:	f000 f971 	bl	8001010 <DelayUS>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HD44780_Home>:

void HD44780_Home()
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000d36:	2002      	movs	r0, #2
 8000d38:	f000 f8b8 	bl	8000eac <SendCommand>
  DelayUS(2000);
 8000d3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d40:	f000 f966 	bl	8001010 <DelayUS>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HD44780_SetCursor+0x5c>)
 8000d5a:	f107 0408 	add.w	r4, r7, #8
 8000d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HD44780_SetCursor+0x60>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d303      	bcc.n	8000d76 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HD44780_SetCursor+0x60>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	3318      	adds	r3, #24
 8000d7c:	443b      	add	r3, r7
 8000d7e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f889 	bl	8000eac <SendCommand>
}
 8000d9a:	bf00      	nop
 8000d9c:	371c      	adds	r7, #28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	bf00      	nop
 8000da4:	0800da34 	.word	0x0800da34
 8000da8:	200000bd 	.word	0x200000bd

08000dac <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HD44780_Display+0x28>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HD44780_Display+0x28>)
 8000dbc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HD44780_Display+0x28>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f86f 	bl	8000eac <SendCommand>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000bb 	.word	0x200000bb

08000dd8 <HD44780_Cursor>:
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HD44780_Cursor+0x28>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HD44780_Cursor+0x28>)
 8000de8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HD44780_Cursor+0x28>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f859 	bl	8000eac <SendCommand>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000bb 	.word	0x200000bb

08000e04 <HD44780_Blink>:
  dpControl &= ~LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Blink()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HD44780_Blink+0x28>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HD44780_Blink+0x28>)
 8000e14:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HD44780_Blink+0x28>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f843 	bl	8000eac <SendCommand>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000bb 	.word	0x200000bb

08000e30 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f82a 	bl	8000eac <SendCommand>
  for (int i=0; i<8; i++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e009      	b.n	8000e72 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f82e 	bl	8000ec8 <SendChar>
  for (int i=0; i<8; i++)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2b07      	cmp	r3, #7
 8000e76:	ddf2      	ble.n	8000e5e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000e8a:	e006      	b.n	8000e9a <HD44780_PrintStr+0x18>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f817 	bl	8000ec8 <SendChar>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f4      	bne.n	8000e8c <HD44780_PrintStr+0xa>
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f812 	bl	8000ee4 <Send>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f804 	bl	8000ee4 <Send>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f023 030f 	bic.w	r3, r3, #15
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f80b 	bl	8000f26 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000f10:	7bba      	ldrb	r2, [r7, #14]
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f804 	bl	8000f26 <Write4Bits>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f808 	bl	8000f48 <ExpanderWrite>
  PulseEnable(value);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f820 	bl	8000f80 <PulseEnable>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <ExpanderWrite+0x30>)
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000f5e:	f107 020f 	add.w	r2, r7, #15
 8000f62:	230a      	movs	r3, #10
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	214e      	movs	r1, #78	; 0x4e
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <ExpanderWrite+0x34>)
 8000f6c:	f002 f8cc 	bl	8003108 <HAL_I2C_Master_Transmit>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000be 	.word	0x200000be
 8000f7c:	200000c0 	.word	0x200000c0

08000f80 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffd8 	bl	8000f48 <ExpanderWrite>
  DelayUS(20);
 8000f98:	2014      	movs	r0, #20
 8000f9a:	f000 f839 	bl	8001010 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffce 	bl	8000f48 <ExpanderWrite>
  DelayUS(20);
 8000fac:	2014      	movs	r0, #20
 8000fae:	f000 f82f 	bl	8001010 <DelayUS>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <DelayInit>:

static void DelayInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <DelayInit+0x4c>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <DelayInit+0x4c>)
 8000fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <DelayInit+0x4c>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <DelayInit+0x4c>)
 8000fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <DelayInit+0x50>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <DelayInit+0x50>)
 8000fde:	f023 0301 	bic.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <DelayInit+0x50>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <DelayInit+0x50>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <DelayInit+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000ff6:	bf00      	nop
  __ASM volatile ("NOP");
 8000ff8:	bf00      	nop
  __ASM volatile ("NOP");
 8000ffa:	bf00      	nop
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000edf0 	.word	0xe000edf0
 800100c:	e0001000 	.word	0xe0001000

08001010 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <DelayUS+0x44>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <DelayUS+0x48>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	0c9a      	lsrs	r2, r3, #18
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <DelayUS+0x4c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <DelayUS+0x4c>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f6      	bhi.n	8001032 <DelayUS+0x22>
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000014 	.word	0x20000014
 8001058:	431bde83 	.word	0x431bde83
 800105c:	e0001000 	.word	0xe0001000

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memset(buff_music, 0, sizeof(buff_music));
 8001064:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001068:	2100      	movs	r1, #0
 800106a:	481d      	ldr	r0, [pc, #116]	; (80010e0 <main+0x80>)
 800106c:	f00b faee 	bl	800c64c <memset>
	general.var_recording = 0;
 8001070:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <main+0x84>)
 8001072:	7813      	ldrb	r3, [r2, #0]
 8001074:	f36f 0300 	bfc	r3, #0, #1
 8001078:	7013      	strb	r3, [r2, #0]
	general.sampling_timer = 0;
 800107a:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <main+0x84>)
 800107c:	7813      	ldrb	r3, [r2, #0]
 800107e:	f36f 0344 	bfc	r3, #1, #4
 8001082:	7013      	strb	r3, [r2, #0]
	tim17_counter = 0;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <main+0x88>)
 8001086:	2200      	movs	r2, #0
 8001088:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108a:	f001 fa83 	bl	8002594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108e:	f000 f82f 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001092:	f000 fa05 	bl	80014a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001096:	f000 f889 	bl	80011ac <MX_I2C1_Init>
  MX_SPI2_Init();
 800109a:	f000 f8c7 	bl	800122c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800109e:	f000 f9b1 	bl	8001404 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80010a2:	f006 febd 	bl	8007e20 <MX_FATFS_Init>
  MX_DMA_Init();
 80010a6:	f000 f9dd 	bl	8001464 <MX_DMA_Init>
  MX_TIM17_Init();
 80010aa:	f000 f933 	bl	8001314 <MX_TIM17_Init>
  MX_TIM6_Init();
 80010ae:	f000 f8fb 	bl	80012a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  process_SD_card();
 80010b2:	f000 fa8d 	bl	80015d0 <process_SD_card>

	HD44780_Init(2);
 80010b6:	2002      	movs	r0, #2
 80010b8:	f7ff fdac 	bl	8000c14 <HD44780_Init>
	HD44780_Clear();
 80010bc:	f7ff fe2e 	bl	8000d1c <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80010c0:	2100      	movs	r1, #0
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fe40 	bl	8000d48 <HD44780_SetCursor>
	HD44780_PrintStr("     HELLO");
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <main+0x8c>)
 80010ca:	f7ff feda 	bl	8000e82 <HD44780_PrintStr>
	HD44780_SetCursor(10,1);
 80010ce:	2101      	movs	r1, #1
 80010d0:	200a      	movs	r0, #10
 80010d2:	f7ff fe39 	bl	8000d48 <HD44780_SetCursor>
	HAL_Delay(2000);
 80010d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010da:	f001 fac1 	bl	8002660 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010de:	e7fe      	b.n	80010de <main+0x7e>
 80010e0:	20003388 	.word	0x20003388
 80010e4:	2000357c 	.word	0x2000357c
 80010e8:	20003590 	.word	0x20003590
 80010ec:	0800da44 	.word	0x0800da44

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09c      	sub	sp, #112	; 0x70
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00b faa4 	bl	800c64c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2234      	movs	r2, #52	; 0x34
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f00b fa96 	bl	800c64c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2310      	movs	r3, #16
 800112a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	2300      	movs	r3, #0
 8001132:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001134:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001138:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fb7e 	bl	8003840 <HAL_RCC_OscConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800114a:	f000 fe77 	bl	8001e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114e:	230f      	movs	r3, #15
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	2302      	movs	r3, #2
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800115a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001164:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001168:	2102      	movs	r1, #2
 800116a:	4618      	mov	r0, r3
 800116c:	f003 fba6 	bl	80048bc <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001176:	f000 fe61 	bl	8001e3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <SystemClock_Config+0xb8>)
 800117c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001182:	2310      	movs	r3, #16
 8001184:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_PLLCLK;
 8001186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fdca 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800119a:	f000 fe4f 	bl	8001e3c <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3770      	adds	r7, #112	; 0x70
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	00100021 	.word	0x00100021

080011ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_I2C1_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_I2C1_Init+0x7c>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_I2C1_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_I2C1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_I2C1_Init+0x74>)
 80011e8:	f001 fefe 	bl	8002fe8 <HAL_I2C_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011f2:	f000 fe23 	bl	8001e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <MX_I2C1_Init+0x74>)
 80011fa:	f002 fa89 	bl	8003710 <HAL_I2CEx_ConfigAnalogFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001204:	f000 fe1a 	bl	8001e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2C1_Init+0x74>)
 800120c:	f002 facb 	bl	80037a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 fe11 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000c0 	.word	0x200000c0
 8001224:	40005400 	.word	0x40005400
 8001228:	10707dbc 	.word	0x10707dbc

0800122c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <MX_SPI2_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001246:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800124a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_SPI2_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_SPI2_Init+0x74>)
 800125a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_SPI2_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_SPI2_Init+0x74>)
 800127a:	2207      	movs	r2, #7
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_SPI2_Init+0x74>)
 8001286:	2208      	movs	r2, #8
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_SPI2_Init+0x74>)
 800128c:	f003 fede 	bl	800504c <HAL_SPI_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 fdd1 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000114 	.word	0x20000114
 80012a4:	40003800 	.word	0x40003800

080012a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_TIM6_Init+0x64>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <MX_TIM6_Init+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_TIM6_Init+0x64>)
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_TIM6_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_TIM6_Init+0x64>)
 80012cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80012d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_TIM6_Init+0x64>)
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_TIM6_Init+0x64>)
 80012da:	f004 fc5d 	bl	8005b98 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012e4:	f000 fdaa 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_TIM6_Init+0x64>)
 80012f6:	f006 f873 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001300:	f000 fd9c 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000178 	.word	0x20000178
 8001310:	40001000 	.word	0x40001000

08001314 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b092      	sub	sp, #72	; 0x48
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800131a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	222c      	movs	r2, #44	; 0x2c
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f00b f989 	bl	800c64c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <MX_TIM17_Init+0xe8>)
 800133c:	4a30      	ldr	r2, [pc, #192]	; (8001400 <MX_TIM17_Init+0xec>)
 800133e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 30;
 8001340:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <MX_TIM17_Init+0xe8>)
 8001342:	221e      	movs	r2, #30
 8001344:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <MX_TIM17_Init+0xe8>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <MX_TIM17_Init+0xe8>)
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <MX_TIM17_Init+0xe8>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <MX_TIM17_Init+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <MX_TIM17_Init+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001364:	4825      	ldr	r0, [pc, #148]	; (80013fc <MX_TIM17_Init+0xe8>)
 8001366:	f004 fc17 	bl	8005b98 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001370:	f000 fd64 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001374:	4821      	ldr	r0, [pc, #132]	; (80013fc <MX_TIM17_Init+0xe8>)
 8001376:	f004 fcea 	bl	8005d4e <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001380:	f000 fd5c 	bl	8001e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001384:	2360      	movs	r3, #96	; 0x60
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_TIM17_Init+0xe8>)
 80013aa:	f005 fab3 	bl	8006914 <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80013b4:	f000 fd42 	bl	8001e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <MX_TIM17_Init+0xe8>)
 80013e0:	f006 f864 	bl	80074ac <HAL_TIMEx_ConfigBreakDeadTime>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80013ea:	f000 fd27 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80013ee:	4803      	ldr	r0, [pc, #12]	; (80013fc <MX_TIM17_Init+0xe8>)
 80013f0:	f000 fe48 	bl	8002084 <HAL_TIM_MspPostInit>

}
 80013f4:	bf00      	nop
 80013f6:	3748      	adds	r7, #72	; 0x48
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200001c4 	.word	0x200001c4
 8001400:	40014800 	.word	0x40014800

08001404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_USART1_UART_Init+0x58>)
 800140a:	4a15      	ldr	r2, [pc, #84]	; (8001460 <MX_USART1_UART_Init+0x5c>)
 800140c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_USART1_UART_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART1_UART_Init+0x58>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART1_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001448:	f006 f8c6 	bl	80075d8 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001452:	f000 fcf3 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000254 	.word	0x20000254
 8001460:	40013800 	.word	0x40013800

08001464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_DMA_Init+0x38>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <MX_DMA_Init+0x38>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6153      	str	r3, [r2, #20]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_DMA_Init+0x38>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2102      	movs	r1, #2
 8001486:	200b      	movs	r0, #11
 8001488:	f001 f9e9 	bl	800285e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800148c:	200b      	movs	r0, #11
 800148e:	f001 fa02 	bl	8002896 <HAL_NVIC_EnableIRQ>

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <MX_GPIO_Init+0x100>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a39      	ldr	r2, [pc, #228]	; (80015a0 <MX_GPIO_Init+0x100>)
 80014bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014c0:	6153      	str	r3, [r2, #20]
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <MX_GPIO_Init+0x100>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <MX_GPIO_Init+0x100>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a33      	ldr	r2, [pc, #204]	; (80015a0 <MX_GPIO_Init+0x100>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <MX_GPIO_Init+0x100>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <MX_GPIO_Init+0x100>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <MX_GPIO_Init+0x100>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6153      	str	r3, [r2, #20]
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_GPIO_Init+0x100>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2108      	movs	r1, #8
 8001502:	4828      	ldr	r0, [pc, #160]	; (80015a4 <MX_GPIO_Init+0x104>)
 8001504:	f001 fd40 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f641 4101 	movw	r1, #7169	; 0x1c01
 800150e:	4826      	ldr	r0, [pc, #152]	; (80015a8 <MX_GPIO_Init+0x108>)
 8001510:	f001 fd3a 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	481e      	ldr	r0, [pc, #120]	; (80015a4 <MX_GPIO_Init+0x104>)
 800152c:	f001 fba2 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001530:	2308      	movs	r3, #8
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	4817      	ldr	r0, [pc, #92]	; (80015a4 <MX_GPIO_Init+0x104>)
 8001548:	f001 fb94 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800154c:	f641 4301 	movw	r3, #7169	; 0x1c01
 8001550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4619      	mov	r1, r3
 8001564:	4810      	ldr	r0, [pc, #64]	; (80015a8 <MX_GPIO_Init+0x108>)
 8001566:	f001 fb85 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800156a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001570:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001576:	2302      	movs	r3, #2
 8001578:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	4808      	ldr	r0, [pc, #32]	; (80015a4 <MX_GPIO_Init+0x104>)
 8001582:	f001 fb77 	bl	8002c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2104      	movs	r1, #4
 800158a:	2028      	movs	r0, #40	; 0x28
 800158c:	f001 f967 	bl	800285e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001590:	2028      	movs	r0, #40	; 0x28
 8001592:	f001 f980 	bl	8002896 <HAL_NVIC_EnableIRQ>

}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000800 	.word	0x48000800
 80015a8:	48000400 	.word	0x48000400

080015ac <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015b4:	1d39      	adds	r1, r7, #4
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	2201      	movs	r2, #1
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <__io_putchar+0x20>)
 80015be:	f006 f859 	bl	8007674 <HAL_UART_Transmit>
  return ch;
 80015c2:	687b      	ldr	r3, [r7, #4]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000254 	.word	0x20000254

080015d0 <process_SD_card>:

void process_SD_card( void )
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	4936      	ldr	r1, [pc, #216]	; (80016b4 <process_SD_card+0xe4>)
 80015da:	2000      	movs	r0, #0
 80015dc:	f009 faea 	bl	800abb4 <f_mount>
	fres = f_mount(&FatFs, "", 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	4934      	ldr	r1, [pc, #208]	; (80016b4 <process_SD_card+0xe4>)
 80015e4:	4834      	ldr	r0, [pc, #208]	; (80016b8 <process_SD_card+0xe8>)
 80015e6:	f009 fae5 	bl	800abb4 <f_mount>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <process_SD_card+0xec>)
 80015f0:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "0:/data/data_file.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80015f2:	220b      	movs	r2, #11
 80015f4:	4932      	ldr	r1, [pc, #200]	; (80016c0 <process_SD_card+0xf0>)
 80015f6:	4833      	ldr	r0, [pc, #204]	; (80016c4 <process_SD_card+0xf4>)
 80015f8:	f009 fb26 	bl	800ac48 <f_open>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <process_SD_card+0xec>)
 8001602:	701a      	strb	r2, [r3, #0]
	fil.fsize = old_fsize;
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <process_SD_card+0xf8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2e      	ldr	r2, [pc, #184]	; (80016c4 <process_SD_card+0xf4>)
 800160a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800160e:	60d3      	str	r3, [r2, #12]
	if (fres == FR_OK) {
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <process_SD_card+0xec>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d13c      	bne.n	8001692 <process_SD_card+0xc2>
	    UINT bytesWritten;
	    f_lseek(&fil, f_size(&fil) /*sizeof(fil)*/);
 8001618:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <process_SD_card+0xf4>)
 800161a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4619      	mov	r1, r3
 8001622:	4828      	ldr	r0, [pc, #160]	; (80016c4 <process_SD_card+0xf4>)
 8001624:	f00a fb42 	bl	800bcac <f_lseek>
	    DWORD size_of_fil;
	    size_of_fil = f_size(&fil);
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <process_SD_card+0xf4>)
 800162a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	607b      	str	r3, [r7, #4]
	    printf("size of file 1 : %d \r\n", size_of_fil);
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4825      	ldr	r0, [pc, #148]	; (80016cc <process_SD_card+0xfc>)
 8001636:	f00b f811 	bl	800c65c <iprintf>
		memset(buff_music, 'A', sizeof(buff_music));
 800163a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800163e:	2141      	movs	r1, #65	; 0x41
 8001640:	4823      	ldr	r0, [pc, #140]	; (80016d0 <process_SD_card+0x100>)
 8001642:	f00b f803 	bl	800c64c <memset>
		fres = f_write(&fil, buff_music, sizeof(buff_music), &bytesWritten);
 8001646:	463b      	mov	r3, r7
 8001648:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800164c:	4920      	ldr	r1, [pc, #128]	; (80016d0 <process_SD_card+0x100>)
 800164e:	481d      	ldr	r0, [pc, #116]	; (80016c4 <process_SD_card+0xf4>)
 8001650:	f009 fffa 	bl	800b648 <f_write>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <process_SD_card+0xec>)
 800165a:	701a      	strb	r2, [r3, #0]
		size_of_fil = f_size(&fil);
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <process_SD_card+0xf4>)
 800165e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	607b      	str	r3, [r7, #4]
		printf("size of file 2: %d \r\n", size_of_fil);
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	481a      	ldr	r0, [pc, #104]	; (80016d4 <process_SD_card+0x104>)
 800166a:	f00a fff7 	bl	800c65c <iprintf>
		 if (fres == FR_OK) {
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <process_SD_card+0xec>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <process_SD_card+0xb4>
				// Data written successfully
				f_close(&fil);  // Close the file
 8001676:	4813      	ldr	r0, [pc, #76]	; (80016c4 <process_SD_card+0xf4>)
 8001678:	f00a faed 	bl	800bc56 <f_close>
				printf("Data written to file: data_file.txt \r\n");
 800167c:	4816      	ldr	r0, [pc, #88]	; (80016d8 <process_SD_card+0x108>)
 800167e:	f00b f873 	bl	800c768 <puts>
 8001682:	e009      	b.n	8001698 <process_SD_card+0xc8>
				//printf("strlen(buff_adc1) == %d   	sizeof(buff_adc1) == %d \r\n", strlen(buff_adc1), sizeof(buff_adc1));
			} else {
				// Error occurred while writing data
				f_close(&fil);  // Close the file
 8001684:	480f      	ldr	r0, [pc, #60]	; (80016c4 <process_SD_card+0xf4>)
 8001686:	f00a fae6 	bl	800bc56 <f_close>
				printf("Error writing data to file: data_file.txt \r\n");
 800168a:	4814      	ldr	r0, [pc, #80]	; (80016dc <process_SD_card+0x10c>)
 800168c:	f00b f86c 	bl	800c768 <puts>
 8001690:	e002      	b.n	8001698 <process_SD_card+0xc8>
			}
		    } else {
		        // Error occurred while opening the file
		        printf("Error opening file: data_file.txt \r\n");
 8001692:	4813      	ldr	r0, [pc, #76]	; (80016e0 <process_SD_card+0x110>)
 8001694:	f00b f868 	bl	800c768 <puts>
		    }
		  f_close(&fil);
 8001698:	480a      	ldr	r0, [pc, #40]	; (80016c4 <process_SD_card+0xf4>)
 800169a:	f00a fadc 	bl	800bc56 <f_close>
		  old_fsize = fil.fsize;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <process_SD_card+0xf4>)
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <process_SD_card+0xf8>)
 80016a8:	6013      	str	r3, [r2, #0]
		  //f_mount(NULL, "", 0);
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	0800da50 	.word	0x0800da50
 80016b8:	200002dc 	.word	0x200002dc
 80016bc:	20003380 	.word	0x20003380
 80016c0:	0800da54 	.word	0x0800da54
 80016c4:	2000130c 	.word	0x2000130c
 80016c8:	20003384 	.word	0x20003384
 80016cc:	0800da6c 	.word	0x0800da6c
 80016d0:	20003388 	.word	0x20003388
 80016d4:	0800da84 	.word	0x0800da84
 80016d8:	0800da9c 	.word	0x0800da9c
 80016dc:	0800dac4 	.word	0x0800dac4
 80016e0:	0800daf0 	.word	0x0800daf0

080016e4 <HAL_GPIO_EXTI_Callback>:

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b094      	sub	sp, #80	; 0x50
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)  //Esc
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f4:	d123      	bne.n	800173e <HAL_GPIO_EXTI_Callback+0x5a>
	{
		//Start menu
		HD44780_Clear();
 80016f6:	f7ff fb11 	bl	8000d1c <HD44780_Clear>
		HD44780_SetCursor(0,0);
 80016fa:	2100      	movs	r1, #0
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fb23 	bl	8000d48 <HD44780_SetCursor>
		HD44780_PrintStr("1. Music");
 8001702:	4876      	ldr	r0, [pc, #472]	; (80018dc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001704:	f7ff fbbd 	bl	8000e82 <HD44780_PrintStr>
		HD44780_SetCursor(0,1);
 8001708:	2101      	movs	r1, #1
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fb1c 	bl	8000d48 <HD44780_SetCursor>
		HD44780_PrintStr("2. Recording");
 8001710:	4873      	ldr	r0, [pc, #460]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001712:	f7ff fbb6 	bl	8000e82 <HD44780_PrintStr>
	    HD44780_Cursor();
 8001716:	f7ff fb5f 	bl	8000dd8 <HD44780_Cursor>
	    HD44780_Blink();
 800171a:	f7ff fb73 	bl	8000e04 <HD44780_Blink>
	    HD44780_SetCursor(0,0);
 800171e:	2100      	movs	r1, #0
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fb11 	bl	8000d48 <HD44780_SetCursor>
	    display_status.page = 0;
 8001726:	4a6f      	ldr	r2, [pc, #444]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 8001728:	7813      	ldrb	r3, [r2, #0]
 800172a:	f36f 0303 	bfc	r3, #0, #4
 800172e:	7013      	strb	r3, [r2, #0]
	    display_status.cursor_line = 0;
 8001730:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 8001732:	2200      	movs	r2, #0
 8001734:	705a      	strb	r2, [r3, #1]

	    stop_play_music(&fil);
 8001736:	486c      	ldr	r0, [pc, #432]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x204>)
 8001738:	f000 fb56 	bl	8001de8 <stop_play_music>
		{
			HD44780_SetCursor(0,0);
			display_status.cursor_line =0;
		}
	}
}
 800173c:	e2ff      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
	else if(GPIO_Pin == GPIO_PIN_10)  // Enter
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001744:	f040 81a2 	bne.w	8001a8c <HAL_GPIO_EXTI_Callback+0x3a8>
		if(display_status.page == 0 && display_status.cursor_line ==0) // Music
 8001748:	4b66      	ldr	r3, [pc, #408]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d168      	bne.n	8001828 <HAL_GPIO_EXTI_Callback+0x144>
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d164      	bne.n	8001828 <HAL_GPIO_EXTI_Callback+0x144>
			HD44780_Clear();
 800175e:	f7ff fadd 	bl	8000d1c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8001762:	2100      	movs	r1, #0
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff faef 	bl	8000d48 <HD44780_SetCursor>
			display_status.page = 1;
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 800176c:	7813      	ldrb	r3, [r2, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	f361 0303 	bfi	r3, r1, #0, #4
 8001774:	7013      	strb	r3, [r2, #0]
			display_status.cursor_line = 0;
 8001776:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 8001778:	2200      	movs	r2, #0
 800177a:	705a      	strb	r2, [r3, #1]
			fres = f_mount(&FatFs, "", 1);
 800177c:	2201      	movs	r2, #1
 800177e:	495b      	ldr	r1, [pc, #364]	; (80018ec <HAL_GPIO_EXTI_Callback+0x208>)
 8001780:	485b      	ldr	r0, [pc, #364]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001782:	f009 fa17 	bl	800abb4 <f_mount>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x210>)
 800178c:	701a      	strb	r2, [r3, #0]
			fres=f_opendir(&dp,"0:/music");
 800178e:	495a      	ldr	r1, [pc, #360]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x214>)
 8001790:	485a      	ldr	r0, [pc, #360]	; (80018fc <HAL_GPIO_EXTI_Callback+0x218>)
 8001792:	f00a fd7d 	bl	800c290 <f_opendir>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x210>)
 800179c:	701a      	strb	r2, [r3, #0]
			printf("fres = %d \r\n", fres);
 800179e:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x210>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4856      	ldr	r0, [pc, #344]	; (8001900 <HAL_GPIO_EXTI_Callback+0x21c>)
 80017a6:	f00a ff59 	bl	800c65c <iprintf>
			display_status.file_number = 0;
 80017aa:	4b4e      	ldr	r3, [pc, #312]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	709a      	strb	r2, [r3, #2]
				fres=f_readdir(&dp, &fno);
 80017b0:	4954      	ldr	r1, [pc, #336]	; (8001904 <HAL_GPIO_EXTI_Callback+0x220>)
 80017b2:	4852      	ldr	r0, [pc, #328]	; (80018fc <HAL_GPIO_EXTI_Callback+0x218>)
 80017b4:	f00a fe06 	bl	800c3c4 <f_readdir>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x210>)
 80017be:	701a      	strb	r2, [r3, #0]
				printf("file name: %s \r\n", fno.fname);
 80017c0:	4951      	ldr	r1, [pc, #324]	; (8001908 <HAL_GPIO_EXTI_Callback+0x224>)
 80017c2:	4852      	ldr	r0, [pc, #328]	; (800190c <HAL_GPIO_EXTI_Callback+0x228>)
 80017c4:	f00a ff4a 	bl	800c65c <iprintf>
				sprintf(buff_music,"%d. %s", display_status.file_number+1, fno.fname);
 80017c8:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80017ca:	789b      	ldrb	r3, [r3, #2]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <HAL_GPIO_EXTI_Callback+0x224>)
 80017d0:	494f      	ldr	r1, [pc, #316]	; (8001910 <HAL_GPIO_EXTI_Callback+0x22c>)
 80017d2:	4850      	ldr	r0, [pc, #320]	; (8001914 <HAL_GPIO_EXTI_Callback+0x230>)
 80017d4:	f00a ffd0 	bl	800c778 <siprintf>
				if(display_status.file_number<2)
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80017da:	789b      	ldrb	r3, [r3, #2]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d808      	bhi.n	80017f2 <HAL_GPIO_EXTI_Callback+0x10e>
					HD44780_SetCursor(0,display_status.file_number);
 80017e0:	4b40      	ldr	r3, [pc, #256]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	4619      	mov	r1, r3
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff faae 	bl	8000d48 <HD44780_SetCursor>
					HD44780_PrintStr(buff_music);
 80017ec:	4849      	ldr	r0, [pc, #292]	; (8001914 <HAL_GPIO_EXTI_Callback+0x230>)
 80017ee:	f7ff fb48 	bl	8000e82 <HD44780_PrintStr>
				display_status.file_number++;
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80017fc:	709a      	strb	r2, [r3, #2]
			while (fres == FR_OK && fno.fname[0] !='\0');
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x210>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <HAL_GPIO_EXTI_Callback+0x12a>
 8001806:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <HAL_GPIO_EXTI_Callback+0x220>)
 8001808:	7a5b      	ldrb	r3, [r3, #9]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1d0      	bne.n	80017b0 <HAL_GPIO_EXTI_Callback+0xcc>
			display_status.file_number =1; //Display can show only 2 lines
 800180e:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 8001810:	2201      	movs	r2, #1
 8001812:	709a      	strb	r2, [r3, #2]
			f_mount(NULL, "", 0);
 8001814:	2200      	movs	r2, #0
 8001816:	4935      	ldr	r1, [pc, #212]	; (80018ec <HAL_GPIO_EXTI_Callback+0x208>)
 8001818:	2000      	movs	r0, #0
 800181a:	f009 f9cb 	bl	800abb4 <f_mount>
			HD44780_SetCursor(0,0);
 800181e:	2100      	movs	r1, #0
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fa91 	bl	8000d48 <HD44780_SetCursor>
 8001826:	e0d6      	b.n	80019d6 <HAL_GPIO_EXTI_Callback+0x2f2>
		else if(display_status.page == 1 && display_status.cursor_line ==0)
 8001828:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d176      	bne.n	8001924 <HAL_GPIO_EXTI_Callback+0x240>
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d172      	bne.n	8001924 <HAL_GPIO_EXTI_Callback+0x240>
			fres = f_mount(&FatFs, "", 1);
 800183e:	2201      	movs	r2, #1
 8001840:	492a      	ldr	r1, [pc, #168]	; (80018ec <HAL_GPIO_EXTI_Callback+0x208>)
 8001842:	482b      	ldr	r0, [pc, #172]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001844:	f009 f9b6 	bl	800abb4 <f_mount>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x210>)
 800184e:	701a      	strb	r2, [r3, #0]
			fres=f_opendir(&dp,"0:/music");
 8001850:	4929      	ldr	r1, [pc, #164]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x214>)
 8001852:	482a      	ldr	r0, [pc, #168]	; (80018fc <HAL_GPIO_EXTI_Callback+0x218>)
 8001854:	f00a fd1c 	bl	800c290 <f_opendir>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x210>)
 800185e:	701a      	strb	r2, [r3, #0]
			uint8_t n = display_status.file_number;
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 8001862:	789b      	ldrb	r3, [r3, #2]
 8001864:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			display_status.file_number=0;
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 800186a:	2200      	movs	r2, #0
 800186c:	709a      	strb	r2, [r3, #2]
				fres=f_readdir(&dp, &fno);
 800186e:	4925      	ldr	r1, [pc, #148]	; (8001904 <HAL_GPIO_EXTI_Callback+0x220>)
 8001870:	4822      	ldr	r0, [pc, #136]	; (80018fc <HAL_GPIO_EXTI_Callback+0x218>)
 8001872:	f00a fda7 	bl	800c3c4 <f_readdir>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x210>)
 800187c:	701a      	strb	r2, [r3, #0]
				printf("file name: %s \r\n", fno.fname);
 800187e:	4922      	ldr	r1, [pc, #136]	; (8001908 <HAL_GPIO_EXTI_Callback+0x224>)
 8001880:	4822      	ldr	r0, [pc, #136]	; (800190c <HAL_GPIO_EXTI_Callback+0x228>)
 8001882:	f00a feeb 	bl	800c65c <iprintf>
				sprintf(display_status.music_name,"%s", fno.fname);
 8001886:	4a20      	ldr	r2, [pc, #128]	; (8001908 <HAL_GPIO_EXTI_Callback+0x224>)
 8001888:	4923      	ldr	r1, [pc, #140]	; (8001918 <HAL_GPIO_EXTI_Callback+0x234>)
 800188a:	4824      	ldr	r0, [pc, #144]	; (800191c <HAL_GPIO_EXTI_Callback+0x238>)
 800188c:	f00a ff74 	bl	800c778 <siprintf>
				display_status.file_number++;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 8001892:	789b      	ldrb	r3, [r3, #2]
 8001894:	3301      	adds	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 800189a:	709a      	strb	r2, [r3, #2]
			}while(fno.fname[0] !='\0' &&  display_status.file_number<=n-1);
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_GPIO_EXTI_Callback+0x220>)
 800189e:	7a5b      	ldrb	r3, [r3, #9]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_GPIO_EXTI_Callback+0x1cc>
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8de      	bhi.n	800186e <HAL_GPIO_EXTI_Callback+0x18a>
			display_status.file_number=n;
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80018b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018b6:	7093      	strb	r3, [r2, #2]
			f_mount(NULL, "", 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	490c      	ldr	r1, [pc, #48]	; (80018ec <HAL_GPIO_EXTI_Callback+0x208>)
 80018bc:	2000      	movs	r0, #0
 80018be:	f009 f979 	bl	800abb4 <f_mount>
			sprintf(path, "0:/music/%s", display_status.music_name);
 80018c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c6:	4a15      	ldr	r2, [pc, #84]	; (800191c <HAL_GPIO_EXTI_Callback+0x238>)
 80018c8:	4915      	ldr	r1, [pc, #84]	; (8001920 <HAL_GPIO_EXTI_Callback+0x23c>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00a ff54 	bl	800c778 <siprintf>
			start_play_music(path);
 80018d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fa4d 	bl	8001d74 <start_play_music>
		{
 80018da:	e07c      	b.n	80019d6 <HAL_GPIO_EXTI_Callback+0x2f2>
 80018dc:	0800db14 	.word	0x0800db14
 80018e0:	0800db20 	.word	0x0800db20
 80018e4:	20003580 	.word	0x20003580
 80018e8:	2000130c 	.word	0x2000130c
 80018ec:	0800da50 	.word	0x0800da50
 80018f0:	200002dc 	.word	0x200002dc
 80018f4:	20003380 	.word	0x20003380
 80018f8:	0800db30 	.word	0x0800db30
 80018fc:	20002338 	.word	0x20002338
 8001900:	0800db3c 	.word	0x0800db3c
 8001904:	20003360 	.word	0x20003360
 8001908:	20003369 	.word	0x20003369
 800190c:	0800db4c 	.word	0x0800db4c
 8001910:	0800db60 	.word	0x0800db60
 8001914:	20003388 	.word	0x20003388
 8001918:	0800db68 	.word	0x0800db68
 800191c:	20003583 	.word	0x20003583
 8001920:	0800db6c 	.word	0x0800db6c
		else if(display_status.page == 1 && display_status.cursor_line ==1)
 8001924:	4ba6      	ldr	r3, [pc, #664]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d151      	bne.n	80019d6 <HAL_GPIO_EXTI_Callback+0x2f2>
 8001932:	4ba3      	ldr	r3, [pc, #652]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001934:	785b      	ldrb	r3, [r3, #1]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d14d      	bne.n	80019d6 <HAL_GPIO_EXTI_Callback+0x2f2>
			fres = f_mount(&FatFs, "", 1);
 800193a:	2201      	movs	r2, #1
 800193c:	49a1      	ldr	r1, [pc, #644]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800193e:	48a2      	ldr	r0, [pc, #648]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001940:	f009 f938 	bl	800abb4 <f_mount>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4ba0      	ldr	r3, [pc, #640]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x4e8>)
 800194a:	701a      	strb	r2, [r3, #0]
			fres=f_opendir(&dp,"0:/music");
 800194c:	49a0      	ldr	r1, [pc, #640]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800194e:	48a1      	ldr	r0, [pc, #644]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001950:	f00a fc9e 	bl	800c290 <f_opendir>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b9c      	ldr	r3, [pc, #624]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x4e8>)
 800195a:	701a      	strb	r2, [r3, #0]
			uint8_t n = display_status.file_number;
 800195c:	4b98      	ldr	r3, [pc, #608]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800195e:	789b      	ldrb	r3, [r3, #2]
 8001960:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			display_status.file_number=0;
 8001964:	4b96      	ldr	r3, [pc, #600]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001966:	2200      	movs	r2, #0
 8001968:	709a      	strb	r2, [r3, #2]
				fres=f_readdir(&dp, &fno);
 800196a:	499b      	ldr	r1, [pc, #620]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800196c:	4899      	ldr	r0, [pc, #612]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 800196e:	f00a fd29 	bl	800c3c4 <f_readdir>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4b95      	ldr	r3, [pc, #596]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001978:	701a      	strb	r2, [r3, #0]
				printf("file name: %s \r\n", fno.fname);
 800197a:	4998      	ldr	r1, [pc, #608]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x4f8>)
 800197c:	4898      	ldr	r0, [pc, #608]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x4fc>)
 800197e:	f00a fe6d 	bl	800c65c <iprintf>
				sprintf(display_status.music_name,"%s", fno.fname);
 8001982:	4a96      	ldr	r2, [pc, #600]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001984:	4997      	ldr	r1, [pc, #604]	; (8001be4 <HAL_GPIO_EXTI_Callback+0x500>)
 8001986:	4898      	ldr	r0, [pc, #608]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x504>)
 8001988:	f00a fef6 	bl	800c778 <siprintf>
				display_status.file_number++;
 800198c:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800198e:	789b      	ldrb	r3, [r3, #2]
 8001990:	3301      	adds	r3, #1
 8001992:	b2da      	uxtb	r2, r3
 8001994:	4b8a      	ldr	r3, [pc, #552]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001996:	709a      	strb	r2, [r3, #2]
			}while(fno.fname[0] !='\0' &&  display_status.file_number<=n);
 8001998:	4b8f      	ldr	r3, [pc, #572]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800199a:	7a5b      	ldrb	r3, [r3, #9]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_GPIO_EXTI_Callback+0x2c8>
 80019a0:	4b87      	ldr	r3, [pc, #540]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80019a2:	789b      	ldrb	r3, [r3, #2]
 80019a4:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d2de      	bcs.n	800196a <HAL_GPIO_EXTI_Callback+0x286>
			display_status.file_number=n;
 80019ac:	4a84      	ldr	r2, [pc, #528]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80019ae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80019b2:	7093      	strb	r3, [r2, #2]
			f_mount(NULL, "", 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	4983      	ldr	r1, [pc, #524]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80019b8:	2000      	movs	r0, #0
 80019ba:	f009 f8fb 	bl	800abb4 <f_mount>
			sprintf(path, "0:/music/%s", display_status.music_name);
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	4a89      	ldr	r2, [pc, #548]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x504>)
 80019c4:	4989      	ldr	r1, [pc, #548]	; (8001bec <HAL_GPIO_EXTI_Callback+0x508>)
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00a fed6 	bl	800c778 <siprintf>
			start_play_music(path);
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f9cf 	bl	8001d74 <start_play_music>
		if(display_status.page == 0 && display_status.cursor_line ==1) // Recording
 80019d6:	4b7a      	ldr	r3, [pc, #488]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d121      	bne.n	8001a28 <HAL_GPIO_EXTI_Callback+0x344>
 80019e4:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80019e6:	785b      	ldrb	r3, [r3, #1]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d11d      	bne.n	8001a28 <HAL_GPIO_EXTI_Callback+0x344>
			HD44780_Clear();
 80019ec:	f7ff f996 	bl	8000d1c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80019f0:	2100      	movs	r1, #0
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff f9a8 	bl	8000d48 <HD44780_SetCursor>
			HD44780_PrintStr("1.New Recording");
 80019f8:	487d      	ldr	r0, [pc, #500]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x50c>)
 80019fa:	f7ff fa42 	bl	8000e82 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80019fe:	2101      	movs	r1, #1
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff f9a1 	bl	8000d48 <HD44780_SetCursor>
			HD44780_PrintStr("2.Listen Record");
 8001a06:	487b      	ldr	r0, [pc, #492]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x510>)
 8001a08:	f7ff fa3b 	bl	8000e82 <HD44780_PrintStr>
			display_status.page = 2;
 8001a0c:	4a6c      	ldr	r2, [pc, #432]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001a0e:	7813      	ldrb	r3, [r2, #0]
 8001a10:	2102      	movs	r1, #2
 8001a12:	f361 0303 	bfi	r3, r1, #0, #4
 8001a16:	7013      	strb	r3, [r2, #0]
			display_status.cursor_line = 0;
 8001a18:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	705a      	strb	r2, [r3, #1]
			HD44780_SetCursor(0,0);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff f991 	bl	8000d48 <HD44780_SetCursor>
 8001a26:	e18a      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
		else if(display_status.page == 2 && display_status.cursor_line ==0) //New recording
 8001a28:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d10d      	bne.n	8001a52 <HAL_GPIO_EXTI_Callback+0x36e>
 8001a36:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_GPIO_EXTI_Callback+0x36e>
			GPIOC->ODR |= GPIO_ODR_3;
 8001a3e:	4b6e      	ldr	r3, [pc, #440]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x514>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4a6d      	ldr	r2, [pc, #436]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x514>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6153      	str	r3, [r2, #20]
			HAL_TIM_Base_Start_IT(&htim6);
 8001a4a:	486c      	ldr	r0, [pc, #432]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x518>)
 8001a4c:	f004 f8fc 	bl	8005c48 <HAL_TIM_Base_Start_IT>
 8001a50:	e175      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
		else if(display_status.page == 2 && display_status.cursor_line ==1) //Listen record
 8001a52:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	f040 816e 	bne.w	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
 8001a62:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	f040 8169 	bne.w	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
			GPIOB->ODR |= GPIO_ODR_0;
 8001a6c:	4b64      	ldr	r3, [pc, #400]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x51c>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	4a63      	ldr	r2, [pc, #396]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x51c>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6153      	str	r3, [r2, #20]
			HAL_Delay(10);
 8001a78:	200a      	movs	r0, #10
 8001a7a:	f000 fdf1 	bl	8002660 <HAL_Delay>
			GPIOB->ODR &= ~GPIO_ODR_0;
 8001a7e:	4b60      	ldr	r3, [pc, #384]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x51c>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a5f      	ldr	r2, [pc, #380]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x51c>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6153      	str	r3, [r2, #20]
}
 8001a8a:	e158      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
	else if(GPIO_Pin == GPIO_PIN_11)  // ->
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a92:	f040 80bb 	bne.w	8001c0c <HAL_GPIO_EXTI_Callback+0x528>
		if(display_status.page == 0) {HD44780_SetCursor(0,1); display_status.cursor_line =1;}
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <HAL_GPIO_EXTI_Callback+0x3ce>
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff f94e 	bl	8000d48 <HD44780_SetCursor>
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	705a      	strb	r2, [r3, #1]
		if(display_status.page == 1)
 8001ab2:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d16f      	bne.n	8001ba0 <HAL_GPIO_EXTI_Callback+0x4bc>
			if(display_status.cursor_line == 1)
 8001ac0:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d164      	bne.n	8001b92 <HAL_GPIO_EXTI_Callback+0x4ae>
				fres = f_mount(&FatFs, "", 1);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	493e      	ldr	r1, [pc, #248]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001acc:	483e      	ldr	r0, [pc, #248]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001ace:	f009 f871 	bl	800abb4 <f_mount>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001ad8:	701a      	strb	r2, [r3, #0]
				fres=f_opendir(&dp,"0:/music");
 8001ada:	493d      	ldr	r1, [pc, #244]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001adc:	483d      	ldr	r0, [pc, #244]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001ade:	f00a fbd7 	bl	800c290 <f_opendir>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001ae8:	701a      	strb	r2, [r3, #0]
				display_status.file_number++;
 8001aea:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001aec:	789b      	ldrb	r3, [r3, #2]
 8001aee:	3301      	adds	r3, #1
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001af4:	709a      	strb	r2, [r3, #2]
				uint8_t n = display_status.file_number;
 8001af6:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001af8:	789b      	ldrb	r3, [r3, #2]
 8001afa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				display_status.file_number=0;
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	709a      	strb	r2, [r3, #2]
				HD44780_Clear();
 8001b04:	f7ff f90a 	bl	8000d1c <HD44780_Clear>
					fres=f_readdir(&dp, &fno);
 8001b08:	4933      	ldr	r1, [pc, #204]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001b0a:	4832      	ldr	r0, [pc, #200]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001b0c:	f00a fc5a 	bl	800c3c4 <f_readdir>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001b16:	701a      	strb	r2, [r3, #0]
					printf("file name: %s \r\n", fno.fname);
 8001b18:	4930      	ldr	r1, [pc, #192]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001b1a:	4831      	ldr	r0, [pc, #196]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8001b1c:	f00a fd9e 	bl	800c65c <iprintf>
					sprintf(buff_music,"%d. %s", display_status.file_number+1, fno.fname);
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b22:	789b      	ldrb	r3, [r3, #2]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001b28:	4936      	ldr	r1, [pc, #216]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x520>)
 8001b2a:	4837      	ldr	r0, [pc, #220]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x524>)
 8001b2c:	f00a fe24 	bl	800c778 <siprintf>
					if(display_status.file_number == n-1)
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b32:	789b      	ldrb	r3, [r3, #2]
 8001b34:	461a      	mov	r2, r3
 8001b36:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d107      	bne.n	8001b50 <HAL_GPIO_EXTI_Callback+0x46c>
						HD44780_SetCursor(0,0);
 8001b40:	2100      	movs	r1, #0
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff f900 	bl	8000d48 <HD44780_SetCursor>
						HD44780_PrintStr(buff_music);
 8001b48:	482f      	ldr	r0, [pc, #188]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x524>)
 8001b4a:	f7ff f99a 	bl	8000e82 <HD44780_PrintStr>
 8001b4e:	e00c      	b.n	8001b6a <HAL_GPIO_EXTI_Callback+0x486>
					else if(display_status.file_number == n)
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b52:	789b      	ldrb	r3, [r3, #2]
 8001b54:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d106      	bne.n	8001b6a <HAL_GPIO_EXTI_Callback+0x486>
						HD44780_SetCursor(0,1);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff f8f2 	bl	8000d48 <HD44780_SetCursor>
						HD44780_PrintStr(buff_music);
 8001b64:	4828      	ldr	r0, [pc, #160]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x524>)
 8001b66:	f7ff f98c 	bl	8000e82 <HD44780_PrintStr>
					display_status.file_number++;
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b6c:	789b      	ldrb	r3, [r3, #2]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b74:	709a      	strb	r2, [r3, #2]
				}while(fno.fname[0] !='\0' &&  display_status.file_number<=n);
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001b78:	7a5b      	ldrb	r3, [r3, #9]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_GPIO_EXTI_Callback+0x4a6>
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b80:	789b      	ldrb	r3, [r3, #2]
 8001b82:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d2be      	bcs.n	8001b08 <HAL_GPIO_EXTI_Callback+0x424>
				display_status.file_number=n;
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b8c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b90:	7093      	strb	r3, [r2, #2]
			HD44780_SetCursor(0,1);
 8001b92:	2101      	movs	r1, #1
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff f8d7 	bl	8000d48 <HD44780_SetCursor>
			display_status.cursor_line =1;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	705a      	strb	r2, [r3, #1]
		if(display_status.page == 2)
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	f040 80c7 	bne.w	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
			HD44780_SetCursor(0,1);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff f8c8 	bl	8000d48 <HD44780_SetCursor>
			display_status.cursor_line =1;
 8001bb8:	4b01      	ldr	r3, [pc, #4]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	705a      	strb	r2, [r3, #1]
}
 8001bbe:	e0be      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
 8001bc0:	20003580 	.word	0x20003580
 8001bc4:	0800da50 	.word	0x0800da50
 8001bc8:	200002dc 	.word	0x200002dc
 8001bcc:	20003380 	.word	0x20003380
 8001bd0:	0800db30 	.word	0x0800db30
 8001bd4:	20002338 	.word	0x20002338
 8001bd8:	20003360 	.word	0x20003360
 8001bdc:	20003369 	.word	0x20003369
 8001be0:	0800db4c 	.word	0x0800db4c
 8001be4:	0800db68 	.word	0x0800db68
 8001be8:	20003583 	.word	0x20003583
 8001bec:	0800db6c 	.word	0x0800db6c
 8001bf0:	0800db78 	.word	0x0800db78
 8001bf4:	0800db88 	.word	0x0800db88
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	20000178 	.word	0x20000178
 8001c00:	48000400 	.word	0x48000400
 8001c04:	0800db60 	.word	0x0800db60
 8001c08:	20003388 	.word	0x20003388
	else if(GPIO_Pin == GPIO_PIN_12)  // <-
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c12:	f040 8094 	bne.w	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
		if(display_status.page == 0) {HD44780_SetCursor(0,0); display_status.cursor_line =0;}
 8001c16:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d106      	bne.n	8001c32 <HAL_GPIO_EXTI_Callback+0x54e>
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff f88e 	bl	8000d48 <HD44780_SetCursor>
 8001c2c:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	705a      	strb	r2, [r3, #1]
		if(display_status.page == 1)
 8001c32:	4b45      	ldr	r3, [pc, #276]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d16f      	bne.n	8001d20 <HAL_GPIO_EXTI_Callback+0x63c>
			if(display_status.cursor_line == 0)
 8001c40:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d164      	bne.n	8001d12 <HAL_GPIO_EXTI_Callback+0x62e>
				fres = f_mount(&FatFs, "", 1);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4940      	ldr	r1, [pc, #256]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x668>)
 8001c4c:	4840      	ldr	r0, [pc, #256]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x66c>)
 8001c4e:	f008 ffb1 	bl	800abb4 <f_mount>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x670>)
 8001c58:	701a      	strb	r2, [r3, #0]
				fres=f_opendir(&dp,"0:/music");
 8001c5a:	493f      	ldr	r1, [pc, #252]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x674>)
 8001c5c:	483f      	ldr	r0, [pc, #252]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x678>)
 8001c5e:	f00a fb17 	bl	800c290 <f_opendir>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x670>)
 8001c68:	701a      	strb	r2, [r3, #0]
				display_status.file_number--;
 8001c6a:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001c6c:	789b      	ldrb	r3, [r3, #2]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001c74:	709a      	strb	r2, [r3, #2]
				uint8_t n = display_status.file_number;
 8001c76:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001c78:	789b      	ldrb	r3, [r3, #2]
 8001c7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				display_status.file_number=0;
 8001c7e:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	709a      	strb	r2, [r3, #2]
				HD44780_Clear();
 8001c84:	f7ff f84a 	bl	8000d1c <HD44780_Clear>
					fres=f_readdir(&dp, &fno);
 8001c88:	4935      	ldr	r1, [pc, #212]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x67c>)
 8001c8a:	4834      	ldr	r0, [pc, #208]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x678>)
 8001c8c:	f00a fb9a 	bl	800c3c4 <f_readdir>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x670>)
 8001c96:	701a      	strb	r2, [r3, #0]
					printf("file name: %s \r\n", fno.fname);
 8001c98:	4932      	ldr	r1, [pc, #200]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x680>)
 8001c9a:	4833      	ldr	r0, [pc, #204]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x684>)
 8001c9c:	f00a fcde 	bl	800c65c <iprintf>
					sprintf(buff_music,"%d. %s", display_status.file_number+1, fno.fname);
 8001ca0:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001ca2:	789b      	ldrb	r3, [r3, #2]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x680>)
 8001ca8:	4930      	ldr	r1, [pc, #192]	; (8001d6c <HAL_GPIO_EXTI_Callback+0x688>)
 8001caa:	4831      	ldr	r0, [pc, #196]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x68c>)
 8001cac:	f00a fd64 	bl	800c778 <siprintf>
					if(display_status.file_number == n-1)
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001cb2:	789b      	ldrb	r3, [r3, #2]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d107      	bne.n	8001cd0 <HAL_GPIO_EXTI_Callback+0x5ec>
						HD44780_SetCursor(0,0);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff f840 	bl	8000d48 <HD44780_SetCursor>
						HD44780_PrintStr(buff_music);
 8001cc8:	4829      	ldr	r0, [pc, #164]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x68c>)
 8001cca:	f7ff f8da 	bl	8000e82 <HD44780_PrintStr>
 8001cce:	e00c      	b.n	8001cea <HAL_GPIO_EXTI_Callback+0x606>
					else if(display_status.file_number == n)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001cd2:	789b      	ldrb	r3, [r3, #2]
 8001cd4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d106      	bne.n	8001cea <HAL_GPIO_EXTI_Callback+0x606>
						HD44780_SetCursor(0,1);
 8001cdc:	2101      	movs	r1, #1
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7ff f832 	bl	8000d48 <HD44780_SetCursor>
						HD44780_PrintStr(buff_music);
 8001ce4:	4822      	ldr	r0, [pc, #136]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x68c>)
 8001ce6:	f7ff f8cc 	bl	8000e82 <HD44780_PrintStr>
					display_status.file_number++;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001cec:	789b      	ldrb	r3, [r3, #2]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001cf4:	709a      	strb	r2, [r3, #2]
				}while(fno.fname[0] !='\0' &&  display_status.file_number<=n);
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x67c>)
 8001cf8:	7a5b      	ldrb	r3, [r3, #9]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_GPIO_EXTI_Callback+0x626>
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001d00:	789b      	ldrb	r3, [r3, #2]
 8001d02:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d2be      	bcs.n	8001c88 <HAL_GPIO_EXTI_Callback+0x5a4>
				display_status.file_number=n;
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001d0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d10:	7093      	strb	r3, [r2, #2]
			HD44780_SetCursor(0,0);
 8001d12:	2100      	movs	r1, #0
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f817 	bl	8000d48 <HD44780_SetCursor>
			display_status.cursor_line =0;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	705a      	strb	r2, [r3, #1]
		if(display_status.page == 2)
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d107      	bne.n	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
			HD44780_SetCursor(0,0);
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff f809 	bl	8000d48 <HD44780_SetCursor>
			display_status.cursor_line =0;
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x664>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
}
 8001d3c:	e7ff      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0x65a>
 8001d3e:	bf00      	nop
 8001d40:	3750      	adds	r7, #80	; 0x50
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20003580 	.word	0x20003580
 8001d4c:	0800da50 	.word	0x0800da50
 8001d50:	200002dc 	.word	0x200002dc
 8001d54:	20003380 	.word	0x20003380
 8001d58:	0800db30 	.word	0x0800db30
 8001d5c:	20002338 	.word	0x20002338
 8001d60:	20003360 	.word	0x20003360
 8001d64:	20003369 	.word	0x20003369
 8001d68:	0800db4c 	.word	0x0800db4c
 8001d6c:	0800db60 	.word	0x0800db60
 8001d70:	20003388 	.word	0x20003388

08001d74 <start_play_music>:

void start_play_music(const TCHAR* path)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	fres = f_mount(&FatFs, "", 1);    //1=mount now  "" == '\0' == 0
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4914      	ldr	r1, [pc, #80]	; (8001dd0 <start_play_music+0x5c>)
 8001d80:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <start_play_music+0x60>)
 8001d82:	f008 ff17 	bl	800abb4 <f_mount>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <start_play_music+0x64>)
 8001d8c:	701a      	strb	r2, [r3, #0]
  fres = f_open(&fil, path, FA_READ );
 8001d8e:	2201      	movs	r2, #1
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4812      	ldr	r0, [pc, #72]	; (8001ddc <start_play_music+0x68>)
 8001d94:	f008 ff58 	bl	800ac48 <f_open>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <start_play_music+0x64>)
 8001d9e:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <start_play_music+0x64>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10f      	bne.n	8001dc8 <start_play_music+0x54>
	  if((TIM17->DIER &(1<<0)) == 0)
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <start_play_music+0x6c>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <start_play_music+0x54>
	  {
		  TIM17->DIER |=1;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <start_play_music+0x6c>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <start_play_music+0x6c>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	60d3      	str	r3, [r2, #12]
		  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4808      	ldr	r0, [pc, #32]	; (8001de4 <start_play_music+0x70>)
 8001dc4:	f004 f824 	bl	8005e10 <HAL_TIM_PWM_Start>
	  }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	0800da50 	.word	0x0800da50
 8001dd4:	200002dc 	.word	0x200002dc
 8001dd8:	20003380 	.word	0x20003380
 8001ddc:	2000130c 	.word	0x2000130c
 8001de0:	40014800 	.word	0x40014800
 8001de4:	200001c4 	.word	0x200001c4

08001de8 <stop_play_music>:

void stop_play_music()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	TIM17->DIER &=~1;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <stop_play_music+0x3c>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <stop_play_music+0x3c>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8001df8:	2100      	movs	r1, #0
 8001dfa:	480b      	ldr	r0, [pc, #44]	; (8001e28 <stop_play_music+0x40>)
 8001dfc:	f004 f8ee 	bl	8005fdc <HAL_TIM_PWM_Stop>
	tim17_counter = 0;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <stop_play_music+0x44>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	801a      	strh	r2, [r3, #0]
	f_close(&fil);
 8001e06:	480a      	ldr	r0, [pc, #40]	; (8001e30 <stop_play_music+0x48>)
 8001e08:	f009 ff25 	bl	800bc56 <f_close>
	fres = f_mount(NULL, "", 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4909      	ldr	r1, [pc, #36]	; (8001e34 <stop_play_music+0x4c>)
 8001e10:	2000      	movs	r0, #0
 8001e12:	f008 fecf 	bl	800abb4 <f_mount>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <stop_play_music+0x50>)
 8001e1c:	701a      	strb	r2, [r3, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40014800 	.word	0x40014800
 8001e28:	200001c4 	.word	0x200001c4
 8001e2c:	20003590 	.word	0x20003590
 8001e30:	2000130c 	.word	0x2000130c
 8001e34:	0800da50 	.word	0x0800da50
 8001e38:	20003380 	.word	0x20003380

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <Error_Handler+0x8>
	...

08001e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_MspInit+0x44>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <HAL_MspInit+0x44>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6193      	str	r3, [r2, #24]
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_MspInit+0x44>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_MspInit+0x44>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_MspInit+0x44>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_MspInit+0x44>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_I2C_MspInit+0x7c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d128      	bne.n	8001f04 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_I2C_MspInit+0x80>)
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_I2C_MspInit+0x80>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	6153      	str	r3, [r2, #20]
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_I2C_MspInit+0x80>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed0:	2312      	movs	r3, #18
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001edc:	2304      	movs	r3, #4
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480b      	ldr	r0, [pc, #44]	; (8001f14 <HAL_I2C_MspInit+0x84>)
 8001ee8:	f000 fec4 	bl	8002c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_I2C_MspInit+0x80>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_I2C_MspInit+0x80>)
 8001ef2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef6:	61d3      	str	r3, [r2, #28]
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_I2C_MspInit+0x80>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40005400 	.word	0x40005400
 8001f10:	40021000 	.word	0x40021000
 8001f14:	48000400 	.word	0x48000400

08001f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <HAL_SPI_MspInit+0x7c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d128      	bne.n	8001f8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5c:	6153      	str	r3, [r2, #20]
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <HAL_SPI_MspInit+0x84>)
 8001f88:	f000 fe74 	bl	8002c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40003800 	.word	0x40003800
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	48000400 	.word	0x48000400

08001fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <HAL_TIM_Base_MspInit+0xd0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d114      	bne.n	8001fdc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fb2:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_TIM_Base_MspInit+0xd4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <HAL_TIM_Base_MspInit+0xd4>)
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_TIM_Base_MspInit+0xd4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2103      	movs	r1, #3
 8001fce:	2036      	movs	r0, #54	; 0x36
 8001fd0:	f000 fc45 	bl	800285e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fd4:	2036      	movs	r0, #54	; 0x36
 8001fd6:	f000 fc5e 	bl	8002896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001fda:	e044      	b.n	8002066 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM17)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_TIM_Base_MspInit+0xd8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d13f      	bne.n	8002066 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_TIM_Base_MspInit+0xd4>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	4a22      	ldr	r2, [pc, #136]	; (8002074 <HAL_TIM_Base_MspInit+0xd4>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff0:	6193      	str	r3, [r2, #24]
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_TIM_Base_MspInit+0xd4>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim17_ch1_up.Instance = DMA1_Channel1;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 8002000:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <HAL_TIM_Base_MspInit+0xe0>)
 8002002:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 8002006:	2210      	movs	r2, #16
 8002008:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1_up.Init.Mode = DMA_NORMAL;
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 800202e:	4813      	ldr	r0, [pc, #76]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 8002030:	f000 fc4b 	bl	80028ca <HAL_DMA_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_TIM_Base_MspInit+0x9e>
      Error_Handler();
 800203a:	f7ff feff 	bl	8001e3c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1_up);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 800204e:	621a      	str	r2, [r3, #32]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_TIM_Base_MspInit+0xdc>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2102      	movs	r1, #2
 800205a:	201a      	movs	r0, #26
 800205c:	f000 fbff 	bl	800285e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002060:	201a      	movs	r0, #26
 8002062:	f000 fc18 	bl	8002896 <HAL_NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40001000 	.word	0x40001000
 8002074:	40021000 	.word	0x40021000
 8002078:	40014800 	.word	0x40014800
 800207c:	20000210 	.word	0x20000210
 8002080:	40020008 	.word	0x40020008

08002084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_TIM_MspPostInit+0x64>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d11c      	bne.n	80020e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4a10      	ldr	r2, [pc, #64]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b0:	6153      	str	r3, [r2, #20]
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020dc:	f000 fdca 	bl	8002c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40014800 	.word	0x40014800
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_UART_MspInit+0x7c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d127      	bne.n	8002162 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_UART_MspInit+0x80>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_UART_MspInit+0x80>)
 8002118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211c:	6193      	str	r3, [r2, #24]
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_UART_MspInit+0x80>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_UART_MspInit+0x80>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_UART_MspInit+0x80>)
 8002130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002134:	6153      	str	r3, [r2, #20]
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_UART_MspInit+0x80>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002142:	2330      	movs	r3, #48	; 0x30
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002152:	2307      	movs	r3, #7
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <HAL_UART_MspInit+0x84>)
 800215e:	f000 fd89 	bl	8002c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40013800 	.word	0x40013800
 8002170:	40021000 	.word	0x40021000
 8002174:	48000800 	.word	0x48000800

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800217c:	e7fe      	b.n	800217c <NMI_Handler+0x4>

0800217e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <HardFault_Handler+0x4>

08002184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <MemManage_Handler+0x4>

0800218a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <BusFault_Handler+0x4>

08002190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <UsageFault_Handler+0x4>

08002196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <SysTick_Handler+0x34>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <SysTick_Handler+0x18>
	  Timer1--;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <SysTick_Handler+0x34>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <SysTick_Handler+0x34>)
 80021d6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <SysTick_Handler+0x38>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <SysTick_Handler+0x2c>
	  Timer2--;
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <SysTick_Handler+0x38>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <SysTick_Handler+0x38>)
 80021ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ec:	f000 fa18 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200000b4 	.word	0x200000b4
 80021f8:	200000b6 	.word	0x200000b6

080021fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if(DMA1->ISR & DMA_ISR_TCIF1 == DMA_ISR_TCIF1)
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <DMA1_Channel1_IRQHandler+0x70>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d026      	beq.n	800225c <DMA1_Channel1_IRQHandler+0x60>
	{
		DMA1->IFCR |= DMA_IFCR_CTCIF1;
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <DMA1_Channel1_IRQHandler+0x70>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <DMA1_Channel1_IRQHandler+0x70>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6053      	str	r3, [r2, #4]
		HAL_TIM_PWM_Stop_DMA(&htim17, TIM_CHANNEL_1);
 800221a:	2100      	movs	r1, #0
 800221c:	4814      	ldr	r0, [pc, #80]	; (8002270 <DMA1_Channel1_IRQHandler+0x74>)
 800221e:	f004 f969 	bl	80064f4 <HAL_TIM_PWM_Stop_DMA>
		UINT bytesRead;
		fres = f_read(&fil, buff_music, sizeof(buff_music), &bytesRead);
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002228:	4912      	ldr	r1, [pc, #72]	; (8002274 <DMA1_Channel1_IRQHandler+0x78>)
 800222a:	4813      	ldr	r0, [pc, #76]	; (8002278 <DMA1_Channel1_IRQHandler+0x7c>)
 800222c:	f009 f824 	bl	800b278 <f_read>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <DMA1_Channel1_IRQHandler+0x80>)
 8002236:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)buff_music, sizeof(buff_music));
 8002238:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <DMA1_Channel1_IRQHandler+0x78>)
 800223e:	2100      	movs	r1, #0
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <DMA1_Channel1_IRQHandler+0x74>)
 8002242:	f003 ff59 	bl	80060f8 <HAL_TIM_PWM_Start_DMA>

		if(fres != FR_OK)
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <DMA1_Channel1_IRQHandler+0x80>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d006      	beq.n	800225c <DMA1_Channel1_IRQHandler+0x60>
		{
			HAL_TIM_PWM_Stop_DMA(&htim17, TIM_CHANNEL_1);
 800224e:	2100      	movs	r1, #0
 8002250:	4807      	ldr	r0, [pc, #28]	; (8002270 <DMA1_Channel1_IRQHandler+0x74>)
 8002252:	f004 f94f 	bl	80064f4 <HAL_TIM_PWM_Stop_DMA>
			stop_play_music(&fil);
 8002256:	4808      	ldr	r0, [pc, #32]	; (8002278 <DMA1_Channel1_IRQHandler+0x7c>)
 8002258:	f7ff fdc6 	bl	8001de8 <stop_play_music>
		}
	}
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 800225c:	4808      	ldr	r0, [pc, #32]	; (8002280 <DMA1_Channel1_IRQHandler+0x84>)
 800225e:	f000 fc18 	bl	8002a92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40020000 	.word	0x40020000
 8002270:	200001c4 	.word	0x200001c4
 8002274:	20003388 	.word	0x20003388
 8002278:	2000130c 	.word	0x2000130c
 800227c:	20003380 	.word	0x20003380
 8002280:	20000210 	.word	0x20000210

08002284 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if((TIM17->SR & TIM_SR_UIF) == TIM_SR_UIF)
 800228a:	4b21      	ldr	r3, [pc, #132]	; (8002310 <TIM1_TRG_COM_TIM17_IRQHandler+0x8c>)
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d135      	bne.n	8002302 <TIM1_TRG_COM_TIM17_IRQHandler+0x7e>
	{
		TIM17->SR &= ~TIM_SR_UIF;
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <TIM1_TRG_COM_TIM17_IRQHandler+0x8c>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <TIM1_TRG_COM_TIM17_IRQHandler+0x8c>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6113      	str	r3, [r2, #16]
		if(tim17_counter == 500)
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022aa:	d102      	bne.n	80022b2 <TIM1_TRG_COM_TIM17_IRQHandler+0x2e>
		{
			tim17_counter = 0;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	801a      	strh	r2, [r3, #0]
		}

		if(tim17_counter == 0)
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>
		{
			UINT bytesRead = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
			fres = f_read(&fil, buff_music, sizeof(buff_music), &bytesRead);
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80022c4:	4914      	ldr	r1, [pc, #80]	; (8002318 <TIM1_TRG_COM_TIM17_IRQHandler+0x94>)
 80022c6:	4815      	ldr	r0, [pc, #84]	; (800231c <TIM1_TRG_COM_TIM17_IRQHandler+0x98>)
 80022c8:	f008 ffd6 	bl	800b278 <f_read>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <TIM1_TRG_COM_TIM17_IRQHandler+0x9c>)
 80022d2:	701a      	strb	r2, [r3, #0]
			if( bytesRead == 0 && fres == FR_OK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <TIM1_TRG_COM_TIM17_IRQHandler+0x9c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>
			{
				stop_play_music(&fil);
 80022e2:	480e      	ldr	r0, [pc, #56]	; (800231c <TIM1_TRG_COM_TIM17_IRQHandler+0x98>)
 80022e4:	f7ff fd80 	bl	8001de8 <stop_play_music>
			}
		}
		TIM17->CCR1 = buff_music[tim17_counter];
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <TIM1_TRG_COM_TIM17_IRQHandler+0x94>)
 80022f0:	5c9a      	ldrb	r2, [r3, r2]
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <TIM1_TRG_COM_TIM17_IRQHandler+0x8c>)
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34
		tim17_counter++;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <TIM1_TRG_COM_TIM17_IRQHandler+0x90>)
 8002300:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002302:	4808      	ldr	r0, [pc, #32]	; (8002324 <TIM1_TRG_COM_TIM17_IRQHandler+0xa0>)
 8002304:	f004 f9e6 	bl	80066d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40014800 	.word	0x40014800
 8002314:	20003590 	.word	0x20003590
 8002318:	20003388 	.word	0x20003388
 800231c:	2000130c 	.word	0x2000130c
 8002320:	20003380 	.word	0x20003380
 8002324:	200001c4 	.word	0x200001c4

08002328 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_Delay(600);
 800232c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002330:	f000 f996 	bl	8002660 <HAL_Delay>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002334:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002338:	f000 fe3e 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800233c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002340:	f000 fe3a 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002344:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002348:	f000 fe36 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800234c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002350:	f000 fe32 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if((TIM6->SR & TIM_SR_UIF) == TIM_SR_UIF)
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <TIM6_DAC_IRQHandler+0x68>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d126      	bne.n	80023b6 <TIM6_DAC_IRQHandler+0x5e>
	{
		TIM16->SR &= ~TIM_SR_UIF;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <TIM6_DAC_IRQHandler+0x6c>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <TIM6_DAC_IRQHandler+0x6c>)
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6113      	str	r3, [r2, #16]
		if(((GPIOC->IDR & GPIO_ODR_10) == 0) || !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10))
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <TIM6_DAC_IRQHandler+0x70>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <TIM6_DAC_IRQHandler+0x38>
 8002380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002384:	4810      	ldr	r0, [pc, #64]	; (80023c8 <TIM6_DAC_IRQHandler+0x70>)
 8002386:	f000 fde7 	bl	8002f58 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d112      	bne.n	80023b6 <TIM6_DAC_IRQHandler+0x5e>
		{
			printf("%d \r\n", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10));
 8002390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <TIM6_DAC_IRQHandler+0x70>)
 8002396:	f000 fddf 	bl	8002f58 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	4619      	mov	r1, r3
 800239e:	480b      	ldr	r0, [pc, #44]	; (80023cc <TIM6_DAC_IRQHandler+0x74>)
 80023a0:	f00a f95c 	bl	800c65c <iprintf>
			GPIOC->ODR &= ~GPIO_IDR_3;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <TIM6_DAC_IRQHandler+0x70>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <TIM6_DAC_IRQHandler+0x70>)
 80023aa:	f023 0308 	bic.w	r3, r3, #8
 80023ae:	6153      	str	r3, [r2, #20]
			HAL_TIM_Base_Stop_IT(&htim6);
 80023b0:	4807      	ldr	r0, [pc, #28]	; (80023d0 <TIM6_DAC_IRQHandler+0x78>)
 80023b2:	f003 fc9d 	bl	8005cf0 <HAL_TIM_Base_Stop_IT>
		}
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023b6:	4806      	ldr	r0, [pc, #24]	; (80023d0 <TIM6_DAC_IRQHandler+0x78>)
 80023b8:	f004 f98c 	bl	80066d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40001000 	.word	0x40001000
 80023c4:	40014400 	.word	0x40014400
 80023c8:	48000800 	.word	0x48000800
 80023cc:	0800db98 	.word	0x0800db98
 80023d0:	20000178 	.word	0x20000178

080023d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e00a      	b.n	80023fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023e6:	f3af 8000 	nop.w
 80023ea:	4601      	mov	r1, r0
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	60ba      	str	r2, [r7, #8]
 80023f2:	b2ca      	uxtb	r2, r1
 80023f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	dbf0      	blt.n	80023e6 <_read+0x12>
	}

return len;
 8002404:	687b      	ldr	r3, [r7, #4]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e009      	b.n	8002434 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	60ba      	str	r2, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff f8bf 	bl	80015ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	dbf1      	blt.n	8002420 <_write+0x12>
	}
	return len;
 800243c:	687b      	ldr	r3, [r7, #4]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <_close>:

int _close(int file)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
	return -1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246e:	605a      	str	r2, [r3, #4]
	return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_isatty>:

int _isatty(int file)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
	return 1;
 8002486:	2301      	movs	r3, #1
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
	return 0;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b8:	4a14      	ldr	r2, [pc, #80]	; (800250c <_sbrk+0x5c>)
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <_sbrk+0x60>)
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <_sbrk+0x64>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <_sbrk+0x68>)
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d207      	bcs.n	80024f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e0:	f00a f88a 	bl	800c5f8 <__errno>
 80024e4:	4603      	mov	r3, r0
 80024e6:	220c      	movs	r2, #12
 80024e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	e009      	b.n	8002504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <_sbrk+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <_sbrk+0x64>)
 8002500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20004000 	.word	0x20004000
 8002510:	00000400 	.word	0x00000400
 8002514:	20003594 	.word	0x20003594
 8002518:	200037e0 	.word	0x200037e0

0800251c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <SystemInit+0x20>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <SystemInit+0x20>)
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800252c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002578 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002544:	f7ff ffea 	bl	800251c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <LoopForever+0x6>)
  ldr r1, =_edata
 800254a:	490d      	ldr	r1, [pc, #52]	; (8002580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <LoopForever+0xe>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <LoopForever+0x16>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256e:	f00a f849 	bl	800c604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002572:	f7fe fd75 	bl	8001060 <main>

08002576 <LoopForever>:

LoopForever:
    b LoopForever
 8002576:	e7fe      	b.n	8002576 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002578:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002584:	0800e210 	.word	0x0800e210
  ldr r2, =_sbss
 8002588:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800258c:	200037e0 	.word	0x200037e0

08002590 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_IRQHandler>
	...

08002594 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_Init+0x28>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_Init+0x28>)
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a4:	2003      	movs	r0, #3
 80025a6:	f000 f94f 	bl	8002848 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f000 f808 	bl	80025c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b0:	f7ff fc4a 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40022000 	.word	0x40022000

080025c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x54>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_InitTick+0x58>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f967 	bl	80028b2 <HAL_SYSTICK_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00e      	b.n	800260c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0f      	cmp	r3, #15
 80025f2:	d80a      	bhi.n	800260a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f4:	2200      	movs	r2, #0
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f000 f92f 	bl	800285e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <HAL_InitTick+0x5c>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000014 	.word	0x20000014
 8002618:	2000001c 	.word	0x2000001c
 800261c:	20000018 	.word	0x20000018

08002620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x20>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x24>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_IncTick+0x24>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	2000001c 	.word	0x2000001c
 8002644:	20003598 	.word	0x20003598

08002648 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;  
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20003598 	.word	0x20003598

08002660 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffde 	bl	8002648 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	2000001c 	.word	0x2000001c

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026da:	4a04      	ldr	r2, [pc, #16]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	60d3      	str	r3, [r2, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <__NVIC_EnableIRQ+0x38>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2001      	movs	r0, #1
 800272e:	fa00 f202 	lsl.w	r2, r0, r2
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000e100 	.word	0xe000e100

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db0a      	blt.n	8002772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <__NVIC_SetPriority+0x4c>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	440b      	add	r3, r1
 800276c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002770:	e00a      	b.n	8002788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <__NVIC_SetPriority+0x50>)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3b04      	subs	r3, #4
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	440b      	add	r3, r1
 8002786:	761a      	strb	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000e100 	.word	0xe000e100
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f1c3 0307 	rsb	r3, r3, #7
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	bf28      	it	cs
 80027ba:	2304      	movcs	r3, #4
 80027bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d902      	bls.n	80027cc <NVIC_EncodePriority+0x30>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3b03      	subs	r3, #3
 80027ca:	e000      	b.n	80027ce <NVIC_EncodePriority+0x32>
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	4313      	orrs	r3, r2
         );
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002814:	d301      	bcc.n	800281a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002816:	2301      	movs	r3, #1
 8002818:	e00f      	b.n	800283a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <SysTick_Config+0x40>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002822:	210f      	movs	r1, #15
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f7ff ff8e 	bl	8002748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <SysTick_Config+0x40>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <SysTick_Config+0x40>)
 8002834:	2207      	movs	r2, #7
 8002836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	e000e010 	.word	0xe000e010

08002848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff29 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002870:	f7ff ff3e 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 8002874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	6978      	ldr	r0, [r7, #20]
 800287c:	f7ff ff8e 	bl	800279c <NVIC_EncodePriority>
 8002880:	4602      	mov	r2, r0
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff5d 	bl	8002748 <__NVIC_SetPriority>
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff31 	bl	800270c <__NVIC_EnableIRQ>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ffa2 	bl	8002804 <SysTick_Config>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e037      	b.n	8002950 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f97e 	bl	8002c34 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}  
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_DMA_Start_IT+0x20>
 8002974:	2302      	movs	r3, #2
 8002976:	e04a      	b.n	8002a0e <HAL_DMA_Start_IT+0xb6>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002986:	2b01      	cmp	r3, #1
 8002988:	d13a      	bne.n	8002a00 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f912 	bl	8002bd8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 020e 	orr.w	r2, r2, #14
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e00f      	b.n	80029ee <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 020a 	orr.w	r2, r2, #10
 80029dc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0204 	bic.w	r2, r2, #4
 80029ec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e005      	b.n	8002a0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d005      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	e027      	b.n	8002a88 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020e 	bic.w	r2, r2, #14
 8002a46:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
    } 
  }
  return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	2204      	movs	r2, #4
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d024      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x72>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01f      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0204 	bic.w	r2, r2, #4
 8002ae0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	2104      	movs	r1, #4
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d06a      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b02:	e065      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2202      	movs	r2, #2
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d02c      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xdc>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d027      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 020a 	bic.w	r2, r2, #10
 8002b3a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d035      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002b6c:	e030      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2208      	movs	r2, #8
 8002b74:	409a      	lsls	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d028      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x13e>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d023      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 020e 	bic.w	r2, r2, #14
 8002b96:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
    }
  }
}  
 8002bce:	e7ff      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x13e>
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	d108      	bne.n	8002c18 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c16:	e007      	b.n	8002c28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	60da      	str	r2, [r3, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <DMA_CalcBaseAndBitshift+0x34>)
 8002c44:	4413      	add	r3, r2
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <DMA_CalcBaseAndBitshift+0x38>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	009a      	lsls	r2, r3, #2
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <DMA_CalcBaseAndBitshift+0x3c>)
 8002c58:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	bffdfff8 	.word	0xbffdfff8
 8002c6c:	cccccccd 	.word	0xcccccccd
 8002c70:	40020000 	.word	0x40020000

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c82:	e14e      	b.n	8002f22 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8140 	beq.w	8002f1c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d005      	beq.n	8002cb4 <HAL_GPIO_Init+0x40>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d130      	bne.n	8002d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cea:	2201      	movs	r2, #1
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f003 0201 	and.w	r2, r3, #1
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d017      	beq.n	8002d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d123      	bne.n	8002da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	08da      	lsrs	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3208      	adds	r2, #8
 8002d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	08da      	lsrs	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3208      	adds	r2, #8
 8002da0:	6939      	ldr	r1, [r7, #16]
 8002da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0203 	and.w	r2, r3, #3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 809a 	beq.w	8002f1c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de8:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <HAL_GPIO_Init+0x2cc>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4a54      	ldr	r2, [pc, #336]	; (8002f40 <HAL_GPIO_Init+0x2cc>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6193      	str	r3, [r2, #24]
 8002df4:	4b52      	ldr	r3, [pc, #328]	; (8002f40 <HAL_GPIO_Init+0x2cc>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e00:	4a50      	ldr	r2, [pc, #320]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e2a:	d013      	beq.n	8002e54 <HAL_GPIO_Init+0x1e0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a46      	ldr	r2, [pc, #280]	; (8002f48 <HAL_GPIO_Init+0x2d4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00d      	beq.n	8002e50 <HAL_GPIO_Init+0x1dc>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a45      	ldr	r2, [pc, #276]	; (8002f4c <HAL_GPIO_Init+0x2d8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <HAL_GPIO_Init+0x1d8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a44      	ldr	r2, [pc, #272]	; (8002f50 <HAL_GPIO_Init+0x2dc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_GPIO_Init+0x1d4>
 8002e44:	2303      	movs	r3, #3
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x1e2>
 8002e48:	2305      	movs	r3, #5
 8002e4a:	e004      	b.n	8002e56 <HAL_GPIO_Init+0x1e2>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x1e2>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_GPIO_Init+0x1e2>
 8002e54:	2300      	movs	r3, #0
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	f002 0203 	and.w	r2, r2, #3
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e66:	4937      	ldr	r1, [pc, #220]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e74:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e98:	4a2e      	ldr	r2, [pc, #184]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ec2:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002eec:	4a19      	ldr	r2, [pc, #100]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef2:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f16:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f47f aea9 	bne.w	8002c84 <HAL_GPIO_Init+0x10>
  }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40010000 	.word	0x40010000
 8002f48:	48000400 	.word	0x48000400
 8002f4c:	48000800 	.word	0x48000800
 8002f50:	48000c00 	.word	0x48000c00
 8002f54:	40010400 	.word	0x40010400

08002f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	887b      	ldrh	r3, [r7, #2]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e001      	b.n	8002f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
 8002f94:	4613      	mov	r3, r2
 8002f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f98:	787b      	ldrb	r3, [r7, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fa4:	e002      	b.n	8002fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fb84 	bl	80016e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e081      	b.n	80030fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe ff3e 	bl	8001e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003038:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003048:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	e006      	b.n	8003070 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800306e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d104      	bne.n	8003082 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69d9      	ldr	r1, [r3, #28]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	461a      	mov	r2, r3
 8003114:	460b      	mov	r3, r1
 8003116:	817b      	strh	r3, [r7, #10]
 8003118:	4613      	mov	r3, r2
 800311a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b20      	cmp	r3, #32
 8003126:	f040 80da 	bne.w	80032de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_I2C_Master_Transmit+0x30>
 8003134:	2302      	movs	r3, #2
 8003136:	e0d3      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1d8>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003140:	f7ff fa82 	bl	8002648 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2319      	movs	r3, #25
 800314c:	2201      	movs	r2, #1
 800314e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8f0 	bl	8003338 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0be      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2221      	movs	r2, #33	; 0x21
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2210      	movs	r2, #16
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	893a      	ldrh	r2, [r7, #8]
 8003182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	2bff      	cmp	r3, #255	; 0xff
 8003192:	d90e      	bls.n	80031b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	8979      	ldrh	r1, [r7, #10]
 80031a2:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fa7e 	bl	80036ac <I2C_TransferConfig>
 80031b0:	e06c      	b.n	800328c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	8979      	ldrh	r1, [r7, #10]
 80031c4:	4b48      	ldr	r3, [pc, #288]	; (80032e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 fa6d 	bl	80036ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031d2:	e05b      	b.n	800328c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	6a39      	ldr	r1, [r7, #32]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f8fc 	bl	80033d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e07b      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d034      	beq.n	800328c <HAL_I2C_Master_Transmit+0x184>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	2b00      	cmp	r3, #0
 8003228:	d130      	bne.n	800328c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	2200      	movs	r2, #0
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f87f 	bl	8003338 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e04d      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	2bff      	cmp	r3, #255	; 0xff
 800324c:	d90e      	bls.n	800326c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	22ff      	movs	r2, #255	; 0xff
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	8979      	ldrh	r1, [r7, #10]
 800325c:	2300      	movs	r3, #0
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fa21 	bl	80036ac <I2C_TransferConfig>
 800326a:	e00f      	b.n	800328c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	b2da      	uxtb	r2, r3
 800327c:	8979      	ldrh	r1, [r7, #10]
 800327e:	2300      	movs	r3, #0
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fa10 	bl	80036ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d19e      	bne.n	80031d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	6a39      	ldr	r1, [r7, #32]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f8e2 	bl	8003464 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e01a      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2220      	movs	r2, #32
 80032b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_I2C_Master_Transmit+0x1e4>)
 80032be:	400b      	ands	r3, r1
 80032c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e000      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
  }
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	80002000 	.word	0x80002000
 80032ec:	fe00e800 	.word	0xfe00e800

080032f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d103      	bne.n	800330e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d007      	beq.n	800332c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	619a      	str	r2, [r3, #24]
  }
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003348:	e031      	b.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d02d      	beq.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003352:	f7ff f979 	bl	8002648 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d122      	bne.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	429a      	cmp	r2, r3
 8003384:	d113      	bne.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e00f      	b.n	80033ce <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d0be      	beq.n	800334a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033e2:	e033      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f87f 	bl	80034ec <I2C_IsErrorOccurred>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e031      	b.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d025      	beq.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003400:	f7ff f922 	bl	8002648 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11a      	bne.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d013      	beq.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e007      	b.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d1c4      	bne.n	80033e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003470:	e02f      	b.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f838 	bl	80034ec <I2C_IsErrorOccurred>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e02d      	b.n	80034e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7ff f8df 	bl	8002648 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d11a      	bne.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d013      	beq.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e007      	b.n	80034e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d1c8      	bne.n	8003472 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	d068      	beq.n	80035ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2210      	movs	r2, #16
 800351e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003520:	e049      	b.n	80035b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d045      	beq.n	80035b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7ff f88d 	bl	8002648 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_IsErrorOccurred+0x54>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d13a      	bne.n	80035b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003552:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003562:	d121      	bne.n	80035a8 <I2C_IsErrorOccurred+0xbc>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356a:	d01d      	beq.n	80035a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	2b20      	cmp	r3, #32
 8003570:	d01a      	beq.n	80035a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003580:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003582:	f7ff f861 	bl	8002648 <HAL_GetTick>
 8003586:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003588:	e00e      	b.n	80035a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800358a:	f7ff f85d 	bl	8002648 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b19      	cmp	r3, #25
 8003596:	d907      	bls.n	80035a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	f043 0320 	orr.w	r3, r3, #32
 800359e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80035a6:	e006      	b.n	80035b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d1e9      	bne.n	800358a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d003      	beq.n	80035cc <I2C_IsErrorOccurred+0xe0>
 80035c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0aa      	beq.n	8003522 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d103      	bne.n	80035dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2220      	movs	r2, #32
 80035da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800360c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800362e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003650:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01c      	beq.n	800369a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7ff fe45 	bl	80032f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <I2C_IsErrorOccurred+0x1bc>)
 8003672:	400b      	ands	r3, r1
 8003674:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800369a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3728      	adds	r7, #40	; 0x28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	fe00e800 	.word	0xfe00e800

080036ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	460b      	mov	r3, r1
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	4613      	mov	r3, r2
 80036bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036be:	897b      	ldrh	r3, [r7, #10]
 80036c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036c4:	7a7b      	ldrb	r3, [r7, #9]
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	0d5b      	lsrs	r3, r3, #21
 80036e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <I2C_TransferConfig+0x60>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	43db      	mvns	r3, r3
 80036f0:	ea02 0103 	and.w	r1, r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	03ff63ff 	.word	0x03ff63ff

08003710 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b20      	cmp	r3, #32
 8003724:	d138      	bne.n	8003798 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003730:	2302      	movs	r3, #2
 8003732:	e032      	b.n	800379a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003762:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6819      	ldr	r1, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d139      	bne.n	8003830 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e033      	b.n	8003832 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2224      	movs	r2, #36	; 0x24
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003846:	af00      	add	r7, sp, #0
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003850:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f001 b823 	b.w	80048ac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 817d 	beq.w	8003b76 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800387c:	4bbc      	ldr	r3, [pc, #752]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b04      	cmp	r3, #4
 8003886:	d00c      	beq.n	80038a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003888:	4bb9      	ldr	r3, [pc, #740]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d15c      	bne.n	800394e <HAL_RCC_OscConfig+0x10e>
 8003894:	4bb6      	ldr	r3, [pc, #728]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a0:	d155      	bne.n	800394e <HAL_RCC_OscConfig+0x10e>
 80038a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038a6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <HAL_RCC_OscConfig+0x94>
 80038ce:	4ba8      	ldr	r3, [pc, #672]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	e015      	b.n	8003900 <HAL_RCC_OscConfig+0xc0>
 80038d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80038e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80038f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80038fc:	4b9c      	ldr	r3, [pc, #624]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003904:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003908:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800390c:	fa92 f2a2 	rbit	r2, r2
 8003910:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003914:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003918:	fab2 f282 	clz	r2, r2
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f042 0220 	orr.w	r2, r2, #32
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f002 021f 	and.w	r2, r2, #31
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 811f 	beq.w	8003b74 <HAL_RCC_OscConfig+0x334>
 8003936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 8116 	bne.w	8003b74 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f000 bfaf 	b.w	80048ac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x12e>
 8003960:	4b83      	ldr	r3, [pc, #524]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a82      	ldr	r2, [pc, #520]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	e036      	b.n	80039dc <HAL_RCC_OscConfig+0x19c>
 800396e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x158>
 800397e:	4b7c      	ldr	r3, [pc, #496]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7b      	ldr	r2, [pc, #492]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b79      	ldr	r3, [pc, #484]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a78      	ldr	r2, [pc, #480]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e021      	b.n	80039dc <HAL_RCC_OscConfig+0x19c>
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x184>
 80039aa:	4b71      	ldr	r3, [pc, #452]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a70      	ldr	r2, [pc, #448]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b6e      	ldr	r3, [pc, #440]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6d      	ldr	r2, [pc, #436]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0x19c>
 80039c4:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a69      	ldr	r2, [pc, #420]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b67      	ldr	r3, [pc, #412]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a66      	ldr	r2, [pc, #408]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039dc:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f023 020f 	bic.w	r2, r3, #15
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	495f      	ldr	r1, [pc, #380]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d059      	beq.n	8003aba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fe fe1f 	bl	8002648 <HAL_GetTick>
 8003a0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fe fe1a 	bl	8002648 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b64      	cmp	r3, #100	; 0x64
 8003a1e:	d902      	bls.n	8003a26 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	f000 bf43 	b.w	80048ac <HAL_RCC_OscConfig+0x106c>
 8003a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003a3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_RCC_OscConfig+0x218>
 8003a52:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	e015      	b.n	8003a84 <HAL_RCC_OscConfig+0x244>
 8003a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a5c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003a64:	fa93 f3a3 	rbit	r3, r3
 8003a68:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a70:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003a74:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a80:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a88:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003a8c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003a90:	fa92 f2a2 	rbit	r2, r2
 8003a94:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003a98:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003a9c:	fab2 f282 	clz	r2, r2
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	f042 0220 	orr.w	r2, r2, #32
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	f002 021f 	and.w	r2, r2, #31
 8003aac:	2101      	movs	r1, #1
 8003aae:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ab      	beq.n	8003a10 <HAL_RCC_OscConfig+0x1d0>
 8003ab8:	e05d      	b.n	8003b76 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fe fdc5 	bl	8002648 <HAL_GetTick>
 8003abe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fe fdc0 	bl	8002648 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b64      	cmp	r3, #100	; 0x64
 8003ad2:	d902      	bls.n	8003ada <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	f000 bee9 	b.w	80048ac <HAL_RCC_OscConfig+0x106c>
 8003ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ade:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003aee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d102      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2cc>
 8003b06:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	e015      	b.n	8003b38 <HAL_RCC_OscConfig+0x2f8>
 8003b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b10:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b24:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003b28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_RCC_OscConfig+0x330>)
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b3c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003b40:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003b44:	fa92 f2a2 	rbit	r2, r2
 8003b48:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003b4c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003b50:	fab2 f282 	clz	r2, r2
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f042 0220 	orr.w	r2, r2, #32
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f002 021f 	and.w	r2, r2, #31
 8003b60:	2101      	movs	r1, #1
 8003b62:	fa01 f202 	lsl.w	r2, r1, r2
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ab      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x284>
 8003b6c:	e003      	b.n	8003b76 <HAL_RCC_OscConfig+0x336>
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 817d 	beq.w	8003e86 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b8c:	4ba6      	ldr	r3, [pc, #664]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00b      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b98:	4ba3      	ldr	r3, [pc, #652]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d172      	bne.n	8003c8a <HAL_RCC_OscConfig+0x44a>
 8003ba4:	4ba0      	ldr	r3, [pc, #640]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d16c      	bne.n	8003c8a <HAL_RCC_OscConfig+0x44a>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003bc2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_RCC_OscConfig+0x3a0>
 8003bda:	4b93      	ldr	r3, [pc, #588]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e013      	b.n	8003c08 <HAL_RCC_OscConfig+0x3c8>
 8003be0:	2302      	movs	r3, #2
 8003be2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003bf8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003c04:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003c0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c12:	fa92 f2a2 	rbit	r2, r2
 8003c16:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003c1a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003c1e:	fab2 f282 	clz	r2, r2
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	f042 0220 	orr.w	r2, r2, #32
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	f002 021f 	and.w	r2, r2, #31
 8003c2e:	2101      	movs	r1, #1
 8003c30:	fa01 f202 	lsl.w	r2, r1, r2
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCC_OscConfig+0x410>
 8003c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d002      	beq.n	8003c50 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f000 be2e 	b.w	80048ac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b75      	ldr	r3, [pc, #468]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	21f8      	movs	r1, #248	; 0xf8
 8003c66:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003c6e:	fa91 f1a1 	rbit	r1, r1
 8003c72:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003c76:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003c7a:	fab1 f181 	clz	r1, r1
 8003c7e:	b2c9      	uxtb	r1, r1
 8003c80:	408b      	lsls	r3, r1
 8003c82:	4969      	ldr	r1, [pc, #420]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c88:	e0fd      	b.n	8003e86 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8088 	beq.w	8003dac <HAL_RCC_OscConfig+0x56c>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003cae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fcbe 	bl	8002648 <HAL_GetTick>
 8003ccc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fcb9 	bl	8002648 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d902      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	f000 bde2 	b.w	80048ac <HAL_RCC_OscConfig+0x106c>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003cfa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4d8>
 8003d12:	4b45      	ldr	r3, [pc, #276]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	e013      	b.n	8003d40 <HAL_RCC_OscConfig+0x500>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003d34:	fa93 f3a3 	rbit	r3, r3
 8003d38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003d3c:	4b3a      	ldr	r3, [pc, #232]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	2202      	movs	r2, #2
 8003d42:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003d46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003d4a:	fa92 f2a2 	rbit	r2, r2
 8003d4e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003d52:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d56:	fab2 f282 	clz	r2, r2
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	f042 0220 	orr.w	r2, r2, #32
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	f002 021f 	and.w	r2, r2, #31
 8003d66:	2101      	movs	r1, #1
 8003d68:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0af      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d72:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	21f8      	movs	r1, #248	; 0xf8
 8003d88:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003d90:	fa91 f1a1 	rbit	r1, r1
 8003d94:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003d98:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003d9c:	fab1 f181 	clz	r1, r1
 8003da0:	b2c9      	uxtb	r1, r1
 8003da2:	408b      	lsls	r3, r1
 8003da4:	4920      	ldr	r1, [pc, #128]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	e06c      	b.n	8003e86 <HAL_RCC_OscConfig+0x646>
 8003dac:	2301      	movs	r3, #1
 8003dae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003dbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fc36 	bl	8002648 <HAL_GetTick>
 8003ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fe fc31 	bl	8002648 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d902      	bls.n	8003df8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	f000 bd5a 	b.w	80048ac <HAL_RCC_OscConfig+0x106c>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d104      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5ec>
 8003e22:	4b01      	ldr	r3, [pc, #4]	; (8003e28 <HAL_RCC_OscConfig+0x5e8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	e015      	b.n	8003e54 <HAL_RCC_OscConfig+0x614>
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e3e:	2302      	movs	r3, #2
 8003e40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003e50:	4bc8      	ldr	r3, [pc, #800]	; (8004174 <HAL_RCC_OscConfig+0x934>)
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	2202      	movs	r2, #2
 8003e56:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003e5a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003e5e:	fa92 f2a2 	rbit	r2, r2
 8003e62:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003e66:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003e6a:	fab2 f282 	clz	r2, r2
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	f042 0220 	orr.w	r2, r2, #32
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	f002 021f 	and.w	r2, r2, #31
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1ad      	bne.n	8003de2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8110 	beq.w	80040bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d079      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x760>
 8003eac:	2301      	movs	r3, #1
 8003eae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4bab      	ldr	r3, [pc, #684]	; (8004178 <HAL_RCC_OscConfig+0x938>)
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fbb7 	bl	8002648 <HAL_GetTick>
 8003eda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee0:	f7fe fbb2 	bl	8002648 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d902      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	f000 bcdb 	b.w	80048ac <HAL_RCC_OscConfig+0x106c>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f10:	2202      	movs	r2, #2
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f34:	2202      	movs	r2, #2
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	fa93 f2a3 	rbit	r2, r3
 8003f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f4e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f50:	4b88      	ldr	r3, [pc, #544]	; (8004174 <HAL_RCC_OscConfig+0x934>)
 8003f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	6019      	str	r1, [r3, #0]
 8003f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	fa93 f1a3 	rbit	r1, r3
 8003f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f76:	6019      	str	r1, [r3, #0]
  return result;
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fab3 f383 	clz	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0a0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x6a0>
 8003f9e:	e08d      	b.n	80040bc <HAL_RCC_OscConfig+0x87c>
 8003fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	fa93 f2a3 	rbit	r2, r3
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003fc2:	601a      	str	r2, [r3, #0]
  return result;
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003fcc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4b68      	ldr	r3, [pc, #416]	; (8004178 <HAL_RCC_OscConfig+0x938>)
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe2:	f7fe fb31 	bl	8002648 <HAL_GetTick>
 8003fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fec:	f7fe fb2c 	bl	8002648 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d902      	bls.n	8004002 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	f000 bc55 	b.w	80048ac <HAL_RCC_OscConfig+0x106c>
 8004002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004006:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800400a:	2202      	movs	r2, #2
 800400c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	fa93 f2a3 	rbit	r2, r3
 800401c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004020:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800402e:	2202      	movs	r2, #2
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004036:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	fa93 f2a3 	rbit	r2, r3
 8004040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004052:	2202      	movs	r2, #2
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	fa93 f2a3 	rbit	r2, r3
 8004064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004068:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800406c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406e:	4b41      	ldr	r3, [pc, #260]	; (8004174 <HAL_RCC_OscConfig+0x934>)
 8004070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004076:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800407a:	2102      	movs	r1, #2
 800407c:	6019      	str	r1, [r3, #0]
 800407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004082:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	fa93 f1a3 	rbit	r1, r3
 800408c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004090:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004094:	6019      	str	r1, [r3, #0]
  return result;
 8004096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2101      	movs	r1, #1
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d197      	bne.n	8003fec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 81a1 	beq.w	8004414 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d2:	2300      	movs	r3, #0
 80040d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d8:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCC_OscConfig+0x934>)
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d116      	bne.n	8004112 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b23      	ldr	r3, [pc, #140]	; (8004174 <HAL_RCC_OscConfig+0x934>)
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	4a22      	ldr	r2, [pc, #136]	; (8004174 <HAL_RCC_OscConfig+0x934>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	61d3      	str	r3, [r2, #28]
 80040f0:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_RCC_OscConfig+0x934>)
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80040f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004106:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800410a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <HAL_RCC_OscConfig+0x93c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d11a      	bne.n	8004154 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_RCC_OscConfig+0x93c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a16      	ldr	r2, [pc, #88]	; (800417c <HAL_RCC_OscConfig+0x93c>)
 8004124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004128:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412a:	f7fe fa8d 	bl	8002648 <HAL_GetTick>
 800412e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	e009      	b.n	8004148 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fe fa88 	bl	8002648 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b64      	cmp	r3, #100	; 0x64
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e3b1      	b.n	80048ac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <HAL_RCC_OscConfig+0x93c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ef      	beq.n	8004134 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10d      	bne.n	8004180 <HAL_RCC_OscConfig+0x940>
 8004164:	4b03      	ldr	r3, [pc, #12]	; (8004174 <HAL_RCC_OscConfig+0x934>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4a02      	ldr	r2, [pc, #8]	; (8004174 <HAL_RCC_OscConfig+0x934>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6213      	str	r3, [r2, #32]
 8004170:	e03c      	b.n	80041ec <HAL_RCC_OscConfig+0x9ac>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	10908120 	.word	0x10908120
 800417c:	40007000 	.word	0x40007000
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10c      	bne.n	80041aa <HAL_RCC_OscConfig+0x96a>
 8004190:	4bc1      	ldr	r3, [pc, #772]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	4ac0      	ldr	r2, [pc, #768]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	6213      	str	r3, [r2, #32]
 800419c:	4bbe      	ldr	r3, [pc, #760]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4abd      	ldr	r2, [pc, #756]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80041a2:	f023 0304 	bic.w	r3, r3, #4
 80041a6:	6213      	str	r3, [r2, #32]
 80041a8:	e020      	b.n	80041ec <HAL_RCC_OscConfig+0x9ac>
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x994>
 80041ba:	4bb7      	ldr	r3, [pc, #732]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4ab6      	ldr	r2, [pc, #728]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	6213      	str	r3, [r2, #32]
 80041c6:	4bb4      	ldr	r3, [pc, #720]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4ab3      	ldr	r2, [pc, #716]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6213      	str	r3, [r2, #32]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0x9ac>
 80041d4:	4bb0      	ldr	r3, [pc, #704]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4aaf      	ldr	r2, [pc, #700]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	6213      	str	r3, [r2, #32]
 80041e0:	4bad      	ldr	r3, [pc, #692]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	4aac      	ldr	r2, [pc, #688]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80041e6:	f023 0304 	bic.w	r3, r3, #4
 80041ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8081 	beq.w	8004300 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fe:	f7fe fa23 	bl	8002648 <HAL_GetTick>
 8004202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004206:	e00b      	b.n	8004220 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004208:	f7fe fa1e 	bl	8002648 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	; 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e345      	b.n	80048ac <HAL_RCC_OscConfig+0x106c>
 8004220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004224:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004228:	2202      	movs	r2, #2
 800422a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004230:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	fa93 f2a3 	rbit	r2, r3
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004248:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800424c:	2202      	movs	r2, #2
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004254:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	fa93 f2a3 	rbit	r2, r3
 800425e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004262:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004266:	601a      	str	r2, [r3, #0]
  return result;
 8004268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004270:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f043 0302 	orr.w	r3, r3, #2
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d102      	bne.n	800428c <HAL_RCC_OscConfig+0xa4c>
 8004286:	4b84      	ldr	r3, [pc, #528]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	e013      	b.n	80042b4 <HAL_RCC_OscConfig+0xa74>
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004294:	2202      	movs	r2, #2
 8004296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fa93 f2a3 	rbit	r2, r3
 80042a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	4b79      	ldr	r3, [pc, #484]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80042bc:	2102      	movs	r1, #2
 80042be:	6011      	str	r1, [r2, #0]
 80042c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	fa92 f1a2 	rbit	r1, r2
 80042ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80042d6:	6011      	str	r1, [r2, #0]
  return result;
 80042d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	fab2 f282 	clz	r2, r2
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	f002 021f 	and.w	r2, r2, #31
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d084      	beq.n	8004208 <HAL_RCC_OscConfig+0x9c8>
 80042fe:	e07f      	b.n	8004400 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004300:	f7fe f9a2 	bl	8002648 <HAL_GetTick>
 8004304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004308:	e00b      	b.n	8004322 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fe f99d 	bl	8002648 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e2c4      	b.n	80048ac <HAL_RCC_OscConfig+0x106c>
 8004322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004326:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800432a:	2202      	movs	r2, #2
 800432c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004332:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	fa93 f2a3 	rbit	r2, r3
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800434e:	2202      	movs	r2, #2
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004356:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	fa93 f2a3 	rbit	r2, r3
 8004360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004364:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004368:	601a      	str	r2, [r3, #0]
  return result;
 800436a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004372:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f043 0302 	orr.w	r3, r3, #2
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d102      	bne.n	800438e <HAL_RCC_OscConfig+0xb4e>
 8004388:	4b43      	ldr	r3, [pc, #268]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	e013      	b.n	80043b6 <HAL_RCC_OscConfig+0xb76>
 800438e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004392:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004396:	2202      	movs	r2, #2
 8004398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	fa93 f2a3 	rbit	r2, r3
 80043a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80043be:	2102      	movs	r1, #2
 80043c0:	6011      	str	r1, [r2, #0]
 80043c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	fa92 f1a2 	rbit	r1, r2
 80043d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80043d8:	6011      	str	r1, [r2, #0]
  return result;
 80043da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	fab2 f282 	clz	r2, r2
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	f002 021f 	and.w	r2, r2, #31
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f202 	lsl.w	r2, r1, r2
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d184      	bne.n	800430a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004400:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4a22      	ldr	r2, [pc, #136]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004412:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8242 	beq.w	80048aa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <HAL_RCC_OscConfig+0xc58>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b08      	cmp	r3, #8
 8004430:	f000 8213 	beq.w	800485a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	2b02      	cmp	r3, #2
 8004442:	f040 8162 	bne.w	800470a <HAL_RCC_OscConfig+0xeca>
 8004446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800444e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004458:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	fa93 f2a3 	rbit	r2, r3
 8004462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004466:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800446a:	601a      	str	r2, [r3, #0]
  return result;
 800446c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004470:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004474:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004480:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	461a      	mov	r2, r3
 8004488:	2300      	movs	r3, #0
 800448a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fe f8dc 	bl	8002648 <HAL_GetTick>
 8004490:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004494:	e00c      	b.n	80044b0 <HAL_RCC_OscConfig+0xc70>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449c:	f7fe f8d4 	bl	8002648 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1fd      	b.n	80048ac <HAL_RCC_OscConfig+0x106c>
 80044b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80044b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	fa93 f2a3 	rbit	r2, r3
 80044cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044d4:	601a      	str	r2, [r3, #0]
  return result;
 80044d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e0:	fab3 f383 	clz	r3, r3
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d102      	bne.n	80044fa <HAL_RCC_OscConfig+0xcba>
 80044f4:	4bb0      	ldr	r3, [pc, #704]	; (80047b8 <HAL_RCC_OscConfig+0xf78>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	e027      	b.n	800454a <HAL_RCC_OscConfig+0xd0a>
 80044fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800450c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	fa93 f2a3 	rbit	r2, r3
 8004516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800451a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004524:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004532:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	fa93 f2a3 	rbit	r2, r3
 800453c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004540:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	4b9c      	ldr	r3, [pc, #624]	; (80047b8 <HAL_RCC_OscConfig+0xf78>)
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800454e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004552:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004556:	6011      	str	r1, [r2, #0]
 8004558:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800455c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	fa92 f1a2 	rbit	r1, r2
 8004566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800456a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800456e:	6011      	str	r1, [r2, #0]
  return result;
 8004570:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004574:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	fab2 f282 	clz	r2, r2
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	f042 0220 	orr.w	r2, r2, #32
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	f002 021f 	and.w	r2, r2, #31
 800458a:	2101      	movs	r1, #1
 800458c:	fa01 f202 	lsl.w	r2, r1, r2
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d182      	bne.n	800449c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004596:	4b88      	ldr	r3, [pc, #544]	; (80047b8 <HAL_RCC_OscConfig+0xf78>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800459e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	430b      	orrs	r3, r1
 80045b8:	497f      	ldr	r1, [pc, #508]	; (80047b8 <HAL_RCC_OscConfig+0xf78>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
 80045be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80045c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	fa93 f2a3 	rbit	r2, r3
 80045da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045de:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80045e2:	601a      	str	r2, [r3, #0]
  return result;
 80045e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80045ec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	461a      	mov	r2, r3
 8004600:	2301      	movs	r3, #1
 8004602:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fe f820 	bl	8002648 <HAL_GetTick>
 8004608:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800460c:	e009      	b.n	8004622 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460e:	f7fe f81b 	bl	8002648 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e144      	b.n	80048ac <HAL_RCC_OscConfig+0x106c>
 8004622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004626:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800462a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800462e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004634:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004642:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004646:	601a      	str	r2, [r3, #0]
  return result;
 8004648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004650:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004652:	fab3 f383 	clz	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d102      	bne.n	800466c <HAL_RCC_OscConfig+0xe2c>
 8004666:	4b54      	ldr	r3, [pc, #336]	; (80047b8 <HAL_RCC_OscConfig+0xf78>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	e027      	b.n	80046bc <HAL_RCC_OscConfig+0xe7c>
 800466c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004670:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	fa93 f2a3 	rbit	r2, r3
 8004688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800469a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	fa93 f2a3 	rbit	r2, r3
 80046ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCC_OscConfig+0xf78>)
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046c0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80046c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046c8:	6011      	str	r1, [r2, #0]
 80046ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046ce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	fa92 f1a2 	rbit	r1, r2
 80046d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046dc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80046e0:	6011      	str	r1, [r2, #0]
  return result;
 80046e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046e6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	fab2 f282 	clz	r2, r2
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	f042 0220 	orr.w	r2, r2, #32
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	f002 021f 	and.w	r2, r2, #31
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d082      	beq.n	800460e <HAL_RCC_OscConfig+0xdce>
 8004708:	e0cf      	b.n	80048aa <HAL_RCC_OscConfig+0x106a>
 800470a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004712:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	fa93 f2a3 	rbit	r2, r3
 8004726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800472e:	601a      	str	r2, [r3, #0]
  return result;
 8004730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004734:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004738:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004744:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	461a      	mov	r2, r3
 800474c:	2300      	movs	r3, #0
 800474e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fd ff7a 	bl	8002648 <HAL_GetTick>
 8004754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004758:	e009      	b.n	800476e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475a:	f7fd ff75 	bl	8002648 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e09e      	b.n	80048ac <HAL_RCC_OscConfig+0x106c>
 800476e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004772:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800477a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004780:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	fa93 f2a3 	rbit	r2, r3
 800478a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004792:	601a      	str	r2, [r3, #0]
  return result;
 8004794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004798:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800479c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d104      	bne.n	80047bc <HAL_RCC_OscConfig+0xf7c>
 80047b2:	4b01      	ldr	r3, [pc, #4]	; (80047b8 <HAL_RCC_OscConfig+0xf78>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	e029      	b.n	800480c <HAL_RCC_OscConfig+0xfcc>
 80047b8:	40021000 	.word	0x40021000
 80047bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80047c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	fa93 f2a3 	rbit	r2, r3
 80047d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80047ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	fa93 f2a3 	rbit	r2, r3
 80047fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004802:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_OscConfig+0x1078>)
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004810:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004814:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004818:	6011      	str	r1, [r2, #0]
 800481a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800481e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	fa92 f1a2 	rbit	r1, r2
 8004828:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800482c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004830:	6011      	str	r1, [r2, #0]
  return result;
 8004832:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004836:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	fab2 f282 	clz	r2, r2
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	f042 0220 	orr.w	r2, r2, #32
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	f002 021f 	and.w	r2, r2, #31
 800484c:	2101      	movs	r1, #1
 800484e:	fa01 f202 	lsl.w	r2, r1, r2
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d180      	bne.n	800475a <HAL_RCC_OscConfig+0xf1a>
 8004858:	e027      	b.n	80048aa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e01e      	b.n	80048ac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_RCC_OscConfig+0x1078>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004876:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800487a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800487e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	429a      	cmp	r2, r3
 800488c:	d10b      	bne.n	80048a6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800488e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004892:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d001      	beq.n	80048aa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b09e      	sub	sp, #120	; 0x78
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e162      	b.n	8004b9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d4:	4b90      	ldr	r3, [pc, #576]	; (8004b18 <HAL_RCC_ClockConfig+0x25c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d910      	bls.n	8004904 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b8d      	ldr	r3, [pc, #564]	; (8004b18 <HAL_RCC_ClockConfig+0x25c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 0207 	bic.w	r2, r3, #7
 80048ea:	498b      	ldr	r1, [pc, #556]	; (8004b18 <HAL_RCC_ClockConfig+0x25c>)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f2:	4b89      	ldr	r3, [pc, #548]	; (8004b18 <HAL_RCC_ClockConfig+0x25c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e14a      	b.n	8004b9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b82      	ldr	r3, [pc, #520]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	497f      	ldr	r1, [pc, #508]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 80dc 	beq.w	8004ae8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d13c      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xf6>
 8004938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800493c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	b2db      	uxtb	r3, r3
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d102      	bne.n	8004962 <HAL_RCC_ClockConfig+0xa6>
 800495c:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	e00f      	b.n	8004982 <HAL_RCC_ClockConfig+0xc6>
 8004962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004966:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	667b      	str	r3, [r7, #100]	; 0x64
 8004970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004974:	663b      	str	r3, [r7, #96]	; 0x60
 8004976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800497e:	4b67      	ldr	r3, [pc, #412]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004986:	65ba      	str	r2, [r7, #88]	; 0x58
 8004988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800498a:	fa92 f2a2 	rbit	r2, r2
 800498e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004990:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004992:	fab2 f282 	clz	r2, r2
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	f042 0220 	orr.w	r2, r2, #32
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	f002 021f 	and.w	r2, r2, #31
 80049a2:	2101      	movs	r1, #1
 80049a4:	fa01 f202 	lsl.w	r2, r1, r2
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d17b      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e0f3      	b.n	8004b9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d13c      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x178>
 80049ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c2:	fa93 f3a3 	rbit	r3, r3
 80049c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80049c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d102      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x128>
 80049de:	4b4f      	ldr	r3, [pc, #316]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	e00f      	b.n	8004a04 <HAL_RCC_ClockConfig+0x148>
 80049e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
 80049f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f6:	643b      	str	r3, [r7, #64]	; 0x40
 80049f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a00:	4b46      	ldr	r3, [pc, #280]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a08:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a0c:	fa92 f2a2 	rbit	r2, r2
 8004a10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a14:	fab2 f282 	clz	r2, r2
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	f042 0220 	orr.w	r2, r2, #32
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	f002 021f 	and.w	r2, r2, #31
 8004a24:	2101      	movs	r1, #1
 8004a26:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d13a      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0b2      	b.n	8004b9a <HAL_RCC_ClockConfig+0x2de>
 8004a34:	2302      	movs	r3, #2
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	fa93 f3a3 	rbit	r3, r3
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d102      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x1a0>
 8004a56:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	e00d      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1bc>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	fa93 f3a3 	rbit	r3, r3
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
 8004a68:	2302      	movs	r3, #2
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	4b29      	ldr	r3, [pc, #164]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2202      	movs	r2, #2
 8004a7a:	61ba      	str	r2, [r7, #24]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	fa92 f2a2 	rbit	r2, r2
 8004a82:	617a      	str	r2, [r7, #20]
  return result;
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	fab2 f282 	clz	r2, r2
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	f042 0220 	orr.w	r2, r2, #32
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	f002 021f 	and.w	r2, r2, #31
 8004a96:	2101      	movs	r1, #1
 8004a98:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e079      	b.n	8004b9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	491a      	ldr	r1, [pc, #104]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fdc6 	bl	8002648 <HAL_GetTick>
 8004abc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fd fdc2 	bl	8002648 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e061      	b.n	8004b9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <HAL_RCC_ClockConfig+0x260>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_ClockConfig+0x25c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d214      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <HAL_RCC_ClockConfig+0x25c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 0207 	bic.w	r2, r3, #7
 8004afe:	4906      	ldr	r1, [pc, #24]	; (8004b18 <HAL_RCC_ClockConfig+0x25c>)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <HAL_RCC_ClockConfig+0x25c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e040      	b.n	8004b9a <HAL_RCC_ClockConfig+0x2de>
 8004b18:	40022000 	.word	0x40022000
 8004b1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	491a      	ldr	r1, [pc, #104]	; (8004ba4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b4a:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4912      	ldr	r1, [pc, #72]	; (8004ba4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b5e:	f000 f829 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b62:	4601      	mov	r1, r0
 8004b64:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6c:	22f0      	movs	r2, #240	; 0xf0
 8004b6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	fa92 f2a2 	rbit	r2, r2
 8004b76:	60fa      	str	r2, [r7, #12]
  return result;
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	fab2 f282 	clz	r2, r2
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	40d3      	lsrs	r3, r2
 8004b82:	4a09      	ldr	r2, [pc, #36]	; (8004ba8 <HAL_RCC_ClockConfig+0x2ec>)
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
 8004b86:	fa21 f303 	lsr.w	r3, r1, r3
 8004b8a:	4a08      	ldr	r2, [pc, #32]	; (8004bac <HAL_RCC_ClockConfig+0x2f0>)
 8004b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <HAL_RCC_ClockConfig+0x2f4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fd fd14 	bl	80025c0 <HAL_InitTick>
  
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3778      	adds	r7, #120	; 0x78
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	0800dbe8 	.word	0x0800dbe8
 8004bac:	20000014 	.word	0x20000014
 8004bb0:	20000018 	.word	0x20000018

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b08b      	sub	sp, #44	; 0x2c
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004bce:	4b29      	ldr	r3, [pc, #164]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x30>
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d003      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0x36>
 8004be2:	e03c      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004be4:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004be6:	623b      	str	r3, [r7, #32]
      break;
 8004be8:	e03c      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004bf0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004bf4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	fa92 f2a2 	rbit	r2, r2
 8004bfc:	607a      	str	r2, [r7, #4]
  return result;
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	fab2 f282 	clz	r2, r2
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	40d3      	lsrs	r3, r2
 8004c08:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c0a:	5cd3      	ldrb	r3, [r2, r3]
 8004c0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c0e:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	220f      	movs	r2, #15
 8004c18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	fa92 f2a2 	rbit	r2, r2
 8004c20:	60fa      	str	r2, [r7, #12]
  return result;
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	fab2 f282 	clz	r2, r2
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	40d3      	lsrs	r3, r2
 8004c2c:	4a14      	ldr	r2, [pc, #80]	; (8004c80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c2e:	5cd3      	ldrb	r3, [r2, r3]
 8004c30:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4c:	e004      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	623b      	str	r3, [r7, #32]
      break;
 8004c5c:	e002      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c60:	623b      	str	r3, [r7, #32]
      break;
 8004c62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c64:	6a3b      	ldr	r3, [r7, #32]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	372c      	adds	r7, #44	; 0x2c
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40021000 	.word	0x40021000
 8004c78:	007a1200 	.word	0x007a1200
 8004c7c:	0800dc00 	.word	0x0800dc00
 8004c80:	0800dc10 	.word	0x0800dc10
 8004c84:	003d0900 	.word	0x003d0900

08004c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000014 	.word	0x20000014

08004ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004ca6:	f7ff ffef 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004caa:	4601      	mov	r1, r0
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cb4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004cb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	fa92 f2a2 	rbit	r2, r2
 8004cc0:	603a      	str	r2, [r7, #0]
  return result;
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	fab2 f282 	clz	r2, r2
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	40d3      	lsrs	r3, r2
 8004ccc:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004cce:	5cd3      	ldrb	r3, [r2, r3]
 8004cd0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	0800dbf8 	.word	0x0800dbf8

08004ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004cea:	f7ff ffcd 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004cee:	4601      	mov	r1, r0
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004cf8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004cfc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	fa92 f2a2 	rbit	r2, r2
 8004d04:	603a      	str	r2, [r7, #0]
  return result;
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	fab2 f282 	clz	r2, r2
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	40d3      	lsrs	r3, r2
 8004d10:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d12:	5cd3      	ldrb	r3, [r2, r3]
 8004d14:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40021000 	.word	0x40021000
 8004d24:	0800dbf8 	.word	0x0800dbf8

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b092      	sub	sp, #72	; 0x48
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80d4 	beq.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4c:	4b4e      	ldr	r3, [pc, #312]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10e      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d58:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	4a4a      	ldr	r2, [pc, #296]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d62:	61d3      	str	r3, [r2, #28]
 8004d64:	4b48      	ldr	r3, [pc, #288]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d118      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d82:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a41      	ldr	r2, [pc, #260]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8e:	f7fd fc5b 	bl	8002648 <HAL_GetTick>
 8004d92:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	e008      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d96:	f7fd fc57 	bl	8002648 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b64      	cmp	r3, #100	; 0x64
 8004da2:	d901      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e14b      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	4b38      	ldr	r3, [pc, #224]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004db4:	4b34      	ldr	r3, [pc, #208]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8084 	beq.w	8004ece <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d07c      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dd4:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dee:	fab3 f383 	clz	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2301      	movs	r3, #1
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	fa93 f3a3 	rbit	r3, r3
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e12:	fab3 f383 	clz	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	461a      	mov	r2, r3
 8004e22:	2300      	movs	r3, #0
 8004e24:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e26:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d04b      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e36:	f7fd fc07 	bl	8002648 <HAL_GetTick>
 8004e3a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fd fc03 	bl	8002648 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0f5      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004e54:	2302      	movs	r3, #2
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e60:	2302      	movs	r3, #2
 8004e62:	623b      	str	r3, [r7, #32]
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	fa93 f3a3 	rbit	r3, r3
 8004e6a:	61fb      	str	r3, [r7, #28]
  return result;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6e:	fab3 f383 	clz	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d108      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004e82:	4b01      	ldr	r3, [pc, #4]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	e00d      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40007000 	.word	0x40007000
 8004e90:	10908100 	.word	0x10908100
 8004e94:	2302      	movs	r3, #2
 8004e96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	fa93 f3a3 	rbit	r3, r3
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	4b69      	ldr	r3, [pc, #420]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	613a      	str	r2, [r7, #16]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	fa92 f2a2 	rbit	r2, r2
 8004eae:	60fa      	str	r2, [r7, #12]
  return result;
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	fab2 f282 	clz	r2, r2
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	f002 021f 	and.w	r2, r2, #31
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0b7      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ece:	4b5e      	ldr	r3, [pc, #376]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	495b      	ldr	r1, [pc, #364]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ee0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee8:	4b57      	ldr	r3, [pc, #348]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4a56      	ldr	r2, [pc, #344]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f00:	4b51      	ldr	r3, [pc, #324]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	f023 0203 	bic.w	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	494e      	ldr	r1, [pc, #312]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f1e:	4b4a      	ldr	r3, [pc, #296]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f023 0210 	bic.w	r2, r3, #16
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	4947      	ldr	r1, [pc, #284]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004f3c:	4b42      	ldr	r3, [pc, #264]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	493f      	ldr	r1, [pc, #252]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f5a:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f023 0220 	bic.w	r2, r3, #32
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	4938      	ldr	r1, [pc, #224]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f78:	4b33      	ldr	r3, [pc, #204]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	4930      	ldr	r1, [pc, #192]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f96:	4b2c      	ldr	r3, [pc, #176]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	4929      	ldr	r1, [pc, #164]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004fb4:	4b24      	ldr	r3, [pc, #144]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	4921      	ldr	r1, [pc, #132]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004fd2:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	491a      	ldr	r1, [pc, #104]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ff0:	4b15      	ldr	r3, [pc, #84]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	4912      	ldr	r1, [pc, #72]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d008      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800500e:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	490b      	ldr	r1, [pc, #44]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800501c:	4313      	orrs	r3, r2
 800501e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	4903      	ldr	r1, [pc, #12]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800503a:	4313      	orrs	r3, r2
 800503c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3748      	adds	r7, #72	; 0x48
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40021000 	.word	0x40021000

0800504c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e09d      	b.n	800519a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506e:	d009      	beq.n	8005084 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	61da      	str	r2, [r3, #28]
 8005076:	e005      	b.n	8005084 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc ff3a 	bl	8001f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050c4:	d902      	bls.n	80050cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	e002      	b.n	80050d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050da:	d007      	beq.n	80050ec <HAL_SPI_Init+0xa0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e4:	d002      	beq.n	80050ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512e:	ea42 0103 	orr.w	r1, r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	0c1b      	lsrs	r3, r3, #16
 8005148:	f003 0204 	and.w	r2, r3, #4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005168:	ea42 0103 	orr.w	r1, r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b088      	sub	sp, #32
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_SPI_Transmit+0x22>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e15f      	b.n	8005484 <HAL_SPI_Transmit+0x2e2>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051cc:	f7fd fa3c 	bl	8002648 <HAL_GetTick>
 80051d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d002      	beq.n	80051e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
 80051e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051e6:	e148      	b.n	800547a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_Transmit+0x52>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051f8:	e13f      	b.n	800547a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2203      	movs	r2, #3
 80051fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005244:	d10f      	bne.n	8005266 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d007      	beq.n	8005284 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800528c:	d94f      	bls.n	800532e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_SPI_Transmit+0xfa>
 8005296:	8afb      	ldrh	r3, [r7, #22]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d142      	bne.n	8005322 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	881a      	ldrh	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	1c9a      	adds	r2, r3, #2
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052c0:	e02f      	b.n	8005322 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d112      	bne.n	80052f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	881a      	ldrh	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	1c9a      	adds	r2, r3, #2
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052f4:	e015      	b.n	8005322 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f6:	f7fd f9a7 	bl	8002648 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d803      	bhi.n	800530e <HAL_SPI_Transmit+0x16c>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d102      	bne.n	8005314 <HAL_SPI_Transmit+0x172>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005320:	e0ab      	b.n	800547a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ca      	bne.n	80052c2 <HAL_SPI_Transmit+0x120>
 800532c:	e080      	b.n	8005430 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_SPI_Transmit+0x19a>
 8005336:	8afb      	ldrh	r3, [r7, #22]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d174      	bne.n	8005426 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d912      	bls.n	800536c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	1c9a      	adds	r2, r3, #2
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b02      	subs	r3, #2
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800536a:	e05c      	b.n	8005426 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005392:	e048      	b.n	8005426 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d12b      	bne.n	80053fa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d912      	bls.n	80053d2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b02      	subs	r3, #2
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053d0:	e029      	b.n	8005426 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053f8:	e015      	b.n	8005426 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fa:	f7fd f925 	bl	8002648 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d803      	bhi.n	8005412 <HAL_SPI_Transmit+0x270>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d102      	bne.n	8005418 <HAL_SPI_Transmit+0x276>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d106      	bne.n	8005426 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005424:	e029      	b.n	800547a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1b1      	bne.n	8005394 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fb69 	bl	8005b0c <SPI_EndRxTxTransaction>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e003      	b.n	800547a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005482:	7ffb      	ldrb	r3, [r7, #31]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800549a:	2301      	movs	r3, #1
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_SPI_TransmitReceive+0x26>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e20a      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x43c>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ba:	f7fd f8c5 	bl	8002648 <HAL_GetTick>
 80054be:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054c6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80054ce:	887b      	ldrh	r3, [r7, #2]
 80054d0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80054d2:	887b      	ldrh	r3, [r7, #2]
 80054d4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054d6:	7efb      	ldrb	r3, [r7, #27]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d00e      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x6e>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e2:	d106      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x66>
 80054ec:	7efb      	ldrb	r3, [r7, #27]
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d003      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
 80054f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054f8:	e1e0      	b.n	80058bc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_SPI_TransmitReceive+0x80>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_TransmitReceive+0x80>
 8005506:	887b      	ldrh	r3, [r7, #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005512:	e1d3      	b.n	80058bc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b04      	cmp	r3, #4
 800551e:	d003      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2205      	movs	r2, #5
 8005524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	887a      	ldrh	r2, [r7, #2]
 8005538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	887a      	ldrh	r2, [r7, #2]
 8005540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	887a      	ldrh	r2, [r7, #2]
 800554e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	887a      	ldrh	r2, [r7, #2]
 8005554:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800556a:	d802      	bhi.n	8005572 <HAL_SPI_TransmitReceive+0xe6>
 800556c:	8a3b      	ldrh	r3, [r7, #16]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d908      	bls.n	8005584 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e007      	b.n	8005594 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005592:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b40      	cmp	r3, #64	; 0x40
 80055a0:	d007      	beq.n	80055b2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ba:	f240 8081 	bls.w	80056c0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_SPI_TransmitReceive+0x140>
 80055c6:	8a7b      	ldrh	r3, [r7, #18]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d16d      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	881a      	ldrh	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	1c9a      	adds	r2, r3, #2
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f0:	e05a      	b.n	80056a8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d11b      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x1ac>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x1ac>
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	2b01      	cmp	r3, #1
 800560e:	d113      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	881a      	ldrh	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d11c      	bne.n	8005680 <HAL_SPI_TransmitReceive+0x1f4>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d016      	beq.n	8005680 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	b292      	uxth	r2, r2
 800565e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800567c:	2301      	movs	r3, #1
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005680:	f7fc ffe2 	bl	8002648 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568c:	429a      	cmp	r2, r3
 800568e:	d80b      	bhi.n	80056a8 <HAL_SPI_TransmitReceive+0x21c>
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d007      	beq.n	80056a8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80056a6:	e109      	b.n	80058bc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d19f      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x166>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d199      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x166>
 80056be:	e0e3      	b.n	8005888 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x244>
 80056c8:	8a7b      	ldrh	r3, [r7, #18]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	f040 80cf 	bne.w	800586e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d912      	bls.n	8005700 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b02      	subs	r3, #2
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056fe:	e0b6      	b.n	800586e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	7812      	ldrb	r2, [r2, #0]
 800570c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005726:	e0a2      	b.n	800586e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b02      	cmp	r3, #2
 8005734:	d134      	bne.n	80057a0 <HAL_SPI_TransmitReceive+0x314>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02f      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x314>
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	2b01      	cmp	r3, #1
 8005744:	d12c      	bne.n	80057a0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d912      	bls.n	8005776 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	1c9a      	adds	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b02      	subs	r3, #2
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005774:	e012      	b.n	800579c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d148      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x3b4>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d042      	beq.n	8005840 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d923      	bls.n	800580e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	b292      	uxth	r2, r2
 80057d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	1c9a      	adds	r2, r3, #2
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b02      	subs	r3, #2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d81f      	bhi.n	800583c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	e016      	b.n	800583c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f103 020c 	add.w	r2, r3, #12
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800583c:	2301      	movs	r3, #1
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005840:	f7fc ff02 	bl	8002648 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584c:	429a      	cmp	r2, r3
 800584e:	d803      	bhi.n	8005858 <HAL_SPI_TransmitReceive+0x3cc>
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d102      	bne.n	800585e <HAL_SPI_TransmitReceive+0x3d2>
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	2b00      	cmp	r3, #0
 800585c:	d107      	bne.n	800586e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800586c:	e026      	b.n	80058bc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	f47f af57 	bne.w	8005728 <HAL_SPI_TransmitReceive+0x29c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	f47f af50 	bne.w	8005728 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f93d 	bl	8005b0c <SPI_EndRxTxTransaction>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b2:	e003      	b.n	80058bc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3728      	adds	r7, #40	; 0x28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058e0:	f7fc feb2 	bl	8002648 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	4413      	add	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058f0:	f7fc feaa 	bl	8002648 <HAL_GetTick>
 80058f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058f6:	4b39      	ldr	r3, [pc, #228]	; (80059dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	015b      	lsls	r3, r3, #5
 80058fc:	0d1b      	lsrs	r3, r3, #20
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	fb02 f303 	mul.w	r3, r2, r3
 8005904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005906:	e054      	b.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590e:	d050      	beq.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005910:	f7fc fe9a 	bl	8002648 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	429a      	cmp	r2, r3
 800591e:	d902      	bls.n	8005926 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d13d      	bne.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593e:	d111      	bne.n	8005964 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005948:	d004      	beq.n	8005954 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005952:	d107      	bne.n	8005964 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596c:	d10f      	bne.n	800598e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800598c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e017      	b.n	80059d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4013      	ands	r3, r2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	bf0c      	ite	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	2300      	movne	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d19b      	bne.n	8005908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000014 	.word	0x20000014

080059e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059f2:	f7fc fe29 	bl	8002648 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	4413      	add	r3, r2
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a02:	f7fc fe21 	bl	8002648 <HAL_GetTick>
 8005a06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a10:	4b3d      	ldr	r3, [pc, #244]	; (8005b08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	00da      	lsls	r2, r3, #3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	0d1b      	lsrs	r3, r3, #20
 8005a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a28:	e060      	b.n	8005aec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a30:	d107      	bne.n	8005a42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a48:	d050      	beq.n	8005aec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a4a:	f7fc fdfd 	bl	8002648 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d902      	bls.n	8005a60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d13d      	bne.n	8005adc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a78:	d111      	bne.n	8005a9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a82:	d004      	beq.n	8005a8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8c:	d107      	bne.n	8005a9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa6:	d10f      	bne.n	8005ac8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ac6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e010      	b.n	8005afe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d196      	bne.n	8005a2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3728      	adds	r7, #40	; 0x28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000014 	.word	0x20000014

08005b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff ff5b 	bl	80059e0 <SPI_WaitFifoStateUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b34:	f043 0220 	orr.w	r2, r3, #32
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e027      	b.n	8005b90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2200      	movs	r2, #0
 8005b48:	2180      	movs	r1, #128	; 0x80
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff fec0 	bl	80058d0 <SPI_WaitFlagStateUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d007      	beq.n	8005b66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5a:	f043 0220 	orr.w	r2, r3, #32
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e014      	b.n	8005b90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff ff34 	bl	80059e0 <SPI_WaitFifoStateUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e000      	b.n	8005b90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e049      	b.n	8005c3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc f9ee 	bl	8001fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f001 f8c8 	bl	8006d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d001      	beq.n	8005c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e03b      	b.n	8005cd8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_TIM_Base_Start_IT+0x4e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIM_Base_Start_IT+0x4e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d115      	bne.n	8005cc2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	4b13      	ldr	r3, [pc, #76]	; (8005cec <HAL_TIM_Base_Start_IT+0xa4>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b06      	cmp	r3, #6
 8005ca6:	d015      	beq.n	8005cd4 <HAL_TIM_Base_Start_IT+0x8c>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cae:	d011      	beq.n	8005cd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc0:	e008      	b.n	8005cd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e000      	b.n	8005cd6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	00010007 	.word	0x00010007

08005cf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6a1a      	ldr	r2, [r3, #32]
 8005d0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10f      	bne.n	8005d38 <HAL_TIM_Base_Stop_IT+0x48>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6a1a      	ldr	r2, [r3, #32]
 8005d1e:	f240 4344 	movw	r3, #1092	; 0x444
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d107      	bne.n	8005d38 <HAL_TIM_Base_Stop_IT+0x48>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e049      	b.n	8005df4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f841 	bl	8005dfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f000 ffed 	bl	8006d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <HAL_TIM_PWM_Start+0x24>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	bf14      	ite	ne
 8005e2c:	2301      	movne	r3, #1
 8005e2e:	2300      	moveq	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	e03c      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d109      	bne.n	8005e4e <HAL_TIM_PWM_Start+0x3e>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	bf14      	ite	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	2300      	moveq	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e02f      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d109      	bne.n	8005e68 <HAL_TIM_PWM_Start+0x58>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	bf14      	ite	ne
 8005e60:	2301      	movne	r3, #1
 8005e62:	2300      	moveq	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e022      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b0c      	cmp	r3, #12
 8005e6c:	d109      	bne.n	8005e82 <HAL_TIM_PWM_Start+0x72>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	bf14      	ite	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	2300      	moveq	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	e015      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d109      	bne.n	8005e9c <HAL_TIM_PWM_Start+0x8c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	bf14      	ite	ne
 8005e94:	2301      	movne	r3, #1
 8005e96:	2300      	moveq	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e008      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e083      	b.n	8005fbe <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0xb6>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec4:	e023      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d104      	bne.n	8005ed6 <HAL_TIM_PWM_Start+0xc6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed4:	e01b      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d104      	bne.n	8005ee6 <HAL_TIM_PWM_Start+0xd6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee4:	e013      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_PWM_Start+0xe6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef4:	e00b      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_PWM_Start+0xf6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f04:	e003      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 fa3c 	bl	8007394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a29      	ldr	r2, [pc, #164]	; (8005fc8 <HAL_TIM_PWM_Start+0x1b8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x134>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a28      	ldr	r2, [pc, #160]	; (8005fcc <HAL_TIM_PWM_Start+0x1bc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x134>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a26      	ldr	r2, [pc, #152]	; (8005fd0 <HAL_TIM_PWM_Start+0x1c0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x134>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <HAL_TIM_PWM_Start+0x1c4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d101      	bne.n	8005f48 <HAL_TIM_PWM_Start+0x138>
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <HAL_TIM_PWM_Start+0x13a>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <HAL_TIM_PWM_Start+0x1b8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x16c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f70:	d004      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x16c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <HAL_TIM_PWM_Start+0x1bc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d115      	bne.n	8005fa8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <HAL_TIM_PWM_Start+0x1c8>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d015      	beq.n	8005fba <HAL_TIM_PWM_Start+0x1aa>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f94:	d011      	beq.n	8005fba <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa6:	e008      	b.n	8005fba <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e000      	b.n	8005fbc <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40012c00 	.word	0x40012c00
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	00010007 	.word	0x00010007

08005fdc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2200      	movs	r2, #0
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 f9d0 	bl	8007394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a3b      	ldr	r2, [pc, #236]	; (80060e8 <HAL_TIM_PWM_Stop+0x10c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00e      	beq.n	800601c <HAL_TIM_PWM_Stop+0x40>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a3a      	ldr	r2, [pc, #232]	; (80060ec <HAL_TIM_PWM_Stop+0x110>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_TIM_PWM_Stop+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a38      	ldr	r2, [pc, #224]	; (80060f0 <HAL_TIM_PWM_Stop+0x114>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_TIM_PWM_Stop+0x40>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a37      	ldr	r2, [pc, #220]	; (80060f4 <HAL_TIM_PWM_Stop+0x118>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d101      	bne.n	8006020 <HAL_TIM_PWM_Stop+0x44>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <HAL_TIM_PWM_Stop+0x46>
 8006020:	2300      	movs	r3, #0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d017      	beq.n	8006056 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10f      	bne.n	8006056 <HAL_TIM_PWM_Stop+0x7a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a1a      	ldr	r2, [r3, #32]
 800603c:	f240 4344 	movw	r3, #1092	; 0x444
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d107      	bne.n	8006056 <HAL_TIM_PWM_Stop+0x7a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006054:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6a1a      	ldr	r2, [r3, #32]
 800605c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006060:	4013      	ands	r3, r2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10f      	bne.n	8006086 <HAL_TIM_PWM_Stop+0xaa>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a1a      	ldr	r2, [r3, #32]
 800606c:	f240 4344 	movw	r3, #1092	; 0x444
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d107      	bne.n	8006086 <HAL_TIM_PWM_Stop+0xaa>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Stop+0xba>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006094:	e023      	b.n	80060de <HAL_TIM_PWM_Stop+0x102>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b04      	cmp	r3, #4
 800609a:	d104      	bne.n	80060a6 <HAL_TIM_PWM_Stop+0xca>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a4:	e01b      	b.n	80060de <HAL_TIM_PWM_Stop+0x102>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Stop+0xda>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b4:	e013      	b.n	80060de <HAL_TIM_PWM_Stop+0x102>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b0c      	cmp	r3, #12
 80060ba:	d104      	bne.n	80060c6 <HAL_TIM_PWM_Stop+0xea>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060c4:	e00b      	b.n	80060de <HAL_TIM_PWM_Stop+0x102>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d104      	bne.n	80060d6 <HAL_TIM_PWM_Stop+0xfa>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060d4:	e003      	b.n	80060de <HAL_TIM_PWM_Stop+0x102>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	e03c      	b.n	800619e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b04      	cmp	r3, #4
 8006128:	d109      	bne.n	800613e <HAL_TIM_PWM_Start_DMA+0x46>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	e02f      	b.n	800619e <HAL_TIM_PWM_Start_DMA+0xa6>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b08      	cmp	r3, #8
 8006142:	d109      	bne.n	8006158 <HAL_TIM_PWM_Start_DMA+0x60>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	bf0c      	ite	eq
 8006150:	2301      	moveq	r3, #1
 8006152:	2300      	movne	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e022      	b.n	800619e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b0c      	cmp	r3, #12
 800615c:	d109      	bne.n	8006172 <HAL_TIM_PWM_Start_DMA+0x7a>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	e015      	b.n	800619e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b10      	cmp	r3, #16
 8006176:	d109      	bne.n	800618c <HAL_TIM_PWM_Start_DMA+0x94>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e008      	b.n	800619e <HAL_TIM_PWM_Start_DMA+0xa6>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	bf0c      	ite	eq
 8006198:	2301      	moveq	r3, #1
 800619a:	2300      	movne	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80061a2:	2302      	movs	r3, #2
 80061a4:	e192      	b.n	80064cc <HAL_TIM_PWM_Start_DMA+0x3d4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e03c      	b.n	800623a <HAL_TIM_PWM_Start_DMA+0x142>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d109      	bne.n	80061da <HAL_TIM_PWM_Start_DMA+0xe2>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	e02f      	b.n	800623a <HAL_TIM_PWM_Start_DMA+0x142>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d109      	bne.n	80061f4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e022      	b.n	800623a <HAL_TIM_PWM_Start_DMA+0x142>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d109      	bne.n	800620e <HAL_TIM_PWM_Start_DMA+0x116>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b01      	cmp	r3, #1
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	e015      	b.n	800623a <HAL_TIM_PWM_Start_DMA+0x142>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b10      	cmp	r3, #16
 8006212:	d109      	bne.n	8006228 <HAL_TIM_PWM_Start_DMA+0x130>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b01      	cmp	r3, #1
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	e008      	b.n	800623a <HAL_TIM_PWM_Start_DMA+0x142>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	bf0c      	ite	eq
 8006234:	2301      	moveq	r3, #1
 8006236:	2300      	movne	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d034      	beq.n	80062a8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_TIM_PWM_Start_DMA+0x152>
 8006244:	887b      	ldrh	r3, [r7, #2]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e13e      	b.n	80064cc <HAL_TIM_PWM_Start_DMA+0x3d4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start_DMA+0x166>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800625c:	e026      	b.n	80062ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b04      	cmp	r3, #4
 8006262:	d104      	bne.n	800626e <HAL_TIM_PWM_Start_DMA+0x176>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800626c:	e01e      	b.n	80062ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b08      	cmp	r3, #8
 8006272:	d104      	bne.n	800627e <HAL_TIM_PWM_Start_DMA+0x186>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800627c:	e016      	b.n	80062ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b0c      	cmp	r3, #12
 8006282:	d104      	bne.n	800628e <HAL_TIM_PWM_Start_DMA+0x196>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800628c:	e00e      	b.n	80062ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b10      	cmp	r3, #16
 8006292:	d104      	bne.n	800629e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800629c:	e006      	b.n	80062ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062a6:	e001      	b.n	80062ac <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e10f      	b.n	80064cc <HAL_TIM_PWM_Start_DMA+0x3d4>
  }

  switch (Channel)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b0c      	cmp	r3, #12
 80062b0:	f200 80ae 	bhi.w	8006410 <HAL_TIM_PWM_Start_DMA+0x318>
 80062b4:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	08006411 	.word	0x08006411
 80062c4:	08006411 	.word	0x08006411
 80062c8:	08006411 	.word	0x08006411
 80062cc:	08006339 	.word	0x08006339
 80062d0:	08006411 	.word	0x08006411
 80062d4:	08006411 	.word	0x08006411
 80062d8:	08006411 	.word	0x08006411
 80062dc:	08006381 	.word	0x08006381
 80062e0:	08006411 	.word	0x08006411
 80062e4:	08006411 	.word	0x08006411
 80062e8:	08006411 	.word	0x08006411
 80062ec:	080063c9 	.word	0x080063c9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	4a77      	ldr	r2, [pc, #476]	; (80064d4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80062f6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	4a76      	ldr	r2, [pc, #472]	; (80064d8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80062fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	4a75      	ldr	r2, [pc, #468]	; (80064dc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006306:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3334      	adds	r3, #52	; 0x34
 8006314:	461a      	mov	r2, r3
 8006316:	887b      	ldrh	r3, [r7, #2]
 8006318:	f7fc fb1e 	bl	8002958 <HAL_DMA_Start_IT>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e0d2      	b.n	80064cc <HAL_TIM_PWM_Start_DMA+0x3d4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006334:	60da      	str	r2, [r3, #12]
      break;
 8006336:	e06e      	b.n	8006416 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	4a65      	ldr	r2, [pc, #404]	; (80064d4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800633e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	4a64      	ldr	r2, [pc, #400]	; (80064d8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8006346:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	4a63      	ldr	r2, [pc, #396]	; (80064dc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800634e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3338      	adds	r3, #56	; 0x38
 800635c:	461a      	mov	r2, r3
 800635e:	887b      	ldrh	r3, [r7, #2]
 8006360:	f7fc fafa 	bl	8002958 <HAL_DMA_Start_IT>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e0ae      	b.n	80064cc <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800637c:	60da      	str	r2, [r3, #12]
      break;
 800637e:	e04a      	b.n	8006416 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	4a53      	ldr	r2, [pc, #332]	; (80064d4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8006386:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	4a52      	ldr	r2, [pc, #328]	; (80064d8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800638e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a51      	ldr	r2, [pc, #324]	; (80064dc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006396:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	333c      	adds	r3, #60	; 0x3c
 80063a4:	461a      	mov	r2, r3
 80063a6:	887b      	ldrh	r3, [r7, #2]
 80063a8:	f7fc fad6 	bl	8002958 <HAL_DMA_Start_IT>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e08a      	b.n	80064cc <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063c4:	60da      	str	r2, [r3, #12]
      break;
 80063c6:	e026      	b.n	8006416 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	4a41      	ldr	r2, [pc, #260]	; (80064d4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80063ce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	4a40      	ldr	r2, [pc, #256]	; (80064d8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80063d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	4a3f      	ldr	r2, [pc, #252]	; (80064dc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80063de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3340      	adds	r3, #64	; 0x40
 80063ec:	461a      	mov	r2, r3
 80063ee:	887b      	ldrh	r3, [r7, #2]
 80063f0:	f7fc fab2 	bl	8002958 <HAL_DMA_Start_IT>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e066      	b.n	80064cc <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800640c:	60da      	str	r2, [r3, #12]
      break;
 800640e:	e002      	b.n	8006416 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	75fb      	strb	r3, [r7, #23]
      break;
 8006414:	bf00      	nop
  }

  if (status == HAL_OK)
 8006416:	7dfb      	ldrb	r3, [r7, #23]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d156      	bne.n	80064ca <HAL_TIM_PWM_Start_DMA+0x3d2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2201      	movs	r2, #1
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	4618      	mov	r0, r3
 8006426:	f000 ffb5 	bl	8007394 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2c      	ldr	r2, [pc, #176]	; (80064e0 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_TIM_PWM_Start_DMA+0x35a>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2a      	ldr	r2, [pc, #168]	; (80064e4 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_TIM_PWM_Start_DMA+0x35a>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a29      	ldr	r2, [pc, #164]	; (80064e8 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_TIM_PWM_Start_DMA+0x35a>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a27      	ldr	r2, [pc, #156]	; (80064ec <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d101      	bne.n	8006456 <HAL_TIM_PWM_Start_DMA+0x35e>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_TIM_PWM_Start_DMA+0x360>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800646a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d009      	beq.n	800648a <HAL_TIM_PWM_Start_DMA+0x392>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647e:	d004      	beq.n	800648a <HAL_TIM_PWM_Start_DMA+0x392>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d115      	bne.n	80064b6 <HAL_TIM_PWM_Start_DMA+0x3be>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8006492:	4013      	ands	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b06      	cmp	r3, #6
 800649a:	d015      	beq.n	80064c8 <HAL_TIM_PWM_Start_DMA+0x3d0>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a2:	d011      	beq.n	80064c8 <HAL_TIM_PWM_Start_DMA+0x3d0>
      {
        __HAL_TIM_ENABLE(htim);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b4:	e008      	b.n	80064c8 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	e000      	b.n	80064ca <HAL_TIM_PWM_Start_DMA+0x3d2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	08006c5b 	.word	0x08006c5b
 80064d8:	08006d03 	.word	0x08006d03
 80064dc:	08006bc9 	.word	0x08006bc9
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40014400 	.word	0x40014400
 80064ec:	40014800 	.word	0x40014800
 80064f0:	00010007 	.word	0x00010007

080064f4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b0c      	cmp	r3, #12
 8006506:	d855      	bhi.n	80065b4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006508:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006545 	.word	0x08006545
 8006514:	080065b5 	.word	0x080065b5
 8006518:	080065b5 	.word	0x080065b5
 800651c:	080065b5 	.word	0x080065b5
 8006520:	08006561 	.word	0x08006561
 8006524:	080065b5 	.word	0x080065b5
 8006528:	080065b5 	.word	0x080065b5
 800652c:	080065b5 	.word	0x080065b5
 8006530:	0800657d 	.word	0x0800657d
 8006534:	080065b5 	.word	0x080065b5
 8006538:	080065b5 	.word	0x080065b5
 800653c:	080065b5 	.word	0x080065b5
 8006540:	08006599 	.word	0x08006599
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006552:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	4618      	mov	r0, r3
 800655a:	f7fc fa5c 	bl	8002a16 <HAL_DMA_Abort_IT>
      break;
 800655e:	e02c      	b.n	80065ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800656e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	4618      	mov	r0, r3
 8006576:	f7fc fa4e 	bl	8002a16 <HAL_DMA_Abort_IT>
      break;
 800657a:	e01e      	b.n	80065ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800658a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	4618      	mov	r0, r3
 8006592:	f7fc fa40 	bl	8002a16 <HAL_DMA_Abort_IT>
      break;
 8006596:	e010      	b.n	80065ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fc fa32 	bl	8002a16 <HAL_DMA_Abort_IT>
      break;
 80065b2:	e002      	b.n	80065ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d17b      	bne.n	80066b8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2200      	movs	r2, #0
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fee3 	bl	8007394 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a3c      	ldr	r2, [pc, #240]	; (80066c4 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00e      	beq.n	80065f6 <HAL_TIM_PWM_Stop_DMA+0x102>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a3a      	ldr	r2, [pc, #232]	; (80066c8 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_TIM_PWM_Stop_DMA+0x102>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a39      	ldr	r2, [pc, #228]	; (80066cc <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_TIM_PWM_Stop_DMA+0x102>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a37      	ldr	r2, [pc, #220]	; (80066d0 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d101      	bne.n	80065fa <HAL_TIM_PWM_Stop_DMA+0x106>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_TIM_PWM_Stop_DMA+0x108>
 80065fa:	2300      	movs	r3, #0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d017      	beq.n	8006630 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6a1a      	ldr	r2, [r3, #32]
 8006606:	f241 1311 	movw	r3, #4369	; 0x1111
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10f      	bne.n	8006630 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6a1a      	ldr	r2, [r3, #32]
 8006616:	f240 4344 	movw	r3, #1092	; 0x444
 800661a:	4013      	ands	r3, r2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d107      	bne.n	8006630 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800662e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6a1a      	ldr	r2, [r3, #32]
 8006636:	f241 1311 	movw	r3, #4369	; 0x1111
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10f      	bne.n	8006660 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6a1a      	ldr	r2, [r3, #32]
 8006646:	f240 4344 	movw	r3, #1092	; 0x444
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d107      	bne.n	8006660 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800666e:	e023      	b.n	80066b8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b04      	cmp	r3, #4
 8006674:	d104      	bne.n	8006680 <HAL_TIM_PWM_Stop_DMA+0x18c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800667e:	e01b      	b.n	80066b8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b08      	cmp	r3, #8
 8006684:	d104      	bne.n	8006690 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800668e:	e013      	b.n	80066b8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b0c      	cmp	r3, #12
 8006694:	d104      	bne.n	80066a0 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800669e:	e00b      	b.n	80066b8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d104      	bne.n	80066b0 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ae:	e003      	b.n	80066b8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40014800 	.word	0x40014800

080066d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d122      	bne.n	8006730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d11b      	bne.n	8006730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0202 	mvn.w	r2, #2
 8006700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa24 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
 800671c:	e005      	b.n	800672a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa16 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fa27 	bl	8006b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b04      	cmp	r3, #4
 800673c:	d122      	bne.n	8006784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b04      	cmp	r3, #4
 800674a:	d11b      	bne.n	8006784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0204 	mvn.w	r2, #4
 8006754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f9fa 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
 8006770:	e005      	b.n	800677e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f9ec 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f9fd 	bl	8006b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b08      	cmp	r3, #8
 8006790:	d122      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b08      	cmp	r3, #8
 800679e:	d11b      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0208 	mvn.w	r2, #8
 80067a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2204      	movs	r2, #4
 80067ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f9d0 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
 80067c4:	e005      	b.n	80067d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9c2 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f9d3 	bl	8006b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0310 	and.w	r3, r3, #16
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d122      	bne.n	800682c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d11b      	bne.n	800682c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0210 	mvn.w	r2, #16
 80067fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2208      	movs	r2, #8
 8006802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f9a6 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
 8006818:	e005      	b.n	8006826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f998 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f9a9 	bl	8006b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10e      	bne.n	8006858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0201 	mvn.w	r2, #1
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f972 	bl	8006b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d10e      	bne.n	8006884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006870:	2b80      	cmp	r3, #128	; 0x80
 8006872:	d107      	bne.n	8006884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800687c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fe96 	bl	80075b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006892:	d10e      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689e:	2b80      	cmp	r3, #128	; 0x80
 80068a0:	d107      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fe89 	bl	80075c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	d10e      	bne.n	80068de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d107      	bne.n	80068de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f961 	bl	8006ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d10e      	bne.n	800690a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d107      	bne.n	800690a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f06f 0220 	mvn.w	r2, #32
 8006902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fe49 	bl	800759c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800692e:	2302      	movs	r3, #2
 8006930:	e0ff      	b.n	8006b32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b14      	cmp	r3, #20
 800693e:	f200 80f0 	bhi.w	8006b22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006942:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	0800699d 	.word	0x0800699d
 800694c:	08006b23 	.word	0x08006b23
 8006950:	08006b23 	.word	0x08006b23
 8006954:	08006b23 	.word	0x08006b23
 8006958:	080069dd 	.word	0x080069dd
 800695c:	08006b23 	.word	0x08006b23
 8006960:	08006b23 	.word	0x08006b23
 8006964:	08006b23 	.word	0x08006b23
 8006968:	08006a1f 	.word	0x08006a1f
 800696c:	08006b23 	.word	0x08006b23
 8006970:	08006b23 	.word	0x08006b23
 8006974:	08006b23 	.word	0x08006b23
 8006978:	08006a5f 	.word	0x08006a5f
 800697c:	08006b23 	.word	0x08006b23
 8006980:	08006b23 	.word	0x08006b23
 8006984:	08006b23 	.word	0x08006b23
 8006988:	08006aa1 	.word	0x08006aa1
 800698c:	08006b23 	.word	0x08006b23
 8006990:	08006b23 	.word	0x08006b23
 8006994:	08006b23 	.word	0x08006b23
 8006998:	08006ae1 	.word	0x08006ae1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fa50 	bl	8006e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0208 	orr.w	r2, r2, #8
 80069b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0204 	bic.w	r2, r2, #4
 80069c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6999      	ldr	r1, [r3, #24]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	619a      	str	r2, [r3, #24]
      break;
 80069da:	e0a5      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fab6 	bl	8006f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6999      	ldr	r1, [r3, #24]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	021a      	lsls	r2, r3, #8
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	619a      	str	r2, [r3, #24]
      break;
 8006a1c:	e084      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fb15 	bl	8007054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0208 	orr.w	r2, r2, #8
 8006a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0204 	bic.w	r2, r2, #4
 8006a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69d9      	ldr	r1, [r3, #28]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	61da      	str	r2, [r3, #28]
      break;
 8006a5c:	e064      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fb73 	bl	8007150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	021a      	lsls	r2, r3, #8
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	61da      	str	r2, [r3, #28]
      break;
 8006a9e:	e043      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fbb6 	bl	8007218 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0208 	orr.w	r2, r2, #8
 8006aba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0204 	bic.w	r2, r2, #4
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ade:	e023      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fbf4 	bl	80072d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	021a      	lsls	r2, r3, #8
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b20:	e002      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	75fb      	strb	r3, [r7, #23]
      break;
 8006b26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop

08006b3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d107      	bne.n	8006bf0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bee:	e02a      	b.n	8006c46 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d107      	bne.n	8006c0a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c08:	e01d      	b.n	8006c46 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d107      	bne.n	8006c24 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2204      	movs	r2, #4
 8006c18:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c22:	e010      	b.n	8006c46 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d107      	bne.n	8006c3e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2208      	movs	r2, #8
 8006c32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c3c:	e003      	b.n	8006c46 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff ffb4 	bl	8006bb4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	771a      	strb	r2, [r3, #28]
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d10b      	bne.n	8006c8a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d136      	bne.n	8006cee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c88:	e031      	b.n	8006cee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d10b      	bne.n	8006cac <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2202      	movs	r2, #2
 8006c98:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d125      	bne.n	8006cee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006caa:	e020      	b.n	8006cee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d10b      	bne.n	8006cce <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d114      	bne.n	8006cee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ccc:	e00f      	b.n	8006cee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d10a      	bne.n	8006cee <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2208      	movs	r2, #8
 8006cdc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff ff42 	bl	8006b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	771a      	strb	r2, [r3, #28]
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d103      	bne.n	8006d22 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	771a      	strb	r2, [r3, #28]
 8006d20:	e019      	b.n	8006d56 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d103      	bne.n	8006d34 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	771a      	strb	r2, [r3, #28]
 8006d32:	e010      	b.n	8006d56 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d103      	bne.n	8006d46 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2204      	movs	r2, #4
 8006d42:	771a      	strb	r2, [r3, #28]
 8006d44:	e007      	b.n	8006d56 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d102      	bne.n	8006d56 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2208      	movs	r2, #8
 8006d54:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff ff18 	bl	8006b8c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	771a      	strb	r2, [r3, #28]
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a2e      	ldr	r2, [pc, #184]	; (8006e38 <TIM_Base_SetConfig+0xcc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d003      	beq.n	8006d8c <TIM_Base_SetConfig+0x20>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8a:	d108      	bne.n	8006d9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a25      	ldr	r2, [pc, #148]	; (8006e38 <TIM_Base_SetConfig+0xcc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00f      	beq.n	8006dc6 <TIM_Base_SetConfig+0x5a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dac:	d00b      	beq.n	8006dc6 <TIM_Base_SetConfig+0x5a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a22      	ldr	r2, [pc, #136]	; (8006e3c <TIM_Base_SetConfig+0xd0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d007      	beq.n	8006dc6 <TIM_Base_SetConfig+0x5a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <TIM_Base_SetConfig+0xd4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d003      	beq.n	8006dc6 <TIM_Base_SetConfig+0x5a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a20      	ldr	r2, [pc, #128]	; (8006e44 <TIM_Base_SetConfig+0xd8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d108      	bne.n	8006dd8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a0e      	ldr	r2, [pc, #56]	; (8006e38 <TIM_Base_SetConfig+0xcc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00b      	beq.n	8006e1c <TIM_Base_SetConfig+0xb0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a0d      	ldr	r2, [pc, #52]	; (8006e3c <TIM_Base_SetConfig+0xd0>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <TIM_Base_SetConfig+0xb0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a0c      	ldr	r2, [pc, #48]	; (8006e40 <TIM_Base_SetConfig+0xd4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_Base_SetConfig+0xb0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a0b      	ldr	r2, [pc, #44]	; (8006e44 <TIM_Base_SetConfig+0xd8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d103      	bne.n	8006e24 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	615a      	str	r2, [r3, #20]
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40014000 	.word	0x40014000
 8006e40:	40014400 	.word	0x40014400
 8006e44:	40014800 	.word	0x40014800

08006e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0201 	bic.w	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0303 	bic.w	r3, r3, #3
 8006e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f023 0302 	bic.w	r3, r3, #2
 8006e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a28      	ldr	r2, [pc, #160]	; (8006f44 <TIM_OC1_SetConfig+0xfc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00b      	beq.n	8006ec0 <TIM_OC1_SetConfig+0x78>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a27      	ldr	r2, [pc, #156]	; (8006f48 <TIM_OC1_SetConfig+0x100>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <TIM_OC1_SetConfig+0x78>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a26      	ldr	r2, [pc, #152]	; (8006f4c <TIM_OC1_SetConfig+0x104>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_OC1_SetConfig+0x78>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a25      	ldr	r2, [pc, #148]	; (8006f50 <TIM_OC1_SetConfig+0x108>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d10c      	bne.n	8006eda <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f023 0308 	bic.w	r3, r3, #8
 8006ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f023 0304 	bic.w	r3, r3, #4
 8006ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a19      	ldr	r2, [pc, #100]	; (8006f44 <TIM_OC1_SetConfig+0xfc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <TIM_OC1_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a18      	ldr	r2, [pc, #96]	; (8006f48 <TIM_OC1_SetConfig+0x100>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d007      	beq.n	8006efa <TIM_OC1_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a17      	ldr	r2, [pc, #92]	; (8006f4c <TIM_OC1_SetConfig+0x104>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_OC1_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a16      	ldr	r2, [pc, #88]	; (8006f50 <TIM_OC1_SetConfig+0x108>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d111      	bne.n	8006f1e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	621a      	str	r2, [r3, #32]
}
 8006f38:	bf00      	nop
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40012c00 	.word	0x40012c00
 8006f48:	40014000 	.word	0x40014000
 8006f4c:	40014400 	.word	0x40014400
 8006f50:	40014800 	.word	0x40014800

08006f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	f023 0210 	bic.w	r2, r3, #16
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f023 0320 	bic.w	r3, r3, #32
 8006fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a24      	ldr	r2, [pc, #144]	; (8007044 <TIM_OC2_SetConfig+0xf0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d10d      	bne.n	8006fd4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a1b      	ldr	r2, [pc, #108]	; (8007044 <TIM_OC2_SetConfig+0xf0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00b      	beq.n	8006ff4 <TIM_OC2_SetConfig+0xa0>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a1a      	ldr	r2, [pc, #104]	; (8007048 <TIM_OC2_SetConfig+0xf4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d007      	beq.n	8006ff4 <TIM_OC2_SetConfig+0xa0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a19      	ldr	r2, [pc, #100]	; (800704c <TIM_OC2_SetConfig+0xf8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d003      	beq.n	8006ff4 <TIM_OC2_SetConfig+0xa0>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a18      	ldr	r2, [pc, #96]	; (8007050 <TIM_OC2_SetConfig+0xfc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d113      	bne.n	800701c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ffa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007002:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40012c00 	.word	0x40012c00
 8007048:	40014000 	.word	0x40014000
 800704c:	40014400 	.word	0x40014400
 8007050:	40014800 	.word	0x40014800

08007054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a23      	ldr	r2, [pc, #140]	; (8007140 <TIM_OC3_SetConfig+0xec>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d10d      	bne.n	80070d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070d0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <TIM_OC3_SetConfig+0xec>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00b      	beq.n	80070f2 <TIM_OC3_SetConfig+0x9e>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a19      	ldr	r2, [pc, #100]	; (8007144 <TIM_OC3_SetConfig+0xf0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d007      	beq.n	80070f2 <TIM_OC3_SetConfig+0x9e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a18      	ldr	r2, [pc, #96]	; (8007148 <TIM_OC3_SetConfig+0xf4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_OC3_SetConfig+0x9e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a17      	ldr	r2, [pc, #92]	; (800714c <TIM_OC3_SetConfig+0xf8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d113      	bne.n	800711a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	621a      	str	r2, [r3, #32]
}
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40014000 	.word	0x40014000
 8007148:	40014400 	.word	0x40014400
 800714c:	40014800 	.word	0x40014800

08007150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800719e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	031b      	lsls	r3, r3, #12
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a16      	ldr	r2, [pc, #88]	; (8007208 <TIM_OC4_SetConfig+0xb8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00b      	beq.n	80071cc <TIM_OC4_SetConfig+0x7c>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a15      	ldr	r2, [pc, #84]	; (800720c <TIM_OC4_SetConfig+0xbc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d007      	beq.n	80071cc <TIM_OC4_SetConfig+0x7c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a14      	ldr	r2, [pc, #80]	; (8007210 <TIM_OC4_SetConfig+0xc0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_OC4_SetConfig+0x7c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a13      	ldr	r2, [pc, #76]	; (8007214 <TIM_OC4_SetConfig+0xc4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d109      	bne.n	80071e0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	019b      	lsls	r3, r3, #6
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40014000 	.word	0x40014000
 8007210:	40014400 	.word	0x40014400
 8007214:	40014800 	.word	0x40014800

08007218 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800725c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	041b      	lsls	r3, r3, #16
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <TIM_OC5_SetConfig+0xac>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00b      	beq.n	800728a <TIM_OC5_SetConfig+0x72>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a14      	ldr	r2, [pc, #80]	; (80072c8 <TIM_OC5_SetConfig+0xb0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <TIM_OC5_SetConfig+0x72>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a13      	ldr	r2, [pc, #76]	; (80072cc <TIM_OC5_SetConfig+0xb4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_OC5_SetConfig+0x72>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a12      	ldr	r2, [pc, #72]	; (80072d0 <TIM_OC5_SetConfig+0xb8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d109      	bne.n	800729e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007290:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	621a      	str	r2, [r3, #32]
}
 80072b8:	bf00      	nop
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	40014000 	.word	0x40014000
 80072cc:	40014400 	.word	0x40014400
 80072d0:	40014800 	.word	0x40014800

080072d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800731a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	051b      	lsls	r3, r3, #20
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a16      	ldr	r2, [pc, #88]	; (8007384 <TIM_OC6_SetConfig+0xb0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00b      	beq.n	8007348 <TIM_OC6_SetConfig+0x74>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a15      	ldr	r2, [pc, #84]	; (8007388 <TIM_OC6_SetConfig+0xb4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <TIM_OC6_SetConfig+0x74>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a14      	ldr	r2, [pc, #80]	; (800738c <TIM_OC6_SetConfig+0xb8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC6_SetConfig+0x74>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a13      	ldr	r2, [pc, #76]	; (8007390 <TIM_OC6_SetConfig+0xbc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d109      	bne.n	800735c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800734e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	029b      	lsls	r3, r3, #10
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40012c00 	.word	0x40012c00
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	2201      	movs	r2, #1
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1a      	ldr	r2, [r3, #32]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	43db      	mvns	r3, r3
 80073b6:	401a      	ands	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1a      	ldr	r2, [r3, #32]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	431a      	orrs	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e04f      	b.n	8007498 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a21      	ldr	r2, [pc, #132]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d108      	bne.n	8007434 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007428:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a14      	ldr	r2, [pc, #80]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d009      	beq.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007460:	d004      	beq.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a10      	ldr	r2, [pc, #64]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d10c      	bne.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	4313      	orrs	r3, r2
 800747c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	40012c00 	.word	0x40012c00
 80074a8:	40014000 	.word	0x40014000

080074ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e060      	b.n	800758a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a14      	ldr	r2, [pc, #80]	; (8007598 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d115      	bne.n	8007578 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	051b      	lsls	r3, r3, #20
 8007558:	4313      	orrs	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	4313      	orrs	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40012c00 	.word	0x40012c00

0800759c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e040      	b.n	800766c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fa fd78 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2224      	movs	r2, #36	; 0x24
 8007604:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8b6 	bl	8007788 <UART_SetConfig>
 800761c:	4603      	mov	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e022      	b.n	800766c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f9e0 	bl	80079f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fa67 	bl	8007b38 <UART_CheckIdleState>
 800766a:	4603      	mov	r3, r0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007688:	2b20      	cmp	r3, #32
 800768a:	d178      	bne.n	800777e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <HAL_UART_Transmit+0x24>
 8007692:	88fb      	ldrh	r3, [r7, #6]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e071      	b.n	8007780 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2221      	movs	r2, #33	; 0x21
 80076a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076aa:	f7fa ffcd 	bl	8002648 <HAL_GetTick>
 80076ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	88fa      	ldrh	r2, [r7, #6]
 80076b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	88fa      	ldrh	r2, [r7, #6]
 80076bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c8:	d108      	bne.n	80076dc <HAL_UART_Transmit+0x68>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d104      	bne.n	80076dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	e003      	b.n	80076e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076e4:	e030      	b.n	8007748 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2200      	movs	r2, #0
 80076ee:	2180      	movs	r1, #128	; 0x80
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fac9 	bl	8007c88 <UART_WaitOnFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2220      	movs	r2, #32
 8007700:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e03c      	b.n	8007780 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10b      	bne.n	8007724 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	881a      	ldrh	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007718:	b292      	uxth	r2, r2
 800771a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	3302      	adds	r3, #2
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	e008      	b.n	8007736 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	781a      	ldrb	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	b292      	uxth	r2, r2
 800772e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	3301      	adds	r3, #1
 8007734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1c8      	bne.n	80076e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2200      	movs	r2, #0
 800775c:	2140      	movs	r1, #64	; 0x40
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 fa92 	bl	8007c88 <UART_WaitOnFlagUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2220      	movs	r2, #32
 800776e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e005      	b.n	8007780 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2220      	movs	r2, #32
 8007778:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	e000      	b.n	8007780 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800777e:	2302      	movs	r3, #2
  }
}
 8007780:	4618      	mov	r0, r3
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b8a      	ldr	r3, [pc, #552]	; (80079dc <UART_SetConfig+0x254>)
 80077b4:	4013      	ands	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6812      	ldr	r2, [r2, #0]
 80077ba:	6979      	ldr	r1, [r7, #20]
 80077bc:	430b      	orrs	r3, r1
 80077be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a78      	ldr	r2, [pc, #480]	; (80079e0 <UART_SetConfig+0x258>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d120      	bne.n	8007846 <UART_SetConfig+0xbe>
 8007804:	4b77      	ldr	r3, [pc, #476]	; (80079e4 <UART_SetConfig+0x25c>)
 8007806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	2b03      	cmp	r3, #3
 800780e:	d817      	bhi.n	8007840 <UART_SetConfig+0xb8>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0x90>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	08007829 	.word	0x08007829
 800781c:	08007835 	.word	0x08007835
 8007820:	0800783b 	.word	0x0800783b
 8007824:	0800782f 	.word	0x0800782f
 8007828:	2300      	movs	r3, #0
 800782a:	77fb      	strb	r3, [r7, #31]
 800782c:	e01d      	b.n	800786a <UART_SetConfig+0xe2>
 800782e:	2302      	movs	r3, #2
 8007830:	77fb      	strb	r3, [r7, #31]
 8007832:	e01a      	b.n	800786a <UART_SetConfig+0xe2>
 8007834:	2304      	movs	r3, #4
 8007836:	77fb      	strb	r3, [r7, #31]
 8007838:	e017      	b.n	800786a <UART_SetConfig+0xe2>
 800783a:	2308      	movs	r3, #8
 800783c:	77fb      	strb	r3, [r7, #31]
 800783e:	e014      	b.n	800786a <UART_SetConfig+0xe2>
 8007840:	2310      	movs	r3, #16
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e011      	b.n	800786a <UART_SetConfig+0xe2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a67      	ldr	r2, [pc, #412]	; (80079e8 <UART_SetConfig+0x260>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d102      	bne.n	8007856 <UART_SetConfig+0xce>
 8007850:	2300      	movs	r3, #0
 8007852:	77fb      	strb	r3, [r7, #31]
 8007854:	e009      	b.n	800786a <UART_SetConfig+0xe2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a64      	ldr	r2, [pc, #400]	; (80079ec <UART_SetConfig+0x264>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d102      	bne.n	8007866 <UART_SetConfig+0xde>
 8007860:	2300      	movs	r3, #0
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e001      	b.n	800786a <UART_SetConfig+0xe2>
 8007866:	2310      	movs	r3, #16
 8007868:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007872:	d15a      	bne.n	800792a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007874:	7ffb      	ldrb	r3, [r7, #31]
 8007876:	2b08      	cmp	r3, #8
 8007878:	d827      	bhi.n	80078ca <UART_SetConfig+0x142>
 800787a:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <UART_SetConfig+0xf8>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	080078a5 	.word	0x080078a5
 8007884:	080078ad 	.word	0x080078ad
 8007888:	080078b5 	.word	0x080078b5
 800788c:	080078cb 	.word	0x080078cb
 8007890:	080078bb 	.word	0x080078bb
 8007894:	080078cb 	.word	0x080078cb
 8007898:	080078cb 	.word	0x080078cb
 800789c:	080078cb 	.word	0x080078cb
 80078a0:	080078c3 	.word	0x080078c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078a4:	f7fd f9fc 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80078a8:	61b8      	str	r0, [r7, #24]
        break;
 80078aa:	e013      	b.n	80078d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ac:	f7fd fa1a 	bl	8004ce4 <HAL_RCC_GetPCLK2Freq>
 80078b0:	61b8      	str	r0, [r7, #24]
        break;
 80078b2:	e00f      	b.n	80078d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078b4:	4b4e      	ldr	r3, [pc, #312]	; (80079f0 <UART_SetConfig+0x268>)
 80078b6:	61bb      	str	r3, [r7, #24]
        break;
 80078b8:	e00c      	b.n	80078d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ba:	f7fd f97b 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 80078be:	61b8      	str	r0, [r7, #24]
        break;
 80078c0:	e008      	b.n	80078d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c6:	61bb      	str	r3, [r7, #24]
        break;
 80078c8:	e004      	b.n	80078d4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	77bb      	strb	r3, [r7, #30]
        break;
 80078d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d074      	beq.n	80079c4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	005a      	lsls	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2b0f      	cmp	r3, #15
 80078f4:	d916      	bls.n	8007924 <UART_SetConfig+0x19c>
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078fc:	d212      	bcs.n	8007924 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	b29b      	uxth	r3, r3
 8007902:	f023 030f 	bic.w	r3, r3, #15
 8007906:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	085b      	lsrs	r3, r3, #1
 800790c:	b29b      	uxth	r3, r3
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	b29a      	uxth	r2, r3
 8007914:	89fb      	ldrh	r3, [r7, #14]
 8007916:	4313      	orrs	r3, r2
 8007918:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	89fa      	ldrh	r2, [r7, #14]
 8007920:	60da      	str	r2, [r3, #12]
 8007922:	e04f      	b.n	80079c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	77bb      	strb	r3, [r7, #30]
 8007928:	e04c      	b.n	80079c4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800792a:	7ffb      	ldrb	r3, [r7, #31]
 800792c:	2b08      	cmp	r3, #8
 800792e:	d828      	bhi.n	8007982 <UART_SetConfig+0x1fa>
 8007930:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0x1b0>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	0800795d 	.word	0x0800795d
 800793c:	08007965 	.word	0x08007965
 8007940:	0800796d 	.word	0x0800796d
 8007944:	08007983 	.word	0x08007983
 8007948:	08007973 	.word	0x08007973
 800794c:	08007983 	.word	0x08007983
 8007950:	08007983 	.word	0x08007983
 8007954:	08007983 	.word	0x08007983
 8007958:	0800797b 	.word	0x0800797b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800795c:	f7fd f9a0 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8007960:	61b8      	str	r0, [r7, #24]
        break;
 8007962:	e013      	b.n	800798c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007964:	f7fd f9be 	bl	8004ce4 <HAL_RCC_GetPCLK2Freq>
 8007968:	61b8      	str	r0, [r7, #24]
        break;
 800796a:	e00f      	b.n	800798c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800796c:	4b20      	ldr	r3, [pc, #128]	; (80079f0 <UART_SetConfig+0x268>)
 800796e:	61bb      	str	r3, [r7, #24]
        break;
 8007970:	e00c      	b.n	800798c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007972:	f7fd f91f 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8007976:	61b8      	str	r0, [r7, #24]
        break;
 8007978:	e008      	b.n	800798c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800797a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800797e:	61bb      	str	r3, [r7, #24]
        break;
 8007980:	e004      	b.n	800798c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	77bb      	strb	r3, [r7, #30]
        break;
 800798a:	bf00      	nop
    }

    if (pclk != 0U)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d018      	beq.n	80079c4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	085a      	lsrs	r2, r3, #1
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	441a      	add	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b0f      	cmp	r3, #15
 80079aa:	d909      	bls.n	80079c0 <UART_SetConfig+0x238>
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b2:	d205      	bcs.n	80079c0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	e001      	b.n	80079c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80079d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	efff69f3 	.word	0xefff69f3
 80079e0:	40013800 	.word	0x40013800
 80079e4:	40021000 	.word	0x40021000
 80079e8:	40004400 	.word	0x40004400
 80079ec:	40004800 	.word	0x40004800
 80079f0:	007a1200 	.word	0x007a1200

080079f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	f003 0308 	and.w	r3, r3, #8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	f003 0310 	and.w	r3, r3, #16
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01a      	beq.n	8007b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007af2:	d10a      	bne.n	8007b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	605a      	str	r2, [r3, #4]
  }
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b098      	sub	sp, #96	; 0x60
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b48:	f7fa fd7e 	bl	8002648 <HAL_GetTick>
 8007b4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d12e      	bne.n	8007bba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b64:	2200      	movs	r2, #0
 8007b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f88c 	bl	8007c88 <UART_WaitOnFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d021      	beq.n	8007bba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b94:	647b      	str	r3, [r7, #68]	; 0x44
 8007b96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e6      	bne.n	8007b76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e062      	b.n	8007c80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0304 	and.w	r3, r3, #4
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d149      	bne.n	8007c5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f856 	bl	8007c88 <UART_WaitOnFlagUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d03c      	beq.n	8007c5c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	623b      	str	r3, [r7, #32]
   return(result);
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c00:	633b      	str	r3, [r7, #48]	; 0x30
 8007c02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e6      	bne.n	8007be2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0301 	bic.w	r3, r3, #1
 8007c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3308      	adds	r3, #8
 8007c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c34:	61fa      	str	r2, [r7, #28]
 8007c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	69b9      	ldr	r1, [r7, #24]
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	617b      	str	r3, [r7, #20]
   return(result);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e5      	bne.n	8007c14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e011      	b.n	8007c80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3758      	adds	r7, #88	; 0x58
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	4613      	mov	r3, r2
 8007c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c98:	e049      	b.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca0:	d045      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca2:	f7fa fcd1 	bl	8002648 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e048      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d031      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d110      	bne.n	8007cfa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2208      	movs	r2, #8
 8007cde:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f838 	bl	8007d56 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2208      	movs	r2, #8
 8007cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e029      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d08:	d111      	bne.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f81e 	bl	8007d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e00f      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4013      	ands	r3, r2
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	bf0c      	ite	eq
 8007d3e:	2301      	moveq	r3, #1
 8007d40:	2300      	movne	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d0a6      	beq.n	8007c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b095      	sub	sp, #84	; 0x54
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3308      	adds	r3, #8
 8007dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007db0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e5      	bne.n	8007d90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d118      	bne.n	8007dfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f023 0310 	bic.w	r3, r3, #16
 8007de0:	647b      	str	r3, [r7, #68]	; 0x44
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	613b      	str	r3, [r7, #16]
   return(result);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e12:	bf00      	nop
 8007e14:	3754      	adds	r7, #84	; 0x54
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
	...

08007e20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007e24:	4904      	ldr	r1, [pc, #16]	; (8007e38 <MX_FATFS_Init+0x18>)
 8007e26:	4805      	ldr	r0, [pc, #20]	; (8007e3c <MX_FATFS_Init+0x1c>)
 8007e28:	f004 fb6c 	bl	800c504 <FATFS_LinkDriver>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <MX_FATFS_Init+0x20>)
 8007e32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007e34:	bf00      	nop
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	200035a0 	.word	0x200035a0
 8007e3c:	20000020 	.word	0x20000020
 8007e40:	2000359c 	.word	0x2000359c

08007e44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7f8 fbc1 	bl	80005e8 <SD_disk_initialize>
 8007e66:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7f8 fc99 	bl	80007b4 <SD_disk_status>
 8007e82:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007e9c:	7bf8      	ldrb	r0, [r7, #15]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	f7f8 fc9c 	bl	80007e0 <SD_disk_read>
 8007ea8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007ec2:	7bf8      	ldrb	r0, [r7, #15]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	f7f8 fcf3 	bl	80008b4 <SD_disk_write>
 8007ece:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	603a      	str	r2, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007ee8:	79b9      	ldrb	r1, [r7, #6]
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f8 fd64 	bl	80009bc <SD_disk_ioctl>
 8007ef4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	4a08      	ldr	r2, [pc, #32]	; (8007f30 <disk_status+0x30>)
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	79fa      	ldrb	r2, [r7, #7]
 8007f18:	4905      	ldr	r1, [pc, #20]	; (8007f30 <disk_status+0x30>)
 8007f1a:	440a      	add	r2, r1
 8007f1c:	7a12      	ldrb	r2, [r2, #8]
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4798      	blx	r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	200037c4 	.word	0x200037c4

08007f34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	4a0d      	ldr	r2, [pc, #52]	; (8007f7c <disk_initialize+0x48>)
 8007f46:	5cd3      	ldrb	r3, [r2, r3]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d111      	bne.n	8007f70 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	4a0b      	ldr	r2, [pc, #44]	; (8007f7c <disk_initialize+0x48>)
 8007f50:	2101      	movs	r1, #1
 8007f52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	4a09      	ldr	r2, [pc, #36]	; (8007f7c <disk_initialize+0x48>)
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	79fa      	ldrb	r2, [r7, #7]
 8007f62:	4906      	ldr	r1, [pc, #24]	; (8007f7c <disk_initialize+0x48>)
 8007f64:	440a      	add	r2, r1
 8007f66:	7a12      	ldrb	r2, [r2, #8]
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4798      	blx	r3
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200037c4 	.word	0x200037c4

08007f80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	607a      	str	r2, [r7, #4]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <disk_read+0x3c>)
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	689c      	ldr	r4, [r3, #8]
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4a07      	ldr	r2, [pc, #28]	; (8007fbc <disk_read+0x3c>)
 8007fa0:	4413      	add	r3, r2
 8007fa2:	7a18      	ldrb	r0, [r3, #8]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	47a0      	blx	r4
 8007fac:	4603      	mov	r3, r0
 8007fae:	75fb      	strb	r3, [r7, #23]
  return res;
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd90      	pop	{r4, r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	200037c4 	.word	0x200037c4

08007fc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	4a0a      	ldr	r2, [pc, #40]	; (8007ffc <disk_write+0x3c>)
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	68dc      	ldr	r4, [r3, #12]
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	4a07      	ldr	r2, [pc, #28]	; (8007ffc <disk_write+0x3c>)
 8007fe0:	4413      	add	r3, r2
 8007fe2:	7a18      	ldrb	r0, [r3, #8]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	68b9      	ldr	r1, [r7, #8]
 8007fea:	47a0      	blx	r4
 8007fec:	4603      	mov	r3, r0
 8007fee:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd90      	pop	{r4, r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200037c4 	.word	0x200037c4

08008000 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	603a      	str	r2, [r7, #0]
 800800a:	71fb      	strb	r3, [r7, #7]
 800800c:	460b      	mov	r3, r1
 800800e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	4a09      	ldr	r2, [pc, #36]	; (8008038 <disk_ioctl+0x38>)
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	79fa      	ldrb	r2, [r7, #7]
 800801e:	4906      	ldr	r1, [pc, #24]	; (8008038 <disk_ioctl+0x38>)
 8008020:	440a      	add	r2, r1
 8008022:	7a10      	ldrb	r0, [r2, #8]
 8008024:	79b9      	ldrb	r1, [r7, #6]
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	4798      	blx	r3
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]
  return res;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	200037c4 	.word	0x200037c4

0800803c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008050:	e007      	b.n	8008062 <mem_cpy+0x26>
		*d++ = *s++;
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	1c53      	adds	r3, r2, #1
 8008056:	613b      	str	r3, [r7, #16]
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	1c59      	adds	r1, r3, #1
 800805c:	6179      	str	r1, [r7, #20]
 800805e:	7812      	ldrb	r2, [r2, #0]
 8008060:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	1e5a      	subs	r2, r3, #1
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f2      	bne.n	8008052 <mem_cpy+0x16>
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800807a:	b480      	push	{r7}
 800807c:	b087      	sub	sp, #28
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800808a:	e005      	b.n	8008098 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	617a      	str	r2, [r7, #20]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	1e5a      	subs	r2, r3, #1
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1f4      	bne.n	800808c <mem_set+0x12>
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80080b0:	b480      	push	{r7}
 80080b2:	b089      	sub	sp, #36	; 0x24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	61fb      	str	r3, [r7, #28]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80080c8:	bf00      	nop
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	1e5a      	subs	r2, r3, #1
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00d      	beq.n	80080f0 <mem_cmp+0x40>
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	61fa      	str	r2, [r7, #28]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	4619      	mov	r1, r3
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	61ba      	str	r2, [r7, #24]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	1acb      	subs	r3, r1, r3
 80080e8:	617b      	str	r3, [r7, #20]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0ec      	beq.n	80080ca <mem_cmp+0x1a>
	return r;
 80080f0:	697b      	ldr	r3, [r7, #20]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3724      	adds	r7, #36	; 0x24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008108:	e002      	b.n	8008110 <chk_chr+0x12>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3301      	adds	r3, #1
 800810e:	607b      	str	r3, [r7, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <chk_chr+0x26>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	4293      	cmp	r3, r2
 8008122:	d1f2      	bne.n	800810a <chk_chr+0xc>
	return *str;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	781b      	ldrb	r3, [r3, #0]
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800813e:	2300      	movs	r3, #0
 8008140:	60bb      	str	r3, [r7, #8]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e03b      	b.n	80081c0 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8008148:	4931      	ldr	r1, [pc, #196]	; (8008210 <chk_lock+0xdc>)
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4613      	mov	r3, r2
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d02c      	beq.n	80081b6 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800815c:	492c      	ldr	r1, [pc, #176]	; (8008210 <chk_lock+0xdc>)
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4613      	mov	r3, r2
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d120      	bne.n	80081ba <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8008178:	4925      	ldr	r1, [pc, #148]	; (8008210 <chk_lock+0xdc>)
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4613      	mov	r3, r2
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	3304      	adds	r3, #4
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008190:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008192:	429a      	cmp	r2, r3
 8008194:	d111      	bne.n	80081ba <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8008196:	491e      	ldr	r1, [pc, #120]	; (8008210 <chk_lock+0xdc>)
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4613      	mov	r3, r2
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	440b      	add	r3, r1
 80081a4:	3308      	adds	r3, #8
 80081a6:	881a      	ldrh	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ae:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d102      	bne.n	80081ba <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80081b4:	e007      	b.n	80081c6 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80081b6:	2301      	movs	r3, #1
 80081b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d9c0      	bls.n	8008148 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d109      	bne.n	80081e0 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <chk_lock+0xa4>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d101      	bne.n	80081dc <chk_lock+0xa8>
 80081d8:	2300      	movs	r3, #0
 80081da:	e013      	b.n	8008204 <chk_lock+0xd0>
 80081dc:	2312      	movs	r3, #18
 80081de:	e011      	b.n	8008204 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10b      	bne.n	80081fe <chk_lock+0xca>
 80081e6:	490a      	ldr	r1, [pc, #40]	; (8008210 <chk_lock+0xdc>)
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	4613      	mov	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	330a      	adds	r3, #10
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fc:	d101      	bne.n	8008202 <chk_lock+0xce>
 80081fe:	2310      	movs	r3, #16
 8008200:	e000      	b.n	8008204 <chk_lock+0xd0>
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	200035ac 	.word	0x200035ac

08008214 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800821a:	2300      	movs	r3, #0
 800821c:	607b      	str	r3, [r7, #4]
 800821e:	e002      	b.n	8008226 <enq_lock+0x12>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	3301      	adds	r3, #1
 8008224:	607b      	str	r3, [r7, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d809      	bhi.n	8008240 <enq_lock+0x2c>
 800822c:	490a      	ldr	r1, [pc, #40]	; (8008258 <enq_lock+0x44>)
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1ef      	bne.n	8008220 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b02      	cmp	r3, #2
 8008244:	bf14      	ite	ne
 8008246:	2301      	movne	r3, #1
 8008248:	2300      	moveq	r3, #0
 800824a:	b2db      	uxtb	r3, r3
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	200035ac 	.word	0x200035ac

0800825c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	e02e      	b.n	80082ca <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800826c:	4959      	ldr	r1, [pc, #356]	; (80083d4 <inc_lock+0x178>)
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4613      	mov	r3, r2
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d11d      	bne.n	80082c4 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8008288:	4952      	ldr	r1, [pc, #328]	; (80083d4 <inc_lock+0x178>)
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4613      	mov	r3, r2
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	3304      	adds	r3, #4
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d10e      	bne.n	80082c4 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 80082a6:	494b      	ldr	r1, [pc, #300]	; (80083d4 <inc_lock+0x178>)
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4613      	mov	r3, r2
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	4413      	add	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	440b      	add	r3, r1
 80082b4:	3308      	adds	r3, #8
 80082b6:	881a      	ldrh	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082be:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d006      	beq.n	80082d2 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3301      	adds	r3, #1
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d9cd      	bls.n	800826c <inc_lock+0x10>
 80082d0:	e000      	b.n	80082d4 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80082d2:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d148      	bne.n	800836c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	e002      	b.n	80082e6 <inc_lock+0x8a>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d809      	bhi.n	8008300 <inc_lock+0xa4>
 80082ec:	4939      	ldr	r1, [pc, #228]	; (80083d4 <inc_lock+0x178>)
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4613      	mov	r3, r2
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1ef      	bne.n	80082e0 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d101      	bne.n	800830a <inc_lock+0xae>
 8008306:	2300      	movs	r3, #0
 8008308:	e05d      	b.n	80083c6 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008310:	6819      	ldr	r1, [r3, #0]
 8008312:	4830      	ldr	r0, [pc, #192]	; (80083d4 <inc_lock+0x178>)
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4613      	mov	r3, r2
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4403      	add	r3, r0
 8008320:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008328:	6899      	ldr	r1, [r3, #8]
 800832a:	482a      	ldr	r0, [pc, #168]	; (80083d4 <inc_lock+0x178>)
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	4613      	mov	r3, r2
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4403      	add	r3, r0
 8008338:	3304      	adds	r3, #4
 800833a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008342:	88d8      	ldrh	r0, [r3, #6]
 8008344:	4923      	ldr	r1, [pc, #140]	; (80083d4 <inc_lock+0x178>)
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4613      	mov	r3, r2
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	3308      	adds	r3, #8
 8008354:	4602      	mov	r2, r0
 8008356:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8008358:	491e      	ldr	r1, [pc, #120]	; (80083d4 <inc_lock+0x178>)
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4613      	mov	r3, r2
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	330a      	adds	r3, #10
 8008368:	2200      	movs	r2, #0
 800836a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00c      	beq.n	800838c <inc_lock+0x130>
 8008372:	4918      	ldr	r1, [pc, #96]	; (80083d4 <inc_lock+0x178>)
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4613      	mov	r3, r2
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	4413      	add	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	440b      	add	r3, r1
 8008380:	330a      	adds	r3, #10
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <inc_lock+0x130>
 8008388:	2300      	movs	r3, #0
 800838a:	e01c      	b.n	80083c6 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10b      	bne.n	80083aa <inc_lock+0x14e>
 8008392:	4910      	ldr	r1, [pc, #64]	; (80083d4 <inc_lock+0x178>)
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4613      	mov	r3, r2
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	440b      	add	r3, r1
 80083a0:	330a      	adds	r3, #10
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	3301      	adds	r3, #1
 80083a6:	b299      	uxth	r1, r3
 80083a8:	e001      	b.n	80083ae <inc_lock+0x152>
 80083aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083ae:	4809      	ldr	r0, [pc, #36]	; (80083d4 <inc_lock+0x178>)
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4613      	mov	r3, r2
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4403      	add	r3, r0
 80083bc:	330a      	adds	r3, #10
 80083be:	460a      	mov	r2, r1
 80083c0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3301      	adds	r3, #1
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	200035ac 	.word	0x200035ac

080083d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d82e      	bhi.n	800844a <dec_lock+0x72>
		n = Files[i].ctr;
 80083ec:	491b      	ldr	r1, [pc, #108]	; (800845c <dec_lock+0x84>)
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	330a      	adds	r3, #10
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008400:	89fb      	ldrh	r3, [r7, #14]
 8008402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008406:	d101      	bne.n	800840c <dec_lock+0x34>
 8008408:	2300      	movs	r3, #0
 800840a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800840c:	89fb      	ldrh	r3, [r7, #14]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <dec_lock+0x40>
 8008412:	89fb      	ldrh	r3, [r7, #14]
 8008414:	3b01      	subs	r3, #1
 8008416:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008418:	4910      	ldr	r1, [pc, #64]	; (800845c <dec_lock+0x84>)
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	4613      	mov	r3, r2
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	330a      	adds	r3, #10
 8008428:	89fa      	ldrh	r2, [r7, #14]
 800842a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800842c:	89fb      	ldrh	r3, [r7, #14]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d108      	bne.n	8008444 <dec_lock+0x6c>
 8008432:	490a      	ldr	r1, [pc, #40]	; (800845c <dec_lock+0x84>)
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	4613      	mov	r3, r2
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	440b      	add	r3, r1
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	737b      	strb	r3, [r7, #13]
 8008448:	e001      	b.n	800844e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800844a:	2302      	movs	r3, #2
 800844c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800844e:	7b7b      	ldrb	r3, [r7, #13]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	200035ac 	.word	0x200035ac

08008460 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	e016      	b.n	800849c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800846e:	4910      	ldr	r1, [pc, #64]	; (80084b0 <clear_lock+0x50>)
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4613      	mov	r3, r2
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d108      	bne.n	8008496 <clear_lock+0x36>
 8008484:	490a      	ldr	r1, [pc, #40]	; (80084b0 <clear_lock+0x50>)
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4613      	mov	r3, r2
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	440b      	add	r3, r1
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d9e5      	bls.n	800846e <clear_lock+0xe>
	}
}
 80084a2:	bf00      	nop
 80084a4:	bf00      	nop
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	200035ac 	.word	0x200035ac

080084b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c6:	791b      	ldrb	r3, [r3, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d040      	beq.n	800854e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084dc:	7858      	ldrb	r0, [r3, #1]
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	2301      	movs	r3, #1
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	f7ff fd6c 	bl	8007fc0 <disk_write>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <sync_window+0x40>
			res = FR_DISK_ERR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	73fb      	strb	r3, [r7, #15]
 80084f2:	e02c      	b.n	800854e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084fa:	2200      	movs	r2, #0
 80084fc:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	1ad2      	subs	r2, r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	429a      	cmp	r2, r3
 8008514:	d21b      	bcs.n	800854e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851c:	78db      	ldrb	r3, [r3, #3]
 800851e:	613b      	str	r3, [r7, #16]
 8008520:	e012      	b.n	8008548 <sync_window+0x94>
					wsect += fs->fsize;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4413      	add	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008536:	7858      	ldrb	r0, [r3, #1]
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	2301      	movs	r3, #1
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	f7ff fd3f 	bl	8007fc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	3b01      	subs	r3, #1
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d8e9      	bhi.n	8008522 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d01e      	beq.n	80085b2 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7ff ff9d 	bl	80084b4 <sync_window>
 800857a:	4603      	mov	r3, r0
 800857c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d116      	bne.n	80085b2 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800858a:	7858      	ldrb	r0, [r3, #1]
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	2301      	movs	r3, #1
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	f7ff fcf5 	bl	8007f80 <disk_read>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800859c:	f04f 33ff 	mov.w	r3, #4294967295
 80085a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ac:	461a      	mov	r2, r3
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff ff75 	bl	80084b4 <sync_window>
 80085ca:	4603      	mov	r3, r0
 80085cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f040 80ad 	bne.w	8008730 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b03      	cmp	r3, #3
 80085e0:	f040 8098 	bne.w	8008714 <sync_fs+0x158>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ea:	795b      	ldrb	r3, [r3, #5]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	f040 8091 	bne.w	8008714 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085fa:	895b      	ldrh	r3, [r3, #10]
 80085fc:	461a      	mov	r2, r3
 80085fe:	2100      	movs	r1, #0
 8008600:	f7ff fd3b 	bl	800807a <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2255      	movs	r2, #85	; 0x55
 8008608:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	22aa      	movs	r2, #170	; 0xaa
 8008610:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2252      	movs	r2, #82	; 0x52
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2252      	movs	r2, #82	; 0x52
 800861e:	705a      	strb	r2, [r3, #1]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2261      	movs	r2, #97	; 0x61
 8008624:	709a      	strb	r2, [r3, #2]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2241      	movs	r2, #65	; 0x41
 800862a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2272      	movs	r2, #114	; 0x72
 8008630:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2272      	movs	r2, #114	; 0x72
 8008638:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2241      	movs	r2, #65	; 0x41
 8008640:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2261      	movs	r2, #97	; 0x61
 8008648:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	b2da      	uxtb	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	b29b      	uxth	r3, r3
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	b29b      	uxth	r3, r3
 800866a:	b2da      	uxtb	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	b2da      	uxtb	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	0e1b      	lsrs	r3, r3, #24
 800868e:	b2da      	uxtb	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	0a1b      	lsrs	r3, r3, #8
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	0c1b      	lsrs	r3, r3, #16
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	0e1b      	lsrs	r3, r3, #24
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	3301      	adds	r3, #1
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086f0:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f8:	7858      	ldrb	r0, [r3, #1]
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008704:	2301      	movs	r3, #1
 8008706:	f7ff fc5b 	bl	8007fc0 <disk_write>
			fs->fsi_flag = 0;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008710:	2200      	movs	r2, #0
 8008712:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2200      	movs	r2, #0
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff fc6d 	bl	8008000 <disk_ioctl>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800872c:	2301      	movs	r3, #1
 800872e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	3b02      	subs	r3, #2
 8008748:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	3b02      	subs	r3, #2
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d301      	bcc.n	800875e <clust2sect+0x24>
 800875a:	2300      	movs	r3, #0
 800875c:	e00c      	b.n	8008778 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008764:	789b      	ldrb	r3, [r3, #2]
 8008766:	461a      	mov	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	fb03 f202 	mul.w	r2, r3, r2
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	4413      	add	r3, r2
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d906      	bls.n	80087a2 <get_fat+0x1e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d302      	bcc.n	80087a8 <get_fat+0x24>
		val = 1;	/* Internal error */
 80087a2:	2301      	movs	r3, #1
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	e0e4      	b.n	8008972 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80087a8:	f04f 33ff 	mov.w	r3, #4294967295
 80087ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	f000 8098 	beq.w	80088ec <get_fat+0x168>
 80087bc:	2b03      	cmp	r3, #3
 80087be:	f300 80ce 	bgt.w	800895e <get_fat+0x1da>
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d002      	beq.n	80087cc <get_fat+0x48>
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d05f      	beq.n	800888a <get_fat+0x106>
 80087ca:	e0c8      	b.n	800895e <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4413      	add	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e0:	6a1a      	ldr	r2, [r3, #32]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e8:	895b      	ldrh	r3, [r3, #10]
 80087ea:	4619      	mov	r1, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80087f2:	4413      	add	r3, r2
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff feae 	bl	8008558 <move_window>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 80b0 	bne.w	8008964 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	60fa      	str	r2, [r7, #12]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008810:	8952      	ldrh	r2, [r2, #10]
 8008812:	fbb3 f1f2 	udiv	r1, r3, r2
 8008816:	fb01 f202 	mul.w	r2, r1, r2
 800881a:	1a9b      	subs	r3, r3, r2
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	5cd3      	ldrb	r3, [r2, r3]
 8008820:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008828:	6a1a      	ldr	r2, [r3, #32]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008830:	895b      	ldrh	r3, [r3, #10]
 8008832:	4619      	mov	r1, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	fbb3 f3f1 	udiv	r3, r3, r1
 800883a:	4413      	add	r3, r2
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fe8a 	bl	8008558 <move_window>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	f040 808e 	bne.w	8008968 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008852:	895b      	ldrh	r3, [r3, #10]
 8008854:	461a      	mov	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	fbb3 f1f2 	udiv	r1, r3, r2
 800885c:	fb01 f202 	mul.w	r2, r1, r2
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	5cd3      	ldrb	r3, [r2, r3]
 8008866:	021b      	lsls	r3, r3, #8
 8008868:	461a      	mov	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	4313      	orrs	r3, r2
 800886e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <get_fat+0xfc>
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	091b      	lsrs	r3, r3, #4
 800887e:	e002      	b.n	8008886 <get_fat+0x102>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008886:	617b      	str	r3, [r7, #20]
			break;
 8008888:	e073      	b.n	8008972 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008890:	6a1a      	ldr	r2, [r3, #32]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008898:	895b      	ldrh	r3, [r3, #10]
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	b29b      	uxth	r3, r3
 800889e:	4619      	mov	r1, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80088a6:	4413      	add	r3, r2
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fe54 	bl	8008558 <move_window>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d15a      	bne.n	800896c <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088c0:	8952      	ldrh	r2, [r2, #10]
 80088c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80088c6:	fb01 f202 	mul.w	r2, r1, r2
 80088ca:	1a9b      	subs	r3, r3, r2
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	4413      	add	r3, r2
 80088d0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	3301      	adds	r3, #1
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	b21a      	sxth	r2, r3
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	b21b      	sxth	r3, r3
 80088e2:	4313      	orrs	r3, r2
 80088e4:	b21b      	sxth	r3, r3
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	617b      	str	r3, [r7, #20]
			break;
 80088ea:	e042      	b.n	8008972 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f2:	6a1a      	ldr	r2, [r3, #32]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fa:	895b      	ldrh	r3, [r3, #10]
 80088fc:	089b      	lsrs	r3, r3, #2
 80088fe:	b29b      	uxth	r3, r3
 8008900:	4619      	mov	r1, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	fbb3 f3f1 	udiv	r3, r3, r1
 8008908:	4413      	add	r3, r2
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff fe23 	bl	8008558 <move_window>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d12b      	bne.n	8008970 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008922:	8952      	ldrh	r2, [r2, #10]
 8008924:	fbb3 f1f2 	udiv	r1, r3, r2
 8008928:	fb01 f202 	mul.w	r2, r1, r2
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	4413      	add	r3, r2
 8008932:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3303      	adds	r3, #3
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	061a      	lsls	r2, r3, #24
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	3302      	adds	r3, #2
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	4313      	orrs	r3, r2
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	3201      	adds	r2, #1
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	0212      	lsls	r2, r2, #8
 800894e:	4313      	orrs	r3, r2
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	7812      	ldrb	r2, [r2, #0]
 8008954:	4313      	orrs	r3, r2
 8008956:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800895a:	617b      	str	r3, [r7, #20]
			break;
 800895c:	e009      	b.n	8008972 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800895e:	2301      	movs	r3, #1
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	e006      	b.n	8008972 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008964:	bf00      	nop
 8008966:	e004      	b.n	8008972 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008968:	bf00      	nop
 800896a:	e002      	b.n	8008972 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800896c:	bf00      	nop
 800896e:	e000      	b.n	8008972 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008970:	bf00      	nop
		}
	}

	return val;
 8008972:	697b      	ldr	r3, [r7, #20]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d906      	bls.n	800899c <put_fat+0x20>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	429a      	cmp	r2, r3
 800899a:	d302      	bcc.n	80089a2 <put_fat+0x26>
		res = FR_INT_ERR;
 800899c:	2302      	movs	r3, #2
 800899e:	77fb      	strb	r3, [r7, #31]
 80089a0:	e13a      	b.n	8008c18 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	f000 80d0 	beq.w	8008b50 <put_fat+0x1d4>
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	f300 8127 	bgt.w	8008c04 <put_fat+0x288>
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d003      	beq.n	80089c2 <put_fat+0x46>
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	f000 808f 	beq.w	8008ade <put_fat+0x162>
 80089c0:	e120      	b.n	8008c04 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	085b      	lsrs	r3, r3, #1
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	4413      	add	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d6:	6a1a      	ldr	r2, [r3, #32]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089de:	895b      	ldrh	r3, [r3, #10]
 80089e0:	4619      	mov	r1, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80089e8:	4413      	add	r3, r2
 80089ea:	4619      	mov	r1, r3
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f7ff fdb3 	bl	8008558 <move_window>
 80089f2:	4603      	mov	r3, r0
 80089f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089f6:	7ffb      	ldrb	r3, [r7, #31]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f040 8106 	bne.w	8008c0a <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	617a      	str	r2, [r7, #20]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a0a:	8952      	ldrh	r2, [r2, #10]
 8008a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a10:	fb01 f202 	mul.w	r2, r1, r2
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00d      	beq.n	8008a42 <put_fat+0xc6>
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	b25b      	sxtb	r3, r3
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	b25a      	sxtb	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	b25b      	sxtb	r3, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	b25b      	sxtb	r3, r3
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	e001      	b.n	8008a46 <put_fat+0xca>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a50:	2201      	movs	r2, #1
 8008a52:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5a:	6a1a      	ldr	r2, [r3, #32]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a62:	895b      	ldrh	r3, [r3, #10]
 8008a64:	4619      	mov	r1, r3
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a6c:	4413      	add	r3, r2
 8008a6e:	4619      	mov	r1, r3
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7ff fd71 	bl	8008558 <move_window>
 8008a76:	4603      	mov	r3, r0
 8008a78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a7a:	7ffb      	ldrb	r3, [r7, #31]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 80c6 	bne.w	8008c0e <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a88:	895b      	ldrh	r3, [r3, #10]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a92:	fb01 f202 	mul.w	r2, r1, r2
 8008a96:	1a9b      	subs	r3, r3, r2
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <put_fat+0x134>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	091b      	lsrs	r3, r3, #4
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	e00e      	b.n	8008ace <put_fat+0x152>
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	b25b      	sxtb	r3, r3
 8008ab6:	f023 030f 	bic.w	r3, r3, #15
 8008aba:	b25a      	sxtb	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	0a1b      	lsrs	r3, r3, #8
 8008ac0:	b25b      	sxtb	r3, r3
 8008ac2:	f003 030f 	and.w	r3, r3, #15
 8008ac6:	b25b      	sxtb	r3, r3
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	b25b      	sxtb	r3, r3
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad8:	2201      	movs	r2, #1
 8008ada:	711a      	strb	r2, [r3, #4]
			break;
 8008adc:	e09c      	b.n	8008c18 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae4:	6a1a      	ldr	r2, [r3, #32]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aec:	895b      	ldrh	r3, [r3, #10]
 8008aee:	085b      	lsrs	r3, r3, #1
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	4619      	mov	r1, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008afa:	4413      	add	r3, r2
 8008afc:	4619      	mov	r1, r3
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f7ff fd2a 	bl	8008558 <move_window>
 8008b04:	4603      	mov	r3, r0
 8008b06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b08:	7ffb      	ldrb	r3, [r7, #31]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f040 8081 	bne.w	8008c12 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b1a:	8952      	ldrh	r2, [r2, #10]
 8008b1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b20:	fb01 f202 	mul.w	r2, r1, r2
 8008b24:	1a9b      	subs	r3, r3, r2
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4413      	add	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	701a      	strb	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	0a1b      	lsrs	r3, r3, #8
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	b2d2      	uxtb	r2, r2
 8008b42:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	711a      	strb	r2, [r3, #4]
			break;
 8008b4e:	e063      	b.n	8008c18 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b56:	6a1a      	ldr	r2, [r3, #32]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5e:	895b      	ldrh	r3, [r3, #10]
 8008b60:	089b      	lsrs	r3, r3, #2
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	4619      	mov	r1, r3
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b6c:	4413      	add	r3, r2
 8008b6e:	4619      	mov	r1, r3
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f7ff fcf1 	bl	8008558 <move_window>
 8008b76:	4603      	mov	r3, r0
 8008b78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b7a:	7ffb      	ldrb	r3, [r7, #31]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d14a      	bne.n	8008c16 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b8a:	8952      	ldrh	r2, [r2, #10]
 8008b8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b90:	fb01 f202 	mul.w	r2, r1, r2
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4413      	add	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	3303      	adds	r3, #3
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	061a      	lsls	r2, r3, #24
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	3302      	adds	r3, #2
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	041b      	lsls	r3, r3, #16
 8008bac:	4313      	orrs	r3, r2
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	3201      	adds	r2, #1
 8008bb2:	7812      	ldrb	r2, [r2, #0]
 8008bb4:	0212      	lsls	r2, r2, #8
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	7812      	ldrb	r2, [r2, #0]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	701a      	strb	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	0a1b      	lsrs	r3, r3, #8
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	701a      	strb	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	0c1a      	lsrs	r2, r3, #16
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	3302      	adds	r3, #2
 8008be8:	b2d2      	uxtb	r2, r2
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	0e1a      	lsrs	r2, r3, #24
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	3303      	adds	r3, #3
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfe:	2201      	movs	r2, #1
 8008c00:	711a      	strb	r2, [r3, #4]
			break;
 8008c02:	e009      	b.n	8008c18 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8008c04:	2302      	movs	r3, #2
 8008c06:	77fb      	strb	r3, [r7, #31]
 8008c08:	e006      	b.n	8008c18 <put_fat+0x29c>
			if (res != FR_OK) break;
 8008c0a:	bf00      	nop
 8008c0c:	e004      	b.n	8008c18 <put_fat+0x29c>
			if (res != FR_OK) break;
 8008c0e:	bf00      	nop
 8008c10:	e002      	b.n	8008c18 <put_fat+0x29c>
			if (res != FR_OK) break;
 8008c12:	bf00      	nop
 8008c14:	e000      	b.n	8008c18 <put_fat+0x29c>
			if (res != FR_OK) break;
 8008c16:	bf00      	nop
		}
	}

	return res;
 8008c18:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b084      	sub	sp, #16
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d906      	bls.n	8008c40 <remove_chain+0x1e>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d302      	bcc.n	8008c46 <remove_chain+0x24>
		res = FR_INT_ERR;
 8008c40:	2302      	movs	r3, #2
 8008c42:	73fb      	strb	r3, [r7, #15]
 8008c44:	e049      	b.n	8008cda <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008c4a:	e03b      	b.n	8008cc4 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff fd98 	bl	8008784 <get_fat>
 8008c54:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d03b      	beq.n	8008cd4 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d102      	bne.n	8008c68 <remove_chain+0x46>
 8008c62:	2302      	movs	r3, #2
 8008c64:	73fb      	strb	r3, [r7, #15]
 8008c66:	e038      	b.n	8008cda <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6e:	d102      	bne.n	8008c76 <remove_chain+0x54>
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
 8008c74:	e031      	b.n	8008cda <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8008c76:	2200      	movs	r2, #0
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff fe7e 	bl	800897c <put_fat>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d126      	bne.n	8008cd8 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c96:	d013      	beq.n	8008cc0 <remove_chain+0x9e>
				fs->free_clust++;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ca8:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb0:	795b      	ldrb	r3, [r3, #5]
 8008cb2:	f043 0301 	orr.w	r3, r3, #1
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cbe:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d3bc      	bcc.n	8008c4c <remove_chain+0x2a>
 8008cd2:	e002      	b.n	8008cda <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8008cd4:	bf00      	nop
 8008cd6:	e000      	b.n	8008cda <remove_chain+0xb8>
			if (res != FR_OK) break;
 8008cd8:	bf00      	nop
		}
	}

	return res;
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d111      	bne.n	8008d18 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d006      	beq.n	8008d12 <create_chain+0x2e>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d31d      	bcc.n	8008d4e <create_chain+0x6a>
 8008d12:	2301      	movs	r3, #1
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	e01a      	b.n	8008d4e <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff fd32 	bl	8008784 <get_fat>
 8008d20:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d801      	bhi.n	8008d2c <create_chain+0x48>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e07f      	b.n	8008e2c <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d32:	d101      	bne.n	8008d38 <create_chain+0x54>
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	e079      	b.n	8008e2c <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d201      	bcs.n	8008d4a <create_chain+0x66>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	e070      	b.n	8008e2c <create_chain+0x148>
		scl = clst;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	3301      	adds	r3, #1
 8008d56:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d307      	bcc.n	8008d76 <create_chain+0x92>
			ncl = 2;
 8008d66:	2302      	movs	r3, #2
 8008d68:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d901      	bls.n	8008d76 <create_chain+0x92>
 8008d72:	2300      	movs	r3, #0
 8008d74:	e05a      	b.n	8008e2c <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8008d76:	6979      	ldr	r1, [r7, #20]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff fd03 	bl	8008784 <get_fat>
 8008d7e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00e      	beq.n	8008da4 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8c:	d002      	beq.n	8008d94 <create_chain+0xb0>
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d101      	bne.n	8008d98 <create_chain+0xb4>
			return cs;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	e049      	b.n	8008e2c <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d1d8      	bne.n	8008d52 <create_chain+0x6e>
 8008da0:	2300      	movs	r3, #0
 8008da2:	e043      	b.n	8008e2c <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8008da4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8008da6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008daa:	6979      	ldr	r1, [r7, #20]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff fde5 	bl	800897c <put_fat>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d109      	bne.n	8008dd0 <create_chain+0xec>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d006      	beq.n	8008dd0 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fdd8 	bl	800897c <put_fat>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d121      	bne.n	8008e1a <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ddc:	461a      	mov	r2, r3
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	d01c      	beq.n	8008e2a <create_chain+0x146>
			fs->free_clust--;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e00:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e08:	795b      	ldrb	r3, [r3, #5]
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e16:	715a      	strb	r2, [r3, #5]
 8008e18:	e007      	b.n	8008e2a <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d102      	bne.n	8008e26 <create_chain+0x142>
 8008e20:	f04f 33ff 	mov.w	r3, #4294967295
 8008e24:	e000      	b.n	8008e28 <create_chain+0x144>
 8008e26:	2301      	movs	r3, #1
 8008e28:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8008e2a:	697b      	ldr	r3, [r7, #20]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	3304      	adds	r3, #4
 8008e48:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e56:	895b      	ldrh	r3, [r3, #10]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e66:	6812      	ldr	r2, [r2, #0]
 8008e68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e6c:	7892      	ldrb	r2, [r2, #2]
 8008e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e72:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	613a      	str	r2, [r7, #16]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <clmt_clust+0x54>
 8008e84:	2300      	movs	r3, #0
 8008e86:	e010      	b.n	8008eaa <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d307      	bcc.n	8008ea0 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e9e:	e7e9      	b.n	8008e74 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8008ea0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	4413      	add	r3, r2
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b086      	sub	sp, #24
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eca:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d009      	beq.n	8008ef0 <dir_sdi+0x3a>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d301      	bcc.n	8008ef4 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	e0aa      	b.n	800904a <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d110      	bne.n	8008f1c <dir_sdi+0x66>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d107      	bne.n	8008f1c <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d115      	bne.n	8008f4e <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f2e:	891b      	ldrh	r3, [r3, #8]
 8008f30:	461a      	mov	r2, r3
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d301      	bcc.n	8008f3c <dir_sdi+0x86>
			return FR_INT_ERR;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e086      	b.n	800904a <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	e043      	b.n	8008fd6 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f5a:	895b      	ldrh	r3, [r3, #10]
 8008f5c:	095b      	lsrs	r3, r3, #5
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	461a      	mov	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f6e:	789b      	ldrb	r3, [r3, #2]
 8008f70:	fb02 f303 	mul.w	r3, r2, r3
 8008f74:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8008f76:	e021      	b.n	8008fbc <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6979      	ldr	r1, [r7, #20]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fbfe 	bl	8008784 <get_fat>
 8008f88:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f90:	d101      	bne.n	8008f96 <dir_sdi+0xe0>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e059      	b.n	800904a <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d909      	bls.n	8008fb0 <dir_sdi+0xfa>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d301      	bcc.n	8008fb4 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e04a      	b.n	800904a <dir_sdi+0x194>
			idx -= ic;
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d2d9      	bcs.n	8008f78 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6979      	ldr	r1, [r7, #20]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fbb3 	bl	800873a <clust2sect>
 8008fd4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fdc:	461a      	mov	r2, r3
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <dir_sdi+0x136>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e02e      	b.n	800904a <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff8:	895b      	ldrh	r3, [r3, #10]
 8008ffa:	095b      	lsrs	r3, r3, #5
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	461a      	mov	r2, r3
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	fbb3 f2f2 	udiv	r2, r3, r2
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	4413      	add	r3, r2
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009010:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4618      	mov	r0, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009028:	895b      	ldrh	r3, [r3, #10]
 800902a:	095b      	lsrs	r3, r3, #5
 800902c:	b29b      	uxth	r3, r3
 800902e:	461a      	mov	r2, r3
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	fbb3 f1f2 	udiv	r1, r3, r2
 8009036:	fb01 f202 	mul.w	r2, r1, r2
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	015b      	lsls	r3, r3, #5
 800903e:	4403      	add	r3, r0
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009046:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009052:	b590      	push	{r4, r7, lr}
 8009054:	b087      	sub	sp, #28
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009062:	88db      	ldrh	r3, [r3, #6]
 8009064:	3301      	adds	r3, #1
 8009066:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	b29b      	uxth	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <dir_next+0x2a>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d101      	bne.n	8009080 <dir_next+0x2e>
		return FR_NO_FILE;
 800907c:	2304      	movs	r3, #4
 800907e:	e12e      	b.n	80092de <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800908c:	895b      	ldrh	r3, [r3, #10]
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	b29b      	uxth	r3, r3
 8009092:	461a      	mov	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	fbb3 f1f2 	udiv	r1, r3, r2
 800909a:	fb01 f202 	mul.w	r2, r1, r2
 800909e:	1a9b      	subs	r3, r3, r2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f040 80fa 	bne.w	800929a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	3301      	adds	r3, #1
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80090b6:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10d      	bne.n	80090e0 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d0:	891b      	ldrh	r3, [r3, #8]
 80090d2:	461a      	mov	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4293      	cmp	r3, r2
 80090d8:	f0c0 80df 	bcc.w	800929a <dir_next+0x248>
				return FR_NO_FILE;
 80090dc:	2304      	movs	r3, #4
 80090de:	e0fe      	b.n	80092de <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ec:	895b      	ldrh	r3, [r3, #10]
 80090ee:	095b      	lsrs	r3, r3, #5
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	461a      	mov	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009106:	7892      	ldrb	r2, [r2, #2]
 8009108:	3a01      	subs	r2, #1
 800910a:	4013      	ands	r3, r2
 800910c:	2b00      	cmp	r3, #0
 800910e:	f040 80c4 	bne.w	800929a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f7ff fb2d 	bl	8008784 <get_fat>
 800912a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d801      	bhi.n	8009136 <dir_next+0xe4>
 8009132:	2302      	movs	r3, #2
 8009134:	e0d3      	b.n	80092de <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913c:	d101      	bne.n	8009142 <dir_next+0xf0>
 800913e:	2301      	movs	r3, #1
 8009140:	e0cd      	b.n	80092de <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	429a      	cmp	r2, r3
 8009154:	f0c0 808e 	bcc.w	8009274 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <dir_next+0x110>
 800915e:	2304      	movs	r3, #4
 8009160:	e0bd      	b.n	80092de <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f7ff fdb5 	bl	8008ce4 <create_chain>
 800917a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <dir_next+0x134>
 8009182:	2307      	movs	r3, #7
 8009184:	e0ab      	b.n	80092de <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <dir_next+0x13e>
 800918c:	2302      	movs	r3, #2
 800918e:	e0a6      	b.n	80092de <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d101      	bne.n	800919c <dir_next+0x14a>
 8009198:	2301      	movs	r3, #1
 800919a:	e0a0      	b.n	80092de <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff f985 	bl	80084b4 <sync_window>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <dir_next+0x162>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e094      	b.n	80092de <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4618      	mov	r0, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ca:	895b      	ldrh	r3, [r3, #10]
 80091cc:	461a      	mov	r2, r3
 80091ce:	2100      	movs	r1, #0
 80091d0:	f7fe ff53 	bl	800807a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e2:	681c      	ldr	r4, [r3, #0]
 80091e4:	6979      	ldr	r1, [r7, #20]
 80091e6:	4610      	mov	r0, r2
 80091e8:	f7ff faa7 	bl	800873a <clust2sect>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80091f2:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80091f4:	2300      	movs	r3, #0
 80091f6:	613b      	str	r3, [r7, #16]
 80091f8:	e021      	b.n	800923e <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009206:	2201      	movs	r2, #1
 8009208:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4618      	mov	r0, r3
 8009214:	f7ff f94e 	bl	80084b4 <sync_window>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <dir_next+0x1d0>
 800921e:	2301      	movs	r3, #1
 8009220:	e05d      	b.n	80092de <dir_next+0x28c>
						dp->fs->winsect++;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800922e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009230:	3201      	adds	r2, #1
 8009232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009236:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	3301      	adds	r3, #1
 800923c:	613b      	str	r3, [r7, #16]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924a:	789b      	ldrb	r3, [r3, #2]
 800924c:	461a      	mov	r2, r3
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	4293      	cmp	r3, r2
 8009252:	d3d2      	bcc.n	80091fa <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	1acb      	subs	r3, r1, r3
 800926e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009272:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927a:	461a      	mov	r2, r3
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6979      	ldr	r1, [r7, #20]
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff fa55 	bl	800873a <clust2sect>
 8009290:	4602      	mov	r2, r0
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009298:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	b29a      	uxth	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a4:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092bc:	895b      	ldrh	r3, [r3, #10]
 80092be:	095b      	lsrs	r3, r3, #5
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	461a      	mov	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80092ca:	fb01 f202 	mul.w	r2, r1, r2
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	015b      	lsls	r3, r3, #5
 80092d2:	4403      	add	r3, r0
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092da:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	371c      	adds	r7, #28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd90      	pop	{r4, r7, pc}

080092e6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80092f0:	2100      	movs	r1, #0
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff fddf 	bl	8008eb6 <dir_sdi>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d135      	bne.n	800936e <dir_alloc+0x88>
		n = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	4619      	mov	r1, r3
 8009318:	4610      	mov	r0, r2
 800931a:	f7ff f91d 	bl	8008558 <move_window>
 800931e:	4603      	mov	r3, r0
 8009320:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d121      	bne.n	800936c <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2be5      	cmp	r3, #229	; 0xe5
 8009334:	d006      	beq.n	8009344 <dir_alloc+0x5e>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d107      	bne.n	8009354 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	3301      	adds	r3, #1
 8009348:	60bb      	str	r3, [r7, #8]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d102      	bne.n	8009358 <dir_alloc+0x72>
 8009352:	e00c      	b.n	800936e <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009354:	2300      	movs	r3, #0
 8009356:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009358:	2101      	movs	r1, #1
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff fe79 	bl	8009052 <dir_next>
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0cd      	beq.n	8009306 <dir_alloc+0x20>
 800936a:	e000      	b.n	800936e <dir_alloc+0x88>
			if (res != FR_OK) break;
 800936c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	2b04      	cmp	r3, #4
 8009372:	d101      	bne.n	8009378 <dir_alloc+0x92>
 8009374:	2307      	movs	r3, #7
 8009376:	73fb      	strb	r3, [r7, #15]
	return res;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8009382:	b480      	push	{r7}
 8009384:	b085      	sub	sp, #20
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	331b      	adds	r3, #27
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	b21a      	sxth	r2, r3
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	331a      	adds	r3, #26
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	b21b      	sxth	r3, r3
 800939e:	4313      	orrs	r3, r2
 80093a0:	b21b      	sxth	r3, r3
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d10f      	bne.n	80093d2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	3315      	adds	r3, #21
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	021b      	lsls	r3, r3, #8
 80093ba:	b21a      	sxth	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	3314      	adds	r3, #20
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	b21b      	sxth	r3, r3
 80093c4:	4313      	orrs	r3, r2
 80093c6:	b21b      	sxth	r3, r3
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	041b      	lsls	r3, r3, #16
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]

	return cl;
 80093d2:	68fb      	ldr	r3, [r7, #12]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	331a      	adds	r3, #26
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	b2d2      	uxtb	r2, r2
 80093f2:	701a      	strb	r2, [r3, #0]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	0a1b      	lsrs	r3, r3, #8
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	331b      	adds	r3, #27
 8009400:	b2d2      	uxtb	r2, r2
 8009402:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	0c1a      	lsrs	r2, r3, #16
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3314      	adds	r3, #20
 800940c:	b2d2      	uxtb	r2, r2
 800940e:	701a      	strb	r2, [r3, #0]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	0c1b      	lsrs	r3, r3, #16
 8009414:	b29b      	uxth	r3, r3
 8009416:	0a1b      	lsrs	r3, r3, #8
 8009418:	b29a      	uxth	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3315      	adds	r3, #21
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	701a      	strb	r2, [r3, #0]
}
 8009422:	bf00      	nop
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
	...

08009430 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009442:	1e5a      	subs	r2, r3, #1
 8009444:	4613      	mov	r3, r2
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4413      	add	r3, r2
 800944e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8009450:	2300      	movs	r3, #0
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	2301      	movs	r3, #1
 8009456:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8009458:	4a2b      	ldr	r2, [pc, #172]	; (8009508 <cmp_lfn+0xd8>)
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	4413      	add	r3, r2
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	3301      	adds	r3, #1
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4413      	add	r3, r2
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	b21a      	sxth	r2, r3
 800946c:	4926      	ldr	r1, [pc, #152]	; (8009508 <cmp_lfn+0xd8>)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	440b      	add	r3, r1
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	4619      	mov	r1, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	440b      	add	r3, r1
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	b21b      	sxth	r3, r3
 800947e:	4313      	orrs	r3, r2
 8009480:	b21b      	sxth	r3, r3
 8009482:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8009484:	89fb      	ldrh	r3, [r7, #14]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d019      	beq.n	80094be <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800948a:	89bb      	ldrh	r3, [r7, #12]
 800948c:	4618      	mov	r0, r3
 800948e:	f003 f885 	bl	800c59c <ff_wtoupper>
 8009492:	4603      	mov	r3, r0
 8009494:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2bfe      	cmp	r3, #254	; 0xfe
 800949a:	d80e      	bhi.n	80094ba <cmp_lfn+0x8a>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	617a      	str	r2, [r7, #20]
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	4413      	add	r3, r2
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f003 f876 	bl	800c59c <ff_wtoupper>
 80094b0:	4603      	mov	r3, r0
 80094b2:	461a      	mov	r2, r3
 80094b4:	89fb      	ldrh	r3, [r7, #14]
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d008      	beq.n	80094cc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80094ba:	2300      	movs	r3, #0
 80094bc:	e01f      	b.n	80094fe <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80094be:	89bb      	ldrh	r3, [r7, #12]
 80094c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d001      	beq.n	80094cc <cmp_lfn+0x9c>
 80094c8:	2300      	movs	r3, #0
 80094ca:	e018      	b.n	80094fe <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	3301      	adds	r3, #1
 80094d0:	613b      	str	r3, [r7, #16]
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	2b0c      	cmp	r3, #12
 80094d6:	d9bf      	bls.n	8009458 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00b      	beq.n	80094fc <cmp_lfn+0xcc>
 80094e4:	89fb      	ldrh	r3, [r7, #14]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d008      	beq.n	80094fc <cmp_lfn+0xcc>
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	4413      	add	r3, r2
 80094f2:	881b      	ldrh	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <cmp_lfn+0xcc>
		return 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	e000      	b.n	80094fe <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80094fc:	2301      	movs	r3, #1
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	0800dca0 	.word	0x0800dca0

0800950c <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800951e:	1e5a      	subs	r2, r3, #1
 8009520:	4613      	mov	r3, r2
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 800952c:	2300      	movs	r3, #0
 800952e:	613b      	str	r3, [r7, #16]
 8009530:	2301      	movs	r3, #1
 8009532:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8009534:	4a26      	ldr	r2, [pc, #152]	; (80095d0 <pick_lfn+0xc4>)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	4413      	add	r3, r2
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	3301      	adds	r3, #1
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	4413      	add	r3, r2
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	b21a      	sxth	r2, r3
 8009548:	4921      	ldr	r1, [pc, #132]	; (80095d0 <pick_lfn+0xc4>)
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	440b      	add	r3, r1
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	4619      	mov	r1, r3
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	440b      	add	r3, r1
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	b21b      	sxth	r3, r3
 800955a:	4313      	orrs	r3, r2
 800955c:	b21b      	sxth	r3, r3
 800955e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8009560:	89fb      	ldrh	r3, [r7, #14]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00f      	beq.n	8009586 <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2bfe      	cmp	r3, #254	; 0xfe
 800956a:	d901      	bls.n	8009570 <pick_lfn+0x64>
 800956c:	2300      	movs	r3, #0
 800956e:	e029      	b.n	80095c4 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009570:	89bb      	ldrh	r3, [r7, #12]
 8009572:	81fb      	strh	r3, [r7, #14]
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	617a      	str	r2, [r7, #20]
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	4413      	add	r3, r2
 8009580:	89fa      	ldrh	r2, [r7, #14]
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	e006      	b.n	8009594 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009586:	89bb      	ldrh	r3, [r7, #12]
 8009588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800958c:	4293      	cmp	r3, r2
 800958e:	d001      	beq.n	8009594 <pick_lfn+0x88>
 8009590:	2300      	movs	r3, #0
 8009592:	e017      	b.n	80095c4 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	3301      	adds	r3, #1
 8009598:	613b      	str	r3, [r7, #16]
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b0c      	cmp	r3, #12
 800959e:	d9c9      	bls.n	8009534 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00a      	beq.n	80095c2 <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2bfe      	cmp	r3, #254	; 0xfe
 80095b0:	d901      	bls.n	80095b6 <pick_lfn+0xaa>
 80095b2:	2300      	movs	r3, #0
 80095b4:	e006      	b.n	80095c4 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	2200      	movs	r2, #0
 80095c0:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 80095c2:	2301      	movs	r3, #1
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	0800dca0 	.word	0x0800dca0

080095d4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b089      	sub	sp, #36	; 0x24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	4611      	mov	r1, r2
 80095e0:	461a      	mov	r2, r3
 80095e2:	460b      	mov	r3, r1
 80095e4:	71fb      	strb	r3, [r7, #7]
 80095e6:	4613      	mov	r3, r2
 80095e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	330d      	adds	r3, #13
 80095ee:	79ba      	ldrb	r2, [r7, #6]
 80095f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	330b      	adds	r3, #11
 80095f6:	220f      	movs	r2, #15
 80095f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	330c      	adds	r3, #12
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	331a      	adds	r3, #26
 8009606:	2200      	movs	r2, #0
 8009608:	701a      	strb	r2, [r3, #0]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	331b      	adds	r3, #27
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	1e5a      	subs	r2, r3, #1
 8009616:	4613      	mov	r3, r2
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	82fb      	strh	r3, [r7, #22]
 8009626:	2300      	movs	r3, #0
 8009628:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800962a:	8afb      	ldrh	r3, [r7, #22]
 800962c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009630:	4293      	cmp	r3, r2
 8009632:	d007      	beq.n	8009644 <fit_lfn+0x70>
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	61fa      	str	r2, [r7, #28]
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8009644:	4a1d      	ldr	r2, [pc, #116]	; (80096bc <fit_lfn+0xe8>)
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	4413      	add	r3, r2
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	4413      	add	r3, r2
 8009652:	8afa      	ldrh	r2, [r7, #22]
 8009654:	b2d2      	uxtb	r2, r2
 8009656:	701a      	strb	r2, [r3, #0]
 8009658:	8afb      	ldrh	r3, [r7, #22]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	b299      	uxth	r1, r3
 800965e:	4a17      	ldr	r2, [pc, #92]	; (80096bc <fit_lfn+0xe8>)
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	4413      	add	r3, r2
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	3301      	adds	r3, #1
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	4413      	add	r3, r2
 800966c:	b2ca      	uxtb	r2, r1
 800966e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8009670:	8afb      	ldrh	r3, [r7, #22]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d102      	bne.n	800967c <fit_lfn+0xa8>
 8009676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800967a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	3301      	adds	r3, #1
 8009680:	61bb      	str	r3, [r7, #24]
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2b0c      	cmp	r3, #12
 8009686:	d9d0      	bls.n	800962a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8009688:	8afb      	ldrh	r3, [r7, #22]
 800968a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800968e:	4293      	cmp	r3, r2
 8009690:	d006      	beq.n	80096a0 <fit_lfn+0xcc>
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4413      	add	r3, r2
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d103      	bne.n	80096a8 <fit_lfn+0xd4>
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	79fa      	ldrb	r2, [r7, #7]
 80096ac:	701a      	strb	r2, [r3, #0]
}
 80096ae:	bf00      	nop
 80096b0:	3724      	adds	r7, #36	; 0x24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	0800dca0 	.word	0x0800dca0

080096c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08c      	sub	sp, #48	; 0x30
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80096ce:	220b      	movs	r2, #11
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f7fe fcb2 	bl	800803c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b05      	cmp	r3, #5
 80096dc:	d92b      	bls.n	8009736 <gen_numname+0x76>
		sr = seq;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80096e2:	e022      	b.n	800972a <gen_numname+0x6a>
			wc = *lfn++;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	1c9a      	adds	r2, r3, #2
 80096e8:	607a      	str	r2, [r7, #4]
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80096ee:	2300      	movs	r3, #0
 80096f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80096f2:	e017      	b.n	8009724 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	005a      	lsls	r2, r3, #1
 80096f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	4413      	add	r3, r2
 8009700:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009702:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d005      	beq.n	800971e <gen_numname+0x5e>
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009718:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800971c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	3301      	adds	r3, #1
 8009722:	62bb      	str	r3, [r7, #40]	; 0x28
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	2b0f      	cmp	r3, #15
 8009728:	d9e4      	bls.n	80096f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1d8      	bne.n	80096e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009736:	2307      	movs	r3, #7
 8009738:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	f003 030f 	and.w	r3, r3, #15
 8009742:	b2db      	uxtb	r3, r3
 8009744:	3330      	adds	r3, #48	; 0x30
 8009746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800974a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800974e:	2b39      	cmp	r3, #57	; 0x39
 8009750:	d904      	bls.n	800975c <gen_numname+0x9c>
 8009752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009756:	3307      	adds	r3, #7
 8009758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	1e5a      	subs	r2, r3, #1
 8009760:	62ba      	str	r2, [r7, #40]	; 0x28
 8009762:	3330      	adds	r3, #48	; 0x30
 8009764:	443b      	add	r3, r7
 8009766:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800976a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	091b      	lsrs	r3, r3, #4
 8009772:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1df      	bne.n	800973a <gen_numname+0x7a>
	ns[i] = '~';
 800977a:	f107 0214 	add.w	r2, r7, #20
 800977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009780:	4413      	add	r3, r2
 8009782:	227e      	movs	r2, #126	; 0x7e
 8009784:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009786:	2300      	movs	r3, #0
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
 800978a:	e002      	b.n	8009792 <gen_numname+0xd2>
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	3301      	adds	r3, #1
 8009790:	627b      	str	r3, [r7, #36]	; 0x24
 8009792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	429a      	cmp	r2, r3
 8009798:	d205      	bcs.n	80097a6 <gen_numname+0xe6>
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	4413      	add	r3, r2
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	d1f2      	bne.n	800978c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	2b07      	cmp	r3, #7
 80097aa:	d807      	bhi.n	80097bc <gen_numname+0xfc>
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	62ba      	str	r2, [r7, #40]	; 0x28
 80097b2:	3330      	adds	r3, #48	; 0x30
 80097b4:	443b      	add	r3, r7
 80097b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80097ba:	e000      	b.n	80097be <gen_numname+0xfe>
 80097bc:	2120      	movs	r1, #32
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	627a      	str	r2, [r7, #36]	; 0x24
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4413      	add	r3, r2
 80097c8:	460a      	mov	r2, r1
 80097ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	2b07      	cmp	r3, #7
 80097d0:	d9e9      	bls.n	80097a6 <gen_numname+0xe6>
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	3730      	adds	r7, #48	; 0x30
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80097e8:	230b      	movs	r3, #11
 80097ea:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	0852      	lsrs	r2, r2, #1
 80097f2:	01db      	lsls	r3, r3, #7
 80097f4:	4313      	orrs	r3, r2
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	1c59      	adds	r1, r3, #1
 80097fc:	6079      	str	r1, [r7, #4]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	4413      	add	r3, r2
 8009802:	73fb      	strb	r3, [r7, #15]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	3b01      	subs	r3, #1
 8009808:	60bb      	str	r3, [r7, #8]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1ed      	bne.n	80097ec <sum_sfn+0x10>
	return sum;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b086      	sub	sp, #24
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009826:	2100      	movs	r1, #0
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff fb44 	bl	8008eb6 <dir_sdi>
 800982e:	4603      	mov	r3, r0
 8009830:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <dir_find+0x1e>
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	e0b8      	b.n	80099ae <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800983c:	23ff      	movs	r3, #255	; 0xff
 800983e:	753b      	strb	r3, [r7, #20]
 8009840:	7d3b      	ldrb	r3, [r7, #20]
 8009842:	757b      	strb	r3, [r7, #21]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800984a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800984e:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	4619      	mov	r1, r3
 8009862:	4610      	mov	r0, r2
 8009864:	f7fe fe78 	bl	8008558 <move_window>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f040 8097 	bne.w	80099a2 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009884:	7dbb      	ldrb	r3, [r7, #22]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d102      	bne.n	8009890 <dir_find+0x72>
 800988a:	2304      	movs	r3, #4
 800988c:	75fb      	strb	r3, [r7, #23]
 800988e:	e08d      	b.n	80099ac <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	330b      	adds	r3, #11
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800989a:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800989c:	7dbb      	ldrb	r3, [r7, #22]
 800989e:	2be5      	cmp	r3, #229	; 0xe5
 80098a0:	d007      	beq.n	80098b2 <dir_find+0x94>
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	f003 0308 	and.w	r3, r3, #8
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00b      	beq.n	80098c4 <dir_find+0xa6>
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	2b0f      	cmp	r3, #15
 80098b0:	d008      	beq.n	80098c4 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80098b2:	23ff      	movs	r3, #255	; 0xff
 80098b4:	757b      	strb	r3, [r7, #21]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098c0:	849a      	strh	r2, [r3, #36]	; 0x24
 80098c2:	e063      	b.n	800998c <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	2b0f      	cmp	r3, #15
 80098c8:	d137      	bne.n	800993a <dir_find+0x11c>
				if (dp->lfn) {
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d05a      	beq.n	800998c <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80098d6:	7dbb      	ldrb	r3, [r7, #22]
 80098d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d010      	beq.n	8009902 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	7b5b      	ldrb	r3, [r3, #13]
 80098e4:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80098e6:	7dbb      	ldrb	r3, [r7, #22]
 80098e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ec:	75bb      	strb	r3, [r7, #22]
 80098ee:	7dbb      	ldrb	r3, [r7, #22]
 80098f0:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098f8:	88da      	ldrh	r2, [r3, #6]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009900:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009902:	7dba      	ldrb	r2, [r7, #22]
 8009904:	7d7b      	ldrb	r3, [r7, #21]
 8009906:	429a      	cmp	r2, r3
 8009908:	d114      	bne.n	8009934 <dir_find+0x116>
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	330d      	adds	r3, #13
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	7d3a      	ldrb	r2, [r7, #20]
 8009912:	429a      	cmp	r2, r3
 8009914:	d10e      	bne.n	8009934 <dir_find+0x116>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	6939      	ldr	r1, [r7, #16]
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff fd85 	bl	8009430 <cmp_lfn>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <dir_find+0x116>
 800992c:	7d7b      	ldrb	r3, [r7, #21]
 800992e:	3b01      	subs	r3, #1
 8009930:	b2db      	uxtb	r3, r3
 8009932:	e000      	b.n	8009936 <dir_find+0x118>
 8009934:	23ff      	movs	r3, #255	; 0xff
 8009936:	757b      	strb	r3, [r7, #21]
 8009938:	e028      	b.n	800998c <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800993a:	7d7b      	ldrb	r3, [r7, #21]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d107      	bne.n	8009950 <dir_find+0x132>
 8009940:	6938      	ldr	r0, [r7, #16]
 8009942:	f7ff ff4b 	bl	80097dc <sum_sfn>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	7d3b      	ldrb	r3, [r7, #20]
 800994c:	4293      	cmp	r3, r2
 800994e:	d02a      	beq.n	80099a6 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	330b      	adds	r3, #11
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10b      	bne.n	800997c <dir_find+0x15e>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	220b      	movs	r2, #11
 800996e:	4619      	mov	r1, r3
 8009970:	6938      	ldr	r0, [r7, #16]
 8009972:	f7fe fb9d 	bl	80080b0 <mem_cmp>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d016      	beq.n	80099aa <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800997c:	23ff      	movs	r3, #255	; 0xff
 800997e:	757b      	strb	r3, [r7, #21]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800998a:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800998c:	2100      	movs	r1, #0
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff fb5f 	bl	8009052 <dir_next>
 8009994:	4603      	mov	r3, r0
 8009996:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	2b00      	cmp	r3, #0
 800999c:	f43f af58 	beq.w	8009850 <dir_find+0x32>
 80099a0:	e004      	b.n	80099ac <dir_find+0x18e>
		if (res != FR_OK) break;
 80099a2:	bf00      	nop
 80099a4:	e002      	b.n	80099ac <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80099a6:	bf00      	nop
 80099a8:	e000      	b.n	80099ac <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80099aa:	bf00      	nop

	return res;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b086      	sub	sp, #24
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80099c0:	23ff      	movs	r3, #255	; 0xff
 80099c2:	757b      	strb	r3, [r7, #21]
 80099c4:	23ff      	movs	r3, #255	; 0xff
 80099c6:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 80099c8:	2304      	movs	r3, #4
 80099ca:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 80099cc:	e08a      	b.n	8009ae4 <dir_read+0x12e>
		res = move_window(dp->fs, dp->sect);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f7fe fdb9 	bl	8008558 <move_window>
 80099e6:	4603      	mov	r3, r0
 80099e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f040 8081 	bne.w	8009af4 <dir_read+0x13e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009a02:	7dbb      	ldrb	r3, [r7, #22]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d102      	bne.n	8009a0e <dir_read+0x58>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	75fb      	strb	r3, [r7, #23]
 8009a0c:	e077      	b.n	8009afe <dir_read+0x148>
		a = dir[DIR_Attr] & AM_MASK;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	330b      	adds	r3, #11
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a18:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009a1a:	7dbb      	ldrb	r3, [r7, #22]
 8009a1c:	2be5      	cmp	r3, #229	; 0xe5
 8009a1e:	d00e      	beq.n	8009a3e <dir_read+0x88>
 8009a20:	7dbb      	ldrb	r3, [r7, #22]
 8009a22:	2b2e      	cmp	r3, #46	; 0x2e
 8009a24:	d00b      	beq.n	8009a3e <dir_read+0x88>
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	f023 0320 	bic.w	r3, r3, #32
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	bf0c      	ite	eq
 8009a30:	2301      	moveq	r3, #1
 8009a32:	2300      	movne	r3, #0
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	461a      	mov	r2, r3
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d002      	beq.n	8009a44 <dir_read+0x8e>
			ord = 0xFF;
 8009a3e:	23ff      	movs	r3, #255	; 0xff
 8009a40:	757b      	strb	r3, [r7, #21]
 8009a42:	e046      	b.n	8009ad2 <dir_read+0x11c>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	2b0f      	cmp	r3, #15
 8009a48:	d131      	bne.n	8009aae <dir_read+0xf8>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 8009a4a:	7dbb      	ldrb	r3, [r7, #22]
 8009a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d010      	beq.n	8009a76 <dir_read+0xc0>
					sum = dir[LDIR_Chksum];
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	7b5b      	ldrb	r3, [r3, #13]
 8009a58:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 8009a5a:	7dbb      	ldrb	r3, [r7, #22]
 8009a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a60:	75bb      	strb	r3, [r7, #22]
 8009a62:	7dbb      	ldrb	r3, [r7, #22]
 8009a64:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6c:	88da      	ldrh	r2, [r3, #6]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a74:	849a      	strh	r2, [r3, #36]	; 0x24
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009a76:	7dba      	ldrb	r2, [r7, #22]
 8009a78:	7d7b      	ldrb	r3, [r7, #21]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d114      	bne.n	8009aa8 <dir_read+0xf2>
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	330d      	adds	r3, #13
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	7d3a      	ldrb	r2, [r7, #20]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d10e      	bne.n	8009aa8 <dir_read+0xf2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	6939      	ldr	r1, [r7, #16]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7ff fd39 	bl	800950c <pick_lfn>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d003      	beq.n	8009aa8 <dir_read+0xf2>
 8009aa0:	7d7b      	ldrb	r3, [r7, #21]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	e000      	b.n	8009aaa <dir_read+0xf4>
 8009aa8:	23ff      	movs	r3, #255	; 0xff
 8009aaa:	757b      	strb	r3, [r7, #21]
 8009aac:	e011      	b.n	8009ad2 <dir_read+0x11c>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8009aae:	7d7b      	ldrb	r3, [r7, #21]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d107      	bne.n	8009ac4 <dir_read+0x10e>
 8009ab4:	6938      	ldr	r0, [r7, #16]
 8009ab6:	f7ff fe91 	bl	80097dc <sum_sfn>
 8009aba:	4603      	mov	r3, r0
 8009abc:	461a      	mov	r2, r3
 8009abe:	7d3b      	ldrb	r3, [r7, #20]
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d019      	beq.n	8009af8 <dir_read+0x142>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ace:	849a      	strh	r2, [r3, #36]	; 0x24
				break;
 8009ad0:	e012      	b.n	8009af8 <dir_read+0x142>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff fabc 	bl	8009052 <dir_next>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10b      	bne.n	8009afc <dir_read+0x146>
	while (dp->sect) {
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f47f af6e 	bne.w	80099ce <dir_read+0x18>
 8009af2:	e004      	b.n	8009afe <dir_read+0x148>
		if (res != FR_OK) break;
 8009af4:	bf00      	nop
 8009af6:	e002      	b.n	8009afe <dir_read+0x148>
				break;
 8009af8:	bf00      	nop
 8009afa:	e000      	b.n	8009afe <dir_read+0x148>
		if (res != FR_OK) break;
 8009afc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d005      	beq.n	8009b10 <dir_read+0x15a>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	6113      	str	r3, [r2, #16]

	return res;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08c      	sub	sp, #48	; 0x30
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	623b      	str	r3, [r7, #32]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8009b38:	f107 030c 	add.w	r3, r7, #12
 8009b3c:	220c      	movs	r2, #12
 8009b3e:	6a39      	ldr	r1, [r7, #32]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fa7b 	bl	800803c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d03b      	beq.n	8009bc8 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	330b      	adds	r3, #11
 8009b54:	2200      	movs	r2, #0
 8009b56:	701a      	strb	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5e:	461a      	mov	r2, r3
 8009b60:	2300      	movs	r3, #0
 8009b62:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8009b64:	2301      	movs	r3, #1
 8009b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b68:	e013      	b.n	8009b92 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8009b6a:	f107 010c 	add.w	r1, r7, #12
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	69fa      	ldr	r2, [r7, #28]
 8009b72:	6a38      	ldr	r0, [r7, #32]
 8009b74:	f7ff fda4 	bl	80096c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff fe50 	bl	800981e <dir_find>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009b84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8009b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8e:	3301      	adds	r3, #1
 8009b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	2b63      	cmp	r3, #99	; 0x63
 8009b96:	d9e8      	bls.n	8009b6a <dir_register+0x4e>
 8009b98:	e000      	b.n	8009b9c <dir_register+0x80>
			if (res != FR_OK) break;
 8009b9a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	2b64      	cmp	r3, #100	; 0x64
 8009ba0:	d101      	bne.n	8009ba6 <dir_register+0x8a>
 8009ba2:	2307      	movs	r3, #7
 8009ba4:	e0d8      	b.n	8009d58 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d002      	beq.n	8009bb4 <dir_register+0x98>
 8009bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bb2:	e0d1      	b.n	8009d58 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	330b      	adds	r3, #11
 8009bb8:	7dfa      	ldrb	r2, [r7, #23]
 8009bba:	701a      	strb	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d014      	beq.n	8009bfc <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bd6:	e002      	b.n	8009bde <dir_register+0xc2>
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	3301      	adds	r3, #1
 8009bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	005b      	lsls	r3, r3, #1
 8009be2:	69fa      	ldr	r2, [r7, #28]
 8009be4:	4413      	add	r3, r2
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1f5      	bne.n	8009bd8 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8009bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bee:	3319      	adds	r3, #25
 8009bf0:	4a5b      	ldr	r2, [pc, #364]	; (8009d60 <dir_register+0x244>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	089b      	lsrs	r3, r3, #2
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bfa:	e001      	b.n	8009c00 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff fb6f 	bl	80092e6 <dir_alloc>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d15b      	bne.n	8009cce <dir_register+0x1b2>
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d055      	beq.n	8009cce <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c28:	88db      	ldrh	r3, [r3, #6]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff f93f 	bl	8008eb6 <dir_sdi>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d143      	bne.n	8009cce <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fdc4 	bl	80097dc <sum_sfn>
 8009c54:	4603      	mov	r3, r0
 8009c56:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fe fc74 	bl	8008558 <move_window>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009c76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d126      	bne.n	8009ccc <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c84:	6a18      	ldr	r0, [r3, #32]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c8c:	6959      	ldr	r1, [r3, #20]
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	7efb      	ldrb	r3, [r7, #27]
 8009c94:	f7ff fc9e 	bl	80095d4 <fit_lfn>
				dp->fs->wflag = 1;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8009ca8:	2100      	movs	r1, #0
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7ff f9d1 	bl	8009052 <dir_next>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d107      	bne.n	8009cce <dir_register+0x1b2>
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1c6      	bne.n	8009c58 <dir_register+0x13c>
 8009cca:	e000      	b.n	8009cce <dir_register+0x1b2>
				if (res != FR_OK) break;
 8009ccc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8009cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d13e      	bne.n	8009d54 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4610      	mov	r0, r2
 8009cea:	f7fe fc35 	bl	8008558 <move_window>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d12b      	bne.n	8009d54 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	2220      	movs	r2, #32
 8009d06:	2100      	movs	r1, #0
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe f9b6 	bl	800807a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d14:	6958      	ldr	r0, [r3, #20]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	220b      	movs	r2, #11
 8009d20:	4619      	mov	r1, r3
 8009d22:	f7fe f98b 	bl	800803c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	330b      	adds	r3, #11
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	330c      	adds	r3, #12
 8009d3c:	f002 0218 	and.w	r2, r2, #24
 8009d40:	b2d2      	uxtb	r2, r2
 8009d42:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d50:	2201      	movs	r2, #1
 8009d52:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8009d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3730      	adds	r7, #48	; 0x30
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	4ec4ec4f 	.word	0x4ec4ec4f

08009d64 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	3309      	adds	r3, #9
 8009d72:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d071      	beq.n	8009e64 <get_fileinfo+0x100>
		dir = dp->dir;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	60fb      	str	r3, [r7, #12]
		i = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 8009d8e:	e032      	b.n	8009df6 <get_fileinfo+0x92>
			c = (TCHAR)dir[i++];
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	61fa      	str	r2, [r7, #28]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4413      	add	r3, r2
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d100      	bne.n	8009da6 <get_fileinfo+0x42>
 8009da4:	e027      	b.n	8009df6 <get_fileinfo+0x92>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	2b05      	cmp	r3, #5
 8009daa:	d101      	bne.n	8009db0 <get_fileinfo+0x4c>
 8009dac:	23e5      	movs	r3, #229	; 0xe5
 8009dae:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	2b09      	cmp	r3, #9
 8009db4:	d104      	bne.n	8009dc0 <get_fileinfo+0x5c>
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	1c5a      	adds	r2, r3, #1
 8009dba:	61ba      	str	r2, [r7, #24]
 8009dbc:	222e      	movs	r2, #46	; 0x2e
 8009dbe:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	2b40      	cmp	r3, #64	; 0x40
 8009dc4:	d912      	bls.n	8009dec <get_fileinfo+0x88>
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	2b5a      	cmp	r3, #90	; 0x5a
 8009dca:	d80f      	bhi.n	8009dec <get_fileinfo+0x88>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	330c      	adds	r3, #12
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	2b08      	cmp	r3, #8
 8009dd8:	d901      	bls.n	8009dde <get_fileinfo+0x7a>
 8009dda:	2310      	movs	r3, #16
 8009ddc:	e000      	b.n	8009de0 <get_fileinfo+0x7c>
 8009dde:	2308      	movs	r3, #8
 8009de0:	4013      	ands	r3, r2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <get_fileinfo+0x88>
				c += 0x20;			/* To lower */
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
 8009de8:	3320      	adds	r3, #32
 8009dea:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	61ba      	str	r2, [r7, #24]
 8009df2:	7dfa      	ldrb	r2, [r7, #23]
 8009df4:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	2b0a      	cmp	r3, #10
 8009dfa:	d9c9      	bls.n	8009d90 <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	7ada      	ldrb	r2, [r3, #11]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	331f      	adds	r3, #31
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	061a      	lsls	r2, r3, #24
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	331e      	adds	r3, #30
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	4313      	orrs	r3, r2
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	321d      	adds	r2, #29
 8009e1a:	7812      	ldrb	r2, [r2, #0]
 8009e1c:	0212      	lsls	r2, r2, #8
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	321c      	adds	r2, #28
 8009e24:	7812      	ldrb	r2, [r2, #0]
 8009e26:	431a      	orrs	r2, r3
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3319      	adds	r3, #25
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	b21a      	sxth	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3318      	adds	r3, #24
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	b21b      	sxth	r3, r3
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	b21b      	sxth	r3, r3
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3317      	adds	r3, #23
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	021b      	lsls	r3, r3, #8
 8009e50:	b21a      	sxth	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3316      	adds	r3, #22
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	b21b      	sxth	r3, r3
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	b21b      	sxth	r3, r3
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d047      	beq.n	8009f02 <get_fileinfo+0x19e>
		i = 0; p = fno->lfname;
 8009e72:	2300      	movs	r3, #0
 8009e74:	61fb      	str	r3, [r7, #28]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d037      	beq.n	8009ef8 <get_fileinfo+0x194>
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d033      	beq.n	8009ef8 <get_fileinfo+0x194>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d02b      	beq.n	8009ef8 <get_fileinfo+0x194>
			lfn = dp->lfn;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea6:	6a1b      	ldr	r3, [r3, #32]
 8009ea8:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8009eaa:	e01d      	b.n	8009ee8 <get_fileinfo+0x184>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009eac:	897b      	ldrh	r3, [r7, #10]
 8009eae:	2100      	movs	r1, #0
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f002 fb37 	bl	800c524 <ff_convert>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 8009eba:	897b      	ldrh	r3, [r7, #10]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d102      	bne.n	8009ec6 <get_fileinfo+0x162>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	61fb      	str	r3, [r7, #28]
 8009ec4:	e018      	b.n	8009ef8 <get_fileinfo+0x194>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d302      	bcc.n	8009ed8 <get_fileinfo+0x174>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	61fb      	str	r3, [r7, #28]
 8009ed6:	e00f      	b.n	8009ef8 <get_fileinfo+0x194>
				p[i++] = (TCHAR)w;
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	61fa      	str	r2, [r7, #28]
 8009ede:	69ba      	ldr	r2, [r7, #24]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	897a      	ldrh	r2, [r7, #10]
 8009ee4:	b2d2      	uxtb	r2, r2
 8009ee6:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	1c9a      	adds	r2, r3, #2
 8009eec:	613a      	str	r2, [r7, #16]
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	817b      	strh	r3, [r7, #10]
 8009ef2:	897b      	ldrh	r3, [r7, #10]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1d9      	bne.n	8009eac <get_fileinfo+0x148>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 8009ef8:	69ba      	ldr	r2, [r7, #24]
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	4413      	add	r3, r2
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 8009f02:	bf00      	nop
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b08a      	sub	sp, #40	; 0x28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	613b      	str	r3, [r7, #16]
 8009f1c:	e002      	b.n	8009f24 <create_name+0x18>
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	3301      	adds	r3, #1
 8009f22:	613b      	str	r3, [r7, #16]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b2f      	cmp	r3, #47	; 0x2f
 8009f2a:	d0f8      	beq.n	8009f1e <create_name+0x12>
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	2b5c      	cmp	r3, #92	; 0x5c
 8009f32:	d0f4      	beq.n	8009f1e <create_name+0x12>
	lfn = dp->lfn;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	61ba      	str	r2, [r7, #24]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	4413      	add	r3, r2
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8009f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f56:	2b1f      	cmp	r3, #31
 8009f58:	d92f      	bls.n	8009fba <create_name+0xae>
 8009f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8009f5e:	d02c      	beq.n	8009fba <create_name+0xae>
 8009f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f62:	2b5c      	cmp	r3, #92	; 0x5c
 8009f64:	d029      	beq.n	8009fba <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2bfe      	cmp	r3, #254	; 0xfe
 8009f6a:	d901      	bls.n	8009f70 <create_name+0x64>
			return FR_INVALID_NAME;
 8009f6c:	2306      	movs	r3, #6
 8009f6e:	e186      	b.n	800a27e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f78:	2101      	movs	r1, #1
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f002 fad2 	bl	800c524 <ff_convert>
 8009f80:	4603      	mov	r3, r0
 8009f82:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <create_name+0x82>
 8009f8a:	2306      	movs	r3, #6
 8009f8c:	e177      	b.n	800a27e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8009f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f90:	2b7f      	cmp	r3, #127	; 0x7f
 8009f92:	d809      	bhi.n	8009fa8 <create_name+0x9c>
 8009f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f96:	4619      	mov	r1, r3
 8009f98:	488e      	ldr	r0, [pc, #568]	; (800a1d4 <create_name+0x2c8>)
 8009f9a:	f7fe f8b0 	bl	80080fe <chk_chr>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <create_name+0x9c>
			return FR_INVALID_NAME;
 8009fa4:	2306      	movs	r3, #6
 8009fa6:	e16a      	b.n	800a27e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	617a      	str	r2, [r7, #20]
 8009fae:	005b      	lsls	r3, r3, #1
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fb6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009fb8:	e7c5      	b.n	8009f46 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	441a      	add	r2, r3
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fc6:	2b1f      	cmp	r3, #31
 8009fc8:	d801      	bhi.n	8009fce <create_name+0xc2>
 8009fca:	2304      	movs	r3, #4
 8009fcc:	e000      	b.n	8009fd0 <create_name+0xc4>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8009fd4:	e011      	b.n	8009ffa <create_name+0xee>
		w = lfn[di - 1];
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fea:	2b20      	cmp	r3, #32
 8009fec:	d002      	beq.n	8009ff4 <create_name+0xe8>
 8009fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ff2:	d106      	bne.n	800a002 <create_name+0xf6>
		di--;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1ea      	bne.n	8009fd6 <create_name+0xca>
 800a000:	e000      	b.n	800a004 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800a002:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <create_name+0x102>
 800a00a:	2306      	movs	r3, #6
 800a00c:	e137      	b.n	800a27e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	4413      	add	r3, r2
 800a016:	2200      	movs	r2, #0
 800a018:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	220b      	movs	r2, #11
 800a024:	2120      	movs	r1, #32
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe f827 	bl	800807a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a02c:	2300      	movs	r3, #0
 800a02e:	61bb      	str	r3, [r7, #24]
 800a030:	e002      	b.n	800a038 <create_name+0x12c>
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	3301      	adds	r3, #1
 800a036:	61bb      	str	r3, [r7, #24]
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	4413      	add	r3, r2
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	2b20      	cmp	r3, #32
 800a044:	d0f5      	beq.n	800a032 <create_name+0x126>
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	4413      	add	r3, r2
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	2b2e      	cmp	r3, #46	; 0x2e
 800a052:	d0ee      	beq.n	800a032 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d009      	beq.n	800a06e <create_name+0x162>
 800a05a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a05e:	f043 0303 	orr.w	r3, r3, #3
 800a062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a066:	e002      	b.n	800a06e <create_name+0x162>
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d009      	beq.n	800a088 <create_name+0x17c>
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a07a:	3b01      	subs	r3, #1
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	4413      	add	r3, r2
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	2b2e      	cmp	r3, #46	; 0x2e
 800a086:	d1ef      	bne.n	800a068 <create_name+0x15c>

	b = i = 0; ni = 8;
 800a088:	2300      	movs	r3, #0
 800a08a:	623b      	str	r3, [r7, #32]
 800a08c:	2300      	movs	r3, #0
 800a08e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a092:	2308      	movs	r3, #8
 800a094:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	61ba      	str	r2, [r7, #24]
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a0a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 8091 	beq.w	800a1d0 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a0ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0b0:	2b20      	cmp	r3, #32
 800a0b2:	d006      	beq.n	800a0c2 <create_name+0x1b6>
 800a0b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a0b8:	d10a      	bne.n	800a0d0 <create_name+0x1c4>
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d006      	beq.n	800a0d0 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800a0c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0c6:	f043 0303 	orr.w	r3, r3, #3
 800a0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0ce:	e07e      	b.n	800a1ce <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a0d0:	6a3a      	ldr	r2, [r7, #32]
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d203      	bcs.n	800a0e0 <create_name+0x1d4>
 800a0d8:	69ba      	ldr	r2, [r7, #24]
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d123      	bne.n	800a128 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	2b0b      	cmp	r3, #11
 800a0e4:	d106      	bne.n	800a0f4 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800a0e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0ea:	f043 0303 	orr.w	r3, r3, #3
 800a0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0f2:	e076      	b.n	800a1e2 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a0f4:	69ba      	ldr	r2, [r7, #24]
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d005      	beq.n	800a108 <create_name+0x1fc>
 800a0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a100:	f043 0303 	orr.w	r3, r3, #3
 800a104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d867      	bhi.n	800a1e0 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	61bb      	str	r3, [r7, #24]
 800a114:	2308      	movs	r3, #8
 800a116:	623b      	str	r3, [r7, #32]
 800a118:	230b      	movs	r3, #11
 800a11a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a11c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a126:	e052      	b.n	800a1ce <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a12a:	2b7f      	cmp	r3, #127	; 0x7f
 800a12c:	d914      	bls.n	800a158 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a12e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a130:	2100      	movs	r1, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f002 f9f6 	bl	800c524 <ff_convert>
 800a138:	4603      	mov	r3, r0
 800a13a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a13c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d004      	beq.n	800a14c <create_name+0x240>
 800a142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a144:	3b80      	subs	r3, #128	; 0x80
 800a146:	4a24      	ldr	r2, [pc, #144]	; (800a1d8 <create_name+0x2cc>)
 800a148:	5cd3      	ldrb	r3, [r2, r3]
 800a14a:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a150:	f043 0302 	orr.w	r3, r3, #2
 800a154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d007      	beq.n	800a16e <create_name+0x262>
 800a15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a160:	4619      	mov	r1, r3
 800a162:	481e      	ldr	r0, [pc, #120]	; (800a1dc <create_name+0x2d0>)
 800a164:	f7fd ffcb 	bl	80080fe <chk_chr>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d008      	beq.n	800a180 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a16e:	235f      	movs	r3, #95	; 0x5f
 800a170:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a176:	f043 0303 	orr.w	r3, r3, #3
 800a17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a17e:	e01b      	b.n	800a1b8 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a182:	2b40      	cmp	r3, #64	; 0x40
 800a184:	d909      	bls.n	800a19a <create_name+0x28e>
 800a186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a188:	2b5a      	cmp	r3, #90	; 0x5a
 800a18a:	d806      	bhi.n	800a19a <create_name+0x28e>
					b |= 2;
 800a18c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a190:	f043 0302 	orr.w	r3, r3, #2
 800a194:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a198:	e00e      	b.n	800a1b8 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a19a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a19c:	2b60      	cmp	r3, #96	; 0x60
 800a19e:	d90b      	bls.n	800a1b8 <create_name+0x2ac>
 800a1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1a2:	2b7a      	cmp	r3, #122	; 0x7a
 800a1a4:	d808      	bhi.n	800a1b8 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800a1a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a1aa:	f043 0301 	orr.w	r3, r3, #1
 800a1ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a1b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1b4:	3b20      	subs	r3, #32
 800a1b6:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1be:	699a      	ldr	r2, [r3, #24]
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	1c59      	adds	r1, r3, #1
 800a1c4:	6239      	str	r1, [r7, #32]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1ca:	b2d2      	uxtb	r2, r2
 800a1cc:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800a1ce:	e762      	b.n	800a096 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800a1d0:	bf00      	nop
 800a1d2:	e006      	b.n	800a1e2 <create_name+0x2d6>
 800a1d4:	0800dba0 	.word	0x0800dba0
 800a1d8:	0800dc20 	.word	0x0800dc20
 800a1dc:	0800dbac 	.word	0x0800dbac
			if (si > di) break;			/* No extension */
 800a1e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2be5      	cmp	r3, #229	; 0xe5
 800a1ee:	d105      	bne.n	800a1fc <create_name+0x2f0>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	2205      	movs	r2, #5
 800a1fa:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	2b08      	cmp	r3, #8
 800a200:	d104      	bne.n	800a20c <create_name+0x300>
 800a202:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800a20c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a210:	f003 030c 	and.w	r3, r3, #12
 800a214:	2b0c      	cmp	r3, #12
 800a216:	d005      	beq.n	800a224 <create_name+0x318>
 800a218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	2b03      	cmp	r3, #3
 800a222:	d105      	bne.n	800a230 <create_name+0x324>
		cf |= NS_LFN;
 800a224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a228:	f043 0302 	orr.w	r3, r3, #2
 800a22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a234:	f003 0302 	and.w	r3, r3, #2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d117      	bne.n	800a26c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a23c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	2b01      	cmp	r3, #1
 800a246:	d105      	bne.n	800a254 <create_name+0x348>
 800a248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a24c:	f043 0310 	orr.w	r3, r3, #16
 800a250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a258:	f003 030c 	and.w	r3, r3, #12
 800a25c:	2b04      	cmp	r3, #4
 800a25e:	d105      	bne.n	800a26c <create_name+0x360>
 800a260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a264:	f043 0308 	orr.w	r3, r3, #8
 800a268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	330b      	adds	r3, #11
 800a276:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a27a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a27c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3728      	adds	r7, #40	; 0x28
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop

0800a288 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b2f      	cmp	r3, #47	; 0x2f
 800a298:	d003      	beq.n	800a2a2 <follow_path+0x1a>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b5c      	cmp	r3, #92	; 0x5c
 800a2a0:	d102      	bne.n	800a2a8 <follow_path+0x20>
		path++;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b1f      	cmp	r3, #31
 800a2ba:	d80c      	bhi.n	800a2d6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800a2bc:	2100      	movs	r1, #0
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7fe fdf9 	bl	8008eb6 <dir_sdi>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	6153      	str	r3, [r2, #20]
 800a2d4:	e049      	b.n	800a36a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fe16 	bl	8009f0c <create_name>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d13a      	bne.n	800a360 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff fa97 	bl	800981e <dir_find>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	7adb      	ldrb	r3, [r3, #11]
 800a2fe:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00a      	beq.n	800a31c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d12b      	bne.n	800a364 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	f003 0304 	and.w	r3, r3, #4
 800a312:	2b00      	cmp	r3, #0
 800a314:	d126      	bne.n	800a364 <follow_path+0xdc>
 800a316:	2305      	movs	r3, #5
 800a318:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800a31a:	e023      	b.n	800a364 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	f003 0304 	and.w	r3, r3, #4
 800a322:	2b00      	cmp	r3, #0
 800a324:	d120      	bne.n	800a368 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	330b      	adds	r3, #11
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	f003 0310 	and.w	r3, r3, #16
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800a33e:	2305      	movs	r3, #5
 800a340:	73fb      	strb	r3, [r7, #15]
 800a342:	e012      	b.n	800a36a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68b9      	ldr	r1, [r7, #8]
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff f817 	bl	8009382 <ld_clust>
 800a354:	4602      	mov	r2, r0
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a35c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a35e:	e7ba      	b.n	800a2d6 <follow_path+0x4e>
			if (res != FR_OK) break;
 800a360:	bf00      	nop
 800a362:	e002      	b.n	800a36a <follow_path+0xe2>
				break;
 800a364:	bf00      	nop
 800a366:	e000      	b.n	800a36a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a368:	bf00      	nop
		}
	}

	return res;
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a37c:	f04f 33ff 	mov.w	r3, #4294967295
 800a380:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d031      	beq.n	800a3ee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	e002      	b.n	800a398 <get_ldnumber+0x24>
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	3301      	adds	r3, #1
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b1f      	cmp	r3, #31
 800a39e:	d903      	bls.n	800a3a8 <get_ldnumber+0x34>
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b3a      	cmp	r3, #58	; 0x3a
 800a3a6:	d1f4      	bne.n	800a392 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	2b3a      	cmp	r3, #58	; 0x3a
 800a3ae:	d11c      	bne.n	800a3ea <get_ldnumber+0x76>
			tp = *path;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	60fa      	str	r2, [r7, #12]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	3b30      	subs	r3, #48	; 0x30
 800a3c0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b09      	cmp	r3, #9
 800a3c6:	d80e      	bhi.n	800a3e6 <get_ldnumber+0x72>
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d10a      	bne.n	800a3e6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d107      	bne.n	800a3e6 <get_ldnumber+0x72>
					vol = (int)i;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	e002      	b.n	800a3f0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a3ee:	693b      	ldr	r3, [r7, #16]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	371c      	adds	r7, #28
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a40c:	2200      	movs	r2, #0
 800a40e:	711a      	strb	r2, [r3, #4]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a416:	461a      	mov	r2, r3
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7fe f899 	bl	8008558 <move_window>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <check_fs+0x34>
		return 3;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e04a      	b.n	800a4c6 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a436:	3301      	adds	r3, #1
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	021b      	lsls	r3, r3, #8
 800a43c:	b21a      	sxth	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a444:	b21b      	sxth	r3, r3
 800a446:	4313      	orrs	r3, r2
 800a448:	b21b      	sxth	r3, r3
 800a44a:	4a21      	ldr	r2, [pc, #132]	; (800a4d0 <check_fs+0xd4>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d001      	beq.n	800a454 <check_fs+0x58>
		return 2;
 800a450:	2302      	movs	r3, #2
 800a452:	e038      	b.n	800a4c6 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3336      	adds	r3, #54	; 0x36
 800a458:	3303      	adds	r3, #3
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	061a      	lsls	r2, r3, #24
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3336      	adds	r3, #54	; 0x36
 800a462:	3302      	adds	r3, #2
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	041b      	lsls	r3, r3, #16
 800a468:	4313      	orrs	r3, r2
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	3236      	adds	r2, #54	; 0x36
 800a46e:	3201      	adds	r2, #1
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	0212      	lsls	r2, r2, #8
 800a474:	4313      	orrs	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800a47c:	4313      	orrs	r3, r2
 800a47e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a482:	4a14      	ldr	r2, [pc, #80]	; (800a4d4 <check_fs+0xd8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d101      	bne.n	800a48c <check_fs+0x90>
		return 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	e01c      	b.n	800a4c6 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3352      	adds	r3, #82	; 0x52
 800a490:	3303      	adds	r3, #3
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	061a      	lsls	r2, r3, #24
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3352      	adds	r3, #82	; 0x52
 800a49a:	3302      	adds	r3, #2
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	3252      	adds	r2, #82	; 0x52
 800a4a6:	3201      	adds	r2, #1
 800a4a8:	7812      	ldrb	r2, [r2, #0]
 800a4aa:	0212      	lsls	r2, r2, #8
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a4ba:	4a06      	ldr	r2, [pc, #24]	; (800a4d4 <check_fs+0xd8>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d101      	bne.n	800a4c4 <check_fs+0xc8>
		return 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	e000      	b.n	800a4c6 <check_fs+0xca>

	return 1;
 800a4c4:	2301      	movs	r3, #1
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	ffffaa55 	.word	0xffffaa55
 800a4d4:	00544146 	.word	0x00544146

0800a4d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b096      	sub	sp, #88	; 0x58
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a4ec:	68b8      	ldr	r0, [r7, #8]
 800a4ee:	f7ff ff41 	bl	800a374 <get_ldnumber>
 800a4f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	da01      	bge.n	800a4fe <find_volume+0x26>
 800a4fa:	230b      	movs	r3, #11
 800a4fc:	e311      	b.n	800ab22 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a4fe:	4a98      	ldr	r2, [pc, #608]	; (800a760 <find_volume+0x288>)
 800a500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a506:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <find_volume+0x3a>
 800a50e:	230c      	movs	r3, #12
 800a510:	e307      	b.n	800ab22 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a516:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800a518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d01c      	beq.n	800a55e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a52a:	785b      	ldrb	r3, [r3, #1]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fd fce7 	bl	8007f00 <disk_status>
 800a532:	4603      	mov	r3, r0
 800a534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10c      	bne.n	800a55e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d007      	beq.n	800a55a <find_volume+0x82>
 800a54a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a54e:	f003 0304 	and.w	r3, r3, #4
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a556:	230a      	movs	r3, #10
 800a558:	e2e3      	b.n	800ab22 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800a55a:	2300      	movs	r3, #0
 800a55c:	e2e1      	b.n	800ab22 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a564:	2200      	movs	r2, #0
 800a566:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a572:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fd fcd9 	bl	8007f34 <disk_initialize>
 800a582:	4603      	mov	r3, r0
 800a584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800a588:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a594:	2303      	movs	r3, #3
 800a596:	e2c4      	b.n	800ab22 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d007      	beq.n	800a5ae <find_volume+0xd6>
 800a59e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5a2:	f003 0304 	and.w	r3, r3, #4
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800a5aa:	230a      	movs	r3, #10
 800a5ac:	e2b9      	b.n	800ab22 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b4:	7858      	ldrb	r0, [r3, #1]
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5bc:	330a      	adds	r3, #10
 800a5be:	461a      	mov	r2, r3
 800a5c0:	2102      	movs	r1, #2
 800a5c2:	f7fd fd1d 	bl	8008000 <disk_ioctl>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10d      	bne.n	800a5e8 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d2:	895b      	ldrh	r3, [r3, #10]
 800a5d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5d8:	d306      	bcc.n	800a5e8 <find_volume+0x110>
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e0:	895b      	ldrh	r3, [r3, #10]
 800a5e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e6:	d901      	bls.n	800a5ec <find_volume+0x114>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e29a      	b.n	800ab22 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a5f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5f4:	f7ff ff02 	bl	800a3fc <check_fs>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a5fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a602:	2b01      	cmp	r3, #1
 800a604:	d153      	bne.n	800a6ae <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a606:	2300      	movs	r3, #0
 800a608:	643b      	str	r3, [r7, #64]	; 0x40
 800a60a:	e028      	b.n	800a65e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800a60c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a610:	011b      	lsls	r3, r3, #4
 800a612:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a616:	4413      	add	r3, r2
 800a618:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	3304      	adds	r3, #4
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d012      	beq.n	800a64a <find_volume+0x172>
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	330b      	adds	r3, #11
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	061a      	lsls	r2, r3, #24
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	330a      	adds	r3, #10
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	041b      	lsls	r3, r3, #16
 800a634:	4313      	orrs	r3, r2
 800a636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a638:	3209      	adds	r2, #9
 800a63a:	7812      	ldrb	r2, [r2, #0]
 800a63c:	0212      	lsls	r2, r2, #8
 800a63e:	4313      	orrs	r3, r2
 800a640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a642:	3208      	adds	r2, #8
 800a644:	7812      	ldrb	r2, [r2, #0]
 800a646:	431a      	orrs	r2, r3
 800a648:	e000      	b.n	800a64c <find_volume+0x174>
 800a64a:	2200      	movs	r2, #0
 800a64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	3358      	adds	r3, #88	; 0x58
 800a652:	443b      	add	r3, r7
 800a654:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65a:	3301      	adds	r3, #1
 800a65c:	643b      	str	r3, [r7, #64]	; 0x40
 800a65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a660:	2b03      	cmp	r3, #3
 800a662:	d9d3      	bls.n	800a60c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800a664:	2300      	movs	r3, #0
 800a666:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d002      	beq.n	800a674 <find_volume+0x19c>
 800a66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a670:	3b01      	subs	r3, #1
 800a672:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800a674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	3358      	adds	r3, #88	; 0x58
 800a67a:	443b      	add	r3, r7
 800a67c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a680:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a684:	2b00      	cmp	r3, #0
 800a686:	d005      	beq.n	800a694 <find_volume+0x1bc>
 800a688:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a68a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a68c:	f7ff feb6 	bl	800a3fc <check_fs>
 800a690:	4603      	mov	r3, r0
 800a692:	e000      	b.n	800a696 <find_volume+0x1be>
 800a694:	2302      	movs	r3, #2
 800a696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a69a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d005      	beq.n	800a6ae <find_volume+0x1d6>
 800a6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	643b      	str	r3, [r7, #64]	; 0x40
 800a6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d9e2      	bls.n	800a674 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a6ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d101      	bne.n	800a6ba <find_volume+0x1e2>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e233      	b.n	800ab22 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a6ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <find_volume+0x1ee>
 800a6c2:	230d      	movs	r3, #13
 800a6c4:	e22d      	b.n	800ab22 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	7b1b      	ldrb	r3, [r3, #12]
 800a6ca:	021b      	lsls	r3, r3, #8
 800a6cc:	b21a      	sxth	r2, r3
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	7adb      	ldrb	r3, [r3, #11]
 800a6d2:	b21b      	sxth	r3, r3
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	b21a      	sxth	r2, r3
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6de:	895b      	ldrh	r3, [r3, #10]
 800a6e0:	b21b      	sxth	r3, r3
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d001      	beq.n	800a6ea <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800a6e6:	230d      	movs	r3, #13
 800a6e8:	e21b      	b.n	800ab22 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	7ddb      	ldrb	r3, [r3, #23]
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	b21a      	sxth	r2, r3
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	7d9b      	ldrb	r3, [r3, #22]
 800a6f6:	b21b      	sxth	r3, r3
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	b21b      	sxth	r3, r3
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a702:	2b00      	cmp	r3, #0
 800a704:	d112      	bne.n	800a72c <find_volume+0x254>
 800a706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a708:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a70c:	061a      	lsls	r2, r3, #24
 800a70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a710:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a714:	041b      	lsls	r3, r3, #16
 800a716:	4313      	orrs	r3, r2
 800a718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a71a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800a71e:	0212      	lsls	r2, r2, #8
 800a720:	4313      	orrs	r3, r2
 800a722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a724:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a728:	4313      	orrs	r3, r2
 800a72a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800a72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a732:	461a      	mov	r2, r3
 800a734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a736:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	7c1a      	ldrb	r2, [r3, #16]
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a742:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a74a:	78db      	ldrb	r3, [r3, #3]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d009      	beq.n	800a764 <find_volume+0x28c>
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a756:	78db      	ldrb	r3, [r3, #3]
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d003      	beq.n	800a764 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800a75c:	230d      	movs	r3, #13
 800a75e:	e1e0      	b.n	800ab22 <find_volume+0x64a>
 800a760:	200035a4 	.word	0x200035a4
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a76a:	78db      	ldrb	r3, [r3, #3]
 800a76c:	461a      	mov	r2, r3
 800a76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a770:	fb02 f303 	mul.w	r3, r2, r3
 800a774:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a778:	7b5a      	ldrb	r2, [r3, #13]
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a780:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a788:	789b      	ldrb	r3, [r3, #2]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00c      	beq.n	800a7a8 <find_volume+0x2d0>
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a794:	789b      	ldrb	r3, [r3, #2]
 800a796:	461a      	mov	r2, r3
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a79e:	789b      	ldrb	r3, [r3, #2]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800a7a8:	230d      	movs	r3, #13
 800a7aa:	e1ba      	b.n	800ab22 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	7c9b      	ldrb	r3, [r3, #18]
 800a7b0:	021b      	lsls	r3, r3, #8
 800a7b2:	b21a      	sxth	r2, r3
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	7c5b      	ldrb	r3, [r3, #17]
 800a7b8:	b21b      	sxth	r3, r3
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	b21b      	sxth	r3, r3
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7c6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ce:	891b      	ldrh	r3, [r3, #8]
 800a7d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7d6:	8952      	ldrh	r2, [r2, #10]
 800a7d8:	0952      	lsrs	r2, r2, #5
 800a7da:	b292      	uxth	r2, r2
 800a7dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7e0:	fb01 f202 	mul.w	r2, r1, r2
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800a7ec:	230d      	movs	r3, #13
 800a7ee:	e198      	b.n	800ab22 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f2:	7d1b      	ldrb	r3, [r3, #20]
 800a7f4:	021b      	lsls	r3, r3, #8
 800a7f6:	b21a      	sxth	r2, r3
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	7cdb      	ldrb	r3, [r3, #19]
 800a7fc:	b21b      	sxth	r3, r3
 800a7fe:	4313      	orrs	r3, r2
 800a800:	b21b      	sxth	r3, r3
 800a802:	b29b      	uxth	r3, r3
 800a804:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d112      	bne.n	800a832 <find_volume+0x35a>
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a812:	061a      	lsls	r2, r3, #24
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a81a:	041b      	lsls	r3, r3, #16
 800a81c:	4313      	orrs	r3, r2
 800a81e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a820:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800a824:	0212      	lsls	r2, r2, #8
 800a826:	4313      	orrs	r3, r2
 800a828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a82a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a82e:	4313      	orrs	r3, r2
 800a830:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	7bdb      	ldrb	r3, [r3, #15]
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	b21a      	sxth	r2, r3
 800a83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83c:	7b9b      	ldrb	r3, [r3, #14]
 800a83e:	b21b      	sxth	r3, r3
 800a840:	4313      	orrs	r3, r2
 800a842:	b21b      	sxth	r3, r3
 800a844:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800a846:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <find_volume+0x378>
 800a84c:	230d      	movs	r3, #13
 800a84e:	e168      	b.n	800ab22 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800a850:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a854:	4413      	add	r3, r2
 800a856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a858:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a85c:	8911      	ldrh	r1, [r2, #8]
 800a85e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a860:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a864:	8952      	ldrh	r2, [r2, #10]
 800a866:	0952      	lsrs	r2, r2, #5
 800a868:	b292      	uxth	r2, r2
 800a86a:	fbb1 f2f2 	udiv	r2, r1, r2
 800a86e:	b292      	uxth	r2, r2
 800a870:	4413      	add	r3, r2
 800a872:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	429a      	cmp	r2, r3
 800a87a:	d201      	bcs.n	800a880 <find_volume+0x3a8>
 800a87c:	230d      	movs	r3, #13
 800a87e:	e150      	b.n	800ab22 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800a880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a888:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a88c:	7892      	ldrb	r2, [r2, #2]
 800a88e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a892:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <find_volume+0x3c6>
 800a89a:	230d      	movs	r3, #13
 800a89c:	e141      	b.n	800ab22 <find_volume+0x64a>
	fmt = FS_FAT12;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d902      	bls.n	800a8b4 <find_volume+0x3dc>
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d902      	bls.n	800a8c4 <find_volume+0x3ec>
 800a8be:	2303      	movs	r3, #3
 800a8c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8ce:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8da:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a8dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8e0:	4413      	add	r3, r2
 800a8e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8e8:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800a8ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	4413      	add	r3, r2
 800a8f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8f6:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800a8f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d124      	bne.n	800a94a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a906:	891b      	ldrh	r3, [r3, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <find_volume+0x438>
 800a90c:	230d      	movs	r3, #13
 800a90e:	e108      	b.n	800ab22 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a916:	061a      	lsls	r2, r3, #24
 800a918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a91e:	041b      	lsls	r3, r3, #16
 800a920:	4313      	orrs	r3, r2
 800a922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a924:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800a928:	0212      	lsls	r2, r2, #8
 800a92a:	4313      	orrs	r3, r2
 800a92c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a92e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a932:	4313      	orrs	r3, r2
 800a934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a936:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a93a:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	647b      	str	r3, [r7, #68]	; 0x44
 800a948:	e02b      	b.n	800a9a2 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a950:	891b      	ldrh	r3, [r3, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <find_volume+0x482>
 800a956:	230d      	movs	r3, #13
 800a958:	e0e3      	b.n	800ab22 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a960:	6a1a      	ldr	r2, [r3, #32]
 800a962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a964:	4413      	add	r3, r2
 800a966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a968:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a96c:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a96e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a972:	2b02      	cmp	r3, #2
 800a974:	d105      	bne.n	800a982 <find_volume+0x4aa>
 800a976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	005b      	lsls	r3, r3, #1
 800a980:	e00e      	b.n	800a9a0 <find_volume+0x4c8>
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a988:	695a      	ldr	r2, [r3, #20]
 800a98a:	4613      	mov	r3, r2
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4413      	add	r3, r2
 800a990:	085a      	lsrs	r2, r3, #1
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800a9a0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a8:	699a      	ldr	r2, [r3, #24]
 800a9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b0:	895b      	ldrh	r3, [r3, #10]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9b6:	440b      	add	r3, r1
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9bc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a9c0:	8949      	ldrh	r1, [r1, #10]
 800a9c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d201      	bcs.n	800a9ce <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800a9ca:	230d      	movs	r3, #13
 800a9cc:	e0a9      	b.n	800ab22 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9da:	6113      	str	r3, [r2, #16]
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9ea:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f2:	2280      	movs	r2, #128	; 0x80
 800a9f4:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a9f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d17a      	bne.n	800aaf4 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa04:	021b      	lsls	r3, r3, #8
 800aa06:	b21a      	sxth	r2, r3
 800aa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa0e:	b21b      	sxth	r3, r3
 800aa10:	4313      	orrs	r3, r2
 800aa12:	b21b      	sxth	r3, r3
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d16d      	bne.n	800aaf4 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800aa18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa20:	f7fd fd9a 	bl	8008558 <move_window>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d164      	bne.n	800aaf4 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa30:	2200      	movs	r2, #0
 800aa32:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800aa3a:	021b      	lsls	r3, r3, #8
 800aa3c:	b21a      	sxth	r2, r3
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800aa44:	b21b      	sxth	r3, r3
 800aa46:	4313      	orrs	r3, r2
 800aa48:	b21b      	sxth	r3, r3
 800aa4a:	4a38      	ldr	r2, [pc, #224]	; (800ab2c <find_volume+0x654>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d151      	bne.n	800aaf4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800aa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa52:	78db      	ldrb	r3, [r3, #3]
 800aa54:	061a      	lsls	r2, r3, #24
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	789b      	ldrb	r3, [r3, #2]
 800aa5a:	041b      	lsls	r3, r3, #16
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa60:	7852      	ldrb	r2, [r2, #1]
 800aa62:	0212      	lsls	r2, r2, #8
 800aa64:	4313      	orrs	r3, r2
 800aa66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa68:	7812      	ldrb	r2, [r2, #0]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	4a30      	ldr	r2, [pc, #192]	; (800ab30 <find_volume+0x658>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d140      	bne.n	800aaf4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800aa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa74:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800aa78:	061a      	lsls	r2, r3, #24
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800aa80:	041b      	lsls	r3, r3, #16
 800aa82:	4313      	orrs	r3, r2
 800aa84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa86:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800aa8a:	0212      	lsls	r2, r2, #8
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa90:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800aa94:	4313      	orrs	r3, r2
 800aa96:	4a27      	ldr	r2, [pc, #156]	; (800ab34 <find_volume+0x65c>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d12b      	bne.n	800aaf4 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800aaa2:	061a      	lsls	r2, r3, #24
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800aaaa:	041b      	lsls	r3, r3, #16
 800aaac:	4313      	orrs	r3, r2
 800aaae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aab0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800aab4:	0212      	lsls	r2, r2, #8
 800aab6:	4313      	orrs	r3, r2
 800aab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaba:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800aabe:	4313      	orrs	r3, r2
 800aac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aac2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aac6:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaca:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800aace:	061a      	lsls	r2, r3, #24
 800aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800aad6:	041b      	lsls	r3, r3, #16
 800aad8:	4313      	orrs	r3, r2
 800aada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aadc:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800aae0:	0212      	lsls	r2, r2, #8
 800aae2:	4313      	orrs	r3, r2
 800aae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aae6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800aaea:	4313      	orrs	r3, r2
 800aaec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aaf2:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aafa:	461a      	mov	r2, r3
 800aafc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab00:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800ab02:	4b0d      	ldr	r3, [pc, #52]	; (800ab38 <find_volume+0x660>)
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	3301      	adds	r3, #1
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	4b0b      	ldr	r3, [pc, #44]	; (800ab38 <find_volume+0x660>)
 800ab0c:	801a      	strh	r2, [r3, #0]
 800ab0e:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <find_volume+0x660>)
 800ab10:	881a      	ldrh	r2, [r3, #0]
 800ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab18:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800ab1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab1c:	f7fd fca0 	bl	8008460 <clear_lock>
#endif

	return FR_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3758      	adds	r7, #88	; 0x58
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	ffffaa55 	.word	0xffffaa55
 800ab30:	41615252 	.word	0x41615252
 800ab34:	61417272 	.word	0x61417272
 800ab38:	200035a8 	.word	0x200035a8

0800ab3c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d02a      	beq.n	800aba4 <validate+0x68>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d024      	beq.n	800aba4 <validate+0x68>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d01b      	beq.n	800aba4 <validate+0x68>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab78:	88da      	ldrh	r2, [r3, #6]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab80:	889b      	ldrh	r3, [r3, #4]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d10e      	bne.n	800aba4 <validate+0x68>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab92:	785b      	ldrb	r3, [r3, #1]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fd f9b3 	bl	8007f00 <disk_status>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800aba4:	2309      	movs	r3, #9
 800aba6:	e000      	b.n	800abaa <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
	...

0800abb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b088      	sub	sp, #32
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4613      	mov	r3, r2
 800abc0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800abc6:	f107 0310 	add.w	r3, r7, #16
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff fbd2 	bl	800a374 <get_ldnumber>
 800abd0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	da01      	bge.n	800abdc <f_mount+0x28>
 800abd8:	230b      	movs	r3, #11
 800abda:	e02f      	b.n	800ac3c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800abdc:	4a19      	ldr	r2, [pc, #100]	; (800ac44 <f_mount+0x90>)
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abe4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d007      	beq.n	800abfc <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800abec:	69b8      	ldr	r0, [r7, #24]
 800abee:	f7fd fc37 	bl	8008460 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf8:	2200      	movs	r2, #0
 800abfa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac08:	2200      	movs	r2, #0
 800ac0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	490d      	ldr	r1, [pc, #52]	; (800ac44 <f_mount+0x90>)
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <f_mount+0x6e>
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d001      	beq.n	800ac26 <f_mount+0x72>
 800ac22:	2300      	movs	r3, #0
 800ac24:	e00a      	b.n	800ac3c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800ac26:	f107 0108 	add.w	r1, r7, #8
 800ac2a:	f107 030c 	add.w	r3, r7, #12
 800ac2e:	2200      	movs	r2, #0
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7ff fc51 	bl	800a4d8 <find_volume>
 800ac36:	4603      	mov	r3, r0
 800ac38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3720      	adds	r7, #32
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	200035a4 	.word	0x200035a4

0800ac48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac56:	f843 0c4c 	str.w	r0, [r3, #-76]
 800ac5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac5e:	f843 1c50 	str.w	r1, [r3, #-80]
 800ac62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac66:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ac6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac6e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <f_open+0x32>
 800ac76:	2309      	movs	r3, #9
 800ac78:	e2f7      	b.n	800b26a <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800ac7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac7e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ac82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac86:	461a      	mov	r2, r3
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800ac8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac90:	461a      	mov	r2, r3
 800ac92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac96:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ac9a:	f003 031f 	and.w	r3, r3, #31
 800ac9e:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800aca2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aca6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800acaa:	f023 0301 	bic.w	r3, r3, #1
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	f107 0118 	add.w	r1, r7, #24
 800acb4:	3910      	subs	r1, #16
 800acb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800acba:	3b18      	subs	r3, #24
 800acbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fc09 	bl	800a4d8 <find_volume>
 800acc6:	4603      	mov	r3, r0
 800acc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800accc:	f102 0217 	add.w	r2, r2, #23
 800acd0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800acd2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800acd6:	f103 0317 	add.w	r3, r3, #23
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f040 82bf 	bne.w	800b260 <f_open+0x618>
		INIT_BUF(dj);
 800ace2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ace6:	461a      	mov	r2, r3
 800ace8:	f107 0318 	add.w	r3, r7, #24
 800acec:	3b04      	subs	r3, #4
 800acee:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800acf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800acf6:	461a      	mov	r2, r3
 800acf8:	4bd4      	ldr	r3, [pc, #848]	; (800b04c <f_open+0x404>)
 800acfa:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800acfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ad02:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800ad06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ad0a:	3b18      	subs	r3, #24
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff faba 	bl	800a288 <follow_path>
 800ad14:	4603      	mov	r3, r0
 800ad16:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ad1a:	f102 0217 	add.w	r2, r2, #23
 800ad1e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800ad20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ad24:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800ad28:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ad2c:	f102 0210 	add.w	r2, r2, #16
 800ad30:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ad32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ad36:	f103 0317 	add.w	r3, r3, #23
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d126      	bne.n	800ad8e <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800ad40:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ad44:	f103 0310 	add.w	r3, r3, #16
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <f_open+0x114>
				res = FR_INVALID_NAME;
 800ad4e:	2306      	movs	r3, #6
 800ad50:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ad54:	f102 0217 	add.w	r2, r2, #23
 800ad58:	7013      	strb	r3, [r2, #0]
 800ad5a:	e018      	b.n	800ad8e <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ad60:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ad64:	f023 0301 	bic.w	r3, r3, #1
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	bf14      	ite	ne
 800ad6c:	2301      	movne	r3, #1
 800ad6e:	2300      	moveq	r3, #0
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	461a      	mov	r2, r3
 800ad74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ad78:	3b18      	subs	r3, #24
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fd f9d9 	bl	8008134 <chk_lock>
 800ad82:	4603      	mov	r3, r0
 800ad84:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ad88:	f102 0217 	add.w	r2, r2, #23
 800ad8c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ad8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ad92:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ad96:	f003 031c 	and.w	r3, r3, #28
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f000 813c 	beq.w	800b018 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800ada0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ada4:	f103 0317 	add.w	r3, r3, #23
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d02e      	beq.n	800ae0c <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800adae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800adb2:	f103 0317 	add.w	r3, r3, #23
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d112      	bne.n	800ade2 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800adbc:	f7fd fa2a 	bl	8008214 <enq_lock>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d007      	beq.n	800add6 <f_open+0x18e>
 800adc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800adca:	3b18      	subs	r3, #24
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe fea5 	bl	8009b1c <dir_register>
 800add2:	4603      	mov	r3, r0
 800add4:	e000      	b.n	800add8 <f_open+0x190>
 800add6:	2312      	movs	r3, #18
 800add8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800addc:	f102 0217 	add.w	r2, r2, #23
 800ade0:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ade2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ade6:	461a      	mov	r2, r3
 800ade8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800adec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800adf0:	f043 0308 	orr.w	r3, r3, #8
 800adf4:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800adf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800adfc:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800ae00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ae04:	f102 0210 	add.w	r2, r2, #16
 800ae08:	6013      	str	r3, [r2, #0]
 800ae0a:	e01f      	b.n	800ae4c <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ae0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ae10:	f103 0310 	add.w	r3, r3, #16
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	330b      	adds	r3, #11
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	f003 0311 	and.w	r3, r3, #17
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d006      	beq.n	800ae30 <f_open+0x1e8>
					res = FR_DENIED;
 800ae22:	2307      	movs	r3, #7
 800ae24:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ae28:	f102 0217 	add.w	r2, r2, #23
 800ae2c:	7013      	strb	r3, [r2, #0]
 800ae2e:	e00d      	b.n	800ae4c <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800ae30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae34:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ae38:	f003 0304 	and.w	r3, r3, #4
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <f_open+0x204>
						res = FR_EXIST;
 800ae40:	2308      	movs	r3, #8
 800ae42:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ae46:	f102 0217 	add.w	r2, r2, #23
 800ae4a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ae4c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ae50:	f103 0317 	add.w	r3, r3, #23
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f040 8113 	bne.w	800b082 <f_open+0x43a>
 800ae5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae60:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ae64:	f003 0308 	and.w	r3, r3, #8
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 810a 	beq.w	800b082 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800ae6e:	f7fc ffe9 	bl	8007e44 <get_fattime>
 800ae72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ae76:	f103 030c 	add.w	r3, r3, #12
 800ae7a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800ae7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ae80:	f103 0310 	add.w	r3, r3, #16
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	330e      	adds	r3, #14
 800ae88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ae8c:	f102 020c 	add.w	r2, r2, #12
 800ae90:	6812      	ldr	r2, [r2, #0]
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ae9a:	f103 030c 	add.w	r3, r3, #12
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	0a1b      	lsrs	r3, r3, #8
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aeaa:	f103 0310 	add.w	r3, r3, #16
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	330f      	adds	r3, #15
 800aeb2:	b2d2      	uxtb	r2, r2
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aeba:	f103 030c 	add.w	r3, r3, #12
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	0c1a      	lsrs	r2, r3, #16
 800aec2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aec6:	f103 0310 	add.w	r3, r3, #16
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	3310      	adds	r3, #16
 800aece:	b2d2      	uxtb	r2, r2
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aed6:	f103 030c 	add.w	r3, r3, #12
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	0e1a      	lsrs	r2, r3, #24
 800aede:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aee2:	f103 0310 	add.w	r3, r3, #16
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3311      	adds	r3, #17
 800aeea:	b2d2      	uxtb	r2, r2
 800aeec:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800aeee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aef2:	f103 0310 	add.w	r3, r3, #16
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	330b      	adds	r3, #11
 800aefa:	2200      	movs	r2, #0
 800aefc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800aefe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af02:	f103 0310 	add.w	r3, r3, #16
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	331c      	adds	r3, #28
 800af0a:	2200      	movs	r2, #0
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af12:	f103 0310 	add.w	r3, r3, #16
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	331d      	adds	r3, #29
 800af1a:	2200      	movs	r2, #0
 800af1c:	701a      	strb	r2, [r3, #0]
 800af1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af22:	f103 0310 	add.w	r3, r3, #16
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	331e      	adds	r3, #30
 800af2a:	2200      	movs	r2, #0
 800af2c:	701a      	strb	r2, [r3, #0]
 800af2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af32:	f103 0310 	add.w	r3, r3, #16
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	331f      	adds	r3, #31
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800af3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af42:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800af46:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800af4a:	f102 0210 	add.w	r2, r2, #16
 800af4e:	6811      	ldr	r1, [r2, #0]
 800af50:	4618      	mov	r0, r3
 800af52:	f7fe fa16 	bl	8009382 <ld_clust>
 800af56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af5a:	f103 0308 	add.w	r3, r3, #8
 800af5e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800af60:	2100      	movs	r1, #0
 800af62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af66:	f103 0310 	add.w	r3, r3, #16
 800af6a:	6818      	ldr	r0, [r3, #0]
 800af6c:	f7fe fa38 	bl	80093e0 <st_clust>
				dj.fs->wflag = 1;
 800af70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af74:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800af78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af7c:	2201      	movs	r2, #1
 800af7e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800af80:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af84:	f103 0308 	add.w	r3, r3, #8
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d079      	beq.n	800b082 <f_open+0x43a>
					dw = dj.fs->winsect;
 800af8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af92:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800af96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800afa0:	f102 020c 	add.w	r2, r2, #12
 800afa4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800afa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800afaa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800afae:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800afb2:	f102 0208 	add.w	r2, r2, #8
 800afb6:	6811      	ldr	r1, [r2, #0]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fd fe32 	bl	8008c22 <remove_chain>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800afc4:	f102 0217 	add.w	r2, r2, #23
 800afc8:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800afca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800afce:	f103 0317 	add.w	r3, r3, #23
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d154      	bne.n	800b082 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800afd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800afdc:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800afe0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800afe4:	f103 0308 	add.w	r3, r3, #8
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3b01      	subs	r3, #1
 800afec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aff0:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800aff2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aff6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800affa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800affe:	f102 020c 	add.w	r2, r2, #12
 800b002:	6811      	ldr	r1, [r2, #0]
 800b004:	4618      	mov	r0, r3
 800b006:	f7fd faa7 	bl	8008558 <move_window>
 800b00a:	4603      	mov	r3, r0
 800b00c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b010:	f102 0217 	add.w	r2, r2, #23
 800b014:	7013      	strb	r3, [r2, #0]
 800b016:	e034      	b.n	800b082 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b018:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b01c:	f103 0317 	add.w	r3, r3, #23
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d12d      	bne.n	800b082 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b026:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b02a:	f103 0310 	add.w	r3, r3, #16
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	330b      	adds	r3, #11
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	f003 0310 	and.w	r3, r3, #16
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d009      	beq.n	800b050 <f_open+0x408>
					res = FR_NO_FILE;
 800b03c:	2304      	movs	r3, #4
 800b03e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b042:	f102 0217 	add.w	r2, r2, #23
 800b046:	7013      	strb	r3, [r2, #0]
 800b048:	e01b      	b.n	800b082 <f_open+0x43a>
 800b04a:	bf00      	nop
 800b04c:	200035c4 	.word	0x200035c4
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b050:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b054:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d010      	beq.n	800b082 <f_open+0x43a>
 800b060:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b064:	f103 0310 	add.w	r3, r3, #16
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	330b      	adds	r3, #11
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d005      	beq.n	800b082 <f_open+0x43a>
						res = FR_DENIED;
 800b076:	2307      	movs	r3, #7
 800b078:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b07c:	f102 0217 	add.w	r2, r2, #23
 800b080:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800b082:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b086:	f103 0317 	add.w	r3, r3, #23
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d157      	bne.n	800b140 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b090:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b094:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b098:	f003 0308 	and.w	r3, r3, #8
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00a      	beq.n	800b0b6 <f_open+0x46e>
				mode |= FA__WRITTEN;
 800b0a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b0aa:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b0ae:	f043 0320 	orr.w	r3, r3, #32
 800b0b2:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b0b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b0ba:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b0c8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b0cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b0d0:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800b0d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b0d6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0de:	461a      	mov	r2, r3
 800b0e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b0e4:	f103 0310 	add.w	r3, r3, #16
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b0ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b0f0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b0f4:	f023 0301 	bic.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	bf14      	ite	ne
 800b0fc:	2301      	movne	r3, #1
 800b0fe:	2300      	moveq	r3, #0
 800b100:	b2db      	uxtb	r3, r3
 800b102:	461a      	mov	r2, r3
 800b104:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b108:	3b18      	subs	r3, #24
 800b10a:	4611      	mov	r1, r2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fd f8a5 	bl	800825c <inc_lock>
 800b112:	4602      	mov	r2, r0
 800b114:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b118:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b120:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800b122:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b126:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b130:	2b00      	cmp	r3, #0
 800b132:	d105      	bne.n	800b140 <f_open+0x4f8>
 800b134:	2302      	movs	r3, #2
 800b136:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b13a:	f102 0217 	add.w	r2, r2, #23
 800b13e:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b140:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b144:	f103 0317 	add.w	r3, r3, #23
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f040 8088 	bne.w	800b260 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800b150:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b154:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b15c:	461a      	mov	r2, r3
 800b15e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b162:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b166:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800b168:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b16c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b174:	2200      	movs	r2, #0
 800b176:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800b178:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b17c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b180:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b184:	f102 0210 	add.w	r2, r2, #16
 800b188:	6811      	ldr	r1, [r2, #0]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe f8f9 	bl	8009382 <ld_clust>
 800b190:	4602      	mov	r2, r0
 800b192:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b196:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b19e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800b1a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b1a4:	f103 0310 	add.w	r3, r3, #16
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	331f      	adds	r3, #31
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	061a      	lsls	r2, r3, #24
 800b1b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b1b4:	f103 0310 	add.w	r3, r3, #16
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	331e      	adds	r3, #30
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	041b      	lsls	r3, r3, #16
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b1c6:	f102 0210 	add.w	r2, r2, #16
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	321d      	adds	r2, #29
 800b1ce:	7812      	ldrb	r2, [r2, #0]
 800b1d0:	0212      	lsls	r2, r2, #8
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b1d8:	f102 0210 	add.w	r2, r2, #16
 800b1dc:	6812      	ldr	r2, [r2, #0]
 800b1de:	321c      	adds	r2, #28
 800b1e0:	7812      	ldrb	r2, [r2, #0]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b1e8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b1ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b1f0:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800b1f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b1f6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b1fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1fe:	461a      	mov	r2, r3
 800b200:	2300      	movs	r3, #0
 800b202:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800b204:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b208:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b210:	461a      	mov	r2, r3
 800b212:	2300      	movs	r3, #0
 800b214:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800b216:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b21a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b222:	461a      	mov	r2, r3
 800b224:	2300      	movs	r3, #0
 800b226:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800b228:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b22c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b230:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b234:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b238:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b23c:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800b23e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b242:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b250:	88da      	ldrh	r2, [r3, #6]
 800b252:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b256:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b25a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b25e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800b260:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b264:	f103 0317 	add.w	r3, r3, #23
 800b268:	781b      	ldrb	r3, [r3, #0]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop

0800b278 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b08c      	sub	sp, #48	; 0x30
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2200      	movs	r2, #0
 800b28e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff fc53 	bl	800ab3c <validate>
 800b296:	4603      	mov	r3, r0
 800b298:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b29a:	7ffb      	ldrb	r3, [r7, #31]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <f_read+0x2c>
 800b2a0:	7ffb      	ldrb	r3, [r7, #31]
 800b2a2:	e1cd      	b.n	800b640 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2aa:	79db      	ldrb	r3, [r3, #7]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d004      	beq.n	800b2ba <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2b6:	79db      	ldrb	r3, [r3, #7]
 800b2b8:	e1c2      	b.n	800b640 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2c0:	799b      	ldrb	r3, [r3, #6]
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b2ca:	2307      	movs	r3, #7
 800b2cc:	e1b8      	b.n	800b640 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	f240 81a5 	bls.w	800b636 <f_read+0x3be>
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b2f0:	e1a1      	b.n	800b636 <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b300:	6812      	ldr	r2, [r2, #0]
 800b302:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b306:	8952      	ldrh	r2, [r2, #10]
 800b308:	fbb3 f1f2 	udiv	r1, r3, r2
 800b30c:	fb01 f202 	mul.w	r2, r1, r2
 800b310:	1a9b      	subs	r3, r3, r2
 800b312:	2b00      	cmp	r3, #0
 800b314:	f040 8140 	bne.w	800b598 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b326:	6812      	ldr	r2, [r2, #0]
 800b328:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b32c:	8952      	ldrh	r2, [r2, #10]
 800b32e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b332:	b2da      	uxtb	r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b340:	789b      	ldrb	r3, [r3, #2]
 800b342:	3b01      	subs	r3, #1
 800b344:	b2db      	uxtb	r3, r3
 800b346:	4013      	ands	r3, r2
 800b348:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800b34a:	7dfb      	ldrb	r3, [r7, #23]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d143      	bne.n	800b3d8 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d105      	bne.n	800b368 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b366:	e01c      	b.n	800b3a2 <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	2b00      	cmp	r3, #0
 800b372:	d009      	beq.n	800b388 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	4619      	mov	r1, r3
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f7fd fd58 	bl	8008e34 <clmt_clust>
 800b384:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b386:	e00c      	b.n	800b3a2 <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	4619      	mov	r1, r3
 800b39a:	4610      	mov	r0, r2
 800b39c:	f7fd f9f2 	bl	8008784 <get_fat>
 800b3a0:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d806      	bhi.n	800b3b6 <f_read+0x13e>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	71da      	strb	r2, [r3, #7]
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	e144      	b.n	800b640 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3bc:	d106      	bne.n	800b3cc <f_read+0x154>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	71da      	strb	r2, [r3, #7]
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e139      	b.n	800b640 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d6:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	f7fd f9a5 	bl	800873a <clust2sect>
 800b3f0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d106      	bne.n	800b406 <f_read+0x18e>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3fe:	2202      	movs	r2, #2
 800b400:	71da      	strb	r2, [r3, #7]
 800b402:	2302      	movs	r3, #2
 800b404:	e11c      	b.n	800b640 <f_read+0x3c8>
			sect += csect;
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4413      	add	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b41a:	895b      	ldrh	r3, [r3, #10]
 800b41c:	461a      	mov	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	fbb3 f3f2 	udiv	r3, r3, r2
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d066      	beq.n	800b4fa <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b42c:	7dfa      	ldrb	r2, [r7, #23]
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	4413      	add	r3, r2
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b438:	6812      	ldr	r2, [r2, #0]
 800b43a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b43e:	7892      	ldrb	r2, [r2, #2]
 800b440:	4293      	cmp	r3, r2
 800b442:	d90a      	bls.n	800b45a <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b450:	789b      	ldrb	r3, [r3, #2]
 800b452:	461a      	mov	r2, r3
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b466:	7858      	ldrb	r0, [r3, #1]
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	6a39      	ldr	r1, [r7, #32]
 800b46e:	f7fc fd87 	bl	8007f80 <disk_read>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d006      	beq.n	800b486 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b47e:	2201      	movs	r2, #1
 800b480:	71da      	strb	r2, [r3, #7]
 800b482:	2301      	movs	r3, #1
 800b484:	e0dc      	b.n	800b640 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b48c:	799b      	ldrb	r3, [r3, #6]
 800b48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b492:	2b00      	cmp	r3, #0
 800b494:	d024      	beq.n	800b4e0 <f_read+0x268>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b49c:	699a      	ldr	r2, [r3, #24]
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d91b      	bls.n	800b4e0 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ae:	699a      	ldr	r2, [r3, #24]
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b4ba:	6812      	ldr	r2, [r2, #0]
 800b4bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b4c0:	8952      	ldrh	r2, [r2, #10]
 800b4c2:	fb02 f303 	mul.w	r3, r2, r3
 800b4c6:	6a3a      	ldr	r2, [r7, #32]
 800b4c8:	18d0      	adds	r0, r2, r3
 800b4ca:	68f9      	ldr	r1, [r7, #12]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4d8:	895b      	ldrh	r3, [r3, #10]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f7fc fdae 	bl	800803c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ec:	895b      	ldrh	r3, [r3, #10]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	fb02 f303 	mul.w	r3, r2, r3
 800b4f6:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800b4f8:	e085      	b.n	800b606 <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	429a      	cmp	r2, r3
 800b506:	d041      	beq.n	800b58c <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b50e:	799b      	ldrb	r3, [r3, #6]
 800b510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b514:	2b00      	cmp	r3, #0
 800b516:	d023      	beq.n	800b560 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b524:	7858      	ldrb	r0, [r3, #1]
 800b526:	68f9      	ldr	r1, [r7, #12]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b52e:	699a      	ldr	r2, [r3, #24]
 800b530:	2301      	movs	r3, #1
 800b532:	f7fc fd45 	bl	8007fc0 <disk_write>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d006      	beq.n	800b54a <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b542:	2201      	movs	r2, #1
 800b544:	71da      	strb	r2, [r3, #7]
 800b546:	2301      	movs	r3, #1
 800b548:	e07a      	b.n	800b640 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b550:	799b      	ldrb	r3, [r3, #6]
 800b552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b556:	b2da      	uxtb	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b55e:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b56c:	7858      	ldrb	r0, [r3, #1]
 800b56e:	68f9      	ldr	r1, [r7, #12]
 800b570:	2301      	movs	r3, #1
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	f7fc fd04 	bl	8007f80 <disk_read>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d006      	beq.n	800b58c <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b584:	2201      	movs	r2, #1
 800b586:	71da      	strb	r2, [r3, #7]
 800b588:	2301      	movs	r3, #1
 800b58a:	e059      	b.n	800b640 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b592:	461a      	mov	r2, r3
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a4:	895b      	ldrh	r3, [r3, #10]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b5b6:	6812      	ldr	r2, [r2, #0]
 800b5b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b5bc:	8952      	ldrh	r2, [r2, #10]
 800b5be:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5c2:	fb01 f202 	mul.w	r2, r1, r2
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	1ac3      	subs	r3, r0, r3
 800b5ca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800b5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d901      	bls.n	800b5d8 <f_read+0x360>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b5e6:	6812      	ldr	r2, [r2, #0]
 800b5e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b5ec:	8952      	ldrh	r2, [r2, #10]
 800b5ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5f2:	fb01 f202 	mul.w	r2, r1, r2
 800b5f6:	1a9b      	subs	r3, r3, r2
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5fe:	4619      	mov	r1, r3
 800b600:	6a38      	ldr	r0, [r7, #32]
 800b602:	f7fc fd1b 	bl	800803c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b606:	6a3a      	ldr	r2, [r7, #32]
 800b608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60a:	4413      	add	r3, r2
 800b60c:	623b      	str	r3, [r7, #32]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b614:	689a      	ldr	r2, [r3, #8]
 800b616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b618:	4413      	add	r3, r2
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b620:	6093      	str	r3, [r2, #8]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	441a      	add	r2, r3
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	601a      	str	r2, [r3, #0]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f47f ae5a 	bne.w	800b2f2 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3730      	adds	r7, #48	; 0x30
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08a      	sub	sp, #40	; 0x28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2200      	movs	r2, #0
 800b65e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7ff fa6b 	bl	800ab3c <validate>
 800b666:	4603      	mov	r3, r0
 800b668:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <f_write+0x2c>
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	e21e      	b.n	800bab2 <f_write+0x46a>
	if (fp->err)							/* Check error */
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b67a:	79db      	ldrb	r3, [r3, #7]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d004      	beq.n	800b68a <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b686:	79db      	ldrb	r3, [r3, #7]
 800b688:	e213      	b.n	800bab2 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b690:	799b      	ldrb	r3, [r3, #6]
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b69a:	2307      	movs	r3, #7
 800b69c:	e209      	b.n	800bab2 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6a4:	689a      	ldr	r2, [r3, #8]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	441a      	add	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	f080 81d9 	bcs.w	800ba6a <f_write+0x422>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800b6bc:	e1d5      	b.n	800ba6a <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b6cc:	6812      	ldr	r2, [r2, #0]
 800b6ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b6d2:	8952      	ldrh	r2, [r2, #10]
 800b6d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6d8:	fb01 f202 	mul.w	r2, r1, r2
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f040 8169 	bne.w	800b9b6 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b6f2:	6812      	ldr	r2, [r2, #0]
 800b6f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b6f8:	8952      	ldrh	r2, [r2, #10]
 800b6fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b70c:	789b      	ldrb	r3, [r3, #2]
 800b70e:	3b01      	subs	r3, #1
 800b710:	b2db      	uxtb	r3, r3
 800b712:	4013      	ands	r3, r2
 800b714:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800b716:	7dbb      	ldrb	r3, [r7, #22]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d15f      	bne.n	800b7dc <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d111      	bne.n	800b74c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	2b00      	cmp	r3, #0
 800b736:	d126      	bne.n	800b786 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2100      	movs	r1, #0
 800b742:	4618      	mov	r0, r3
 800b744:	f7fd face 	bl	8008ce4 <create_chain>
 800b748:	6278      	str	r0, [r7, #36]	; 0x24
 800b74a:	e01c      	b.n	800b786 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	2b00      	cmp	r3, #0
 800b756:	d009      	beq.n	800b76c <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	4619      	mov	r1, r3
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7fd fb66 	bl	8008e34 <clmt_clust>
 800b768:	6278      	str	r0, [r7, #36]	; 0x24
 800b76a:	e00c      	b.n	800b786 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b77a:	695b      	ldr	r3, [r3, #20]
 800b77c:	4619      	mov	r1, r3
 800b77e:	4610      	mov	r0, r2
 800b780:	f7fd fab0 	bl	8008ce4 <create_chain>
 800b784:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 8173 	beq.w	800ba74 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b790:	2b01      	cmp	r3, #1
 800b792:	d106      	bne.n	800b7a2 <f_write+0x15a>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b79a:	2202      	movs	r2, #2
 800b79c:	71da      	strb	r2, [r3, #7]
 800b79e:	2302      	movs	r3, #2
 800b7a0:	e187      	b.n	800bab2 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a8:	d106      	bne.n	800b7b8 <f_write+0x170>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	71da      	strb	r2, [r3, #7]
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e17c      	b.n	800bab2 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7be:	461a      	mov	r2, r3
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d105      	bne.n	800b7dc <f_write+0x194>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7da:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7e2:	799b      	ldrb	r3, [r3, #6]
 800b7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d023      	beq.n	800b834 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f8:	7858      	ldrb	r0, [r3, #1]
 800b7fa:	68f9      	ldr	r1, [r7, #12]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b802:	699a      	ldr	r2, [r3, #24]
 800b804:	2301      	movs	r3, #1
 800b806:	f7fc fbdb 	bl	8007fc0 <disk_write>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d006      	beq.n	800b81e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b816:	2201      	movs	r2, #1
 800b818:	71da      	strb	r2, [r3, #7]
 800b81a:	2301      	movs	r3, #1
 800b81c:	e149      	b.n	800bab2 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b824:	799b      	ldrb	r3, [r3, #6]
 800b826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b832:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	4619      	mov	r1, r3
 800b846:	4610      	mov	r0, r2
 800b848:	f7fc ff77 	bl	800873a <clust2sect>
 800b84c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d106      	bne.n	800b862 <f_write+0x21a>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b85a:	2202      	movs	r2, #2
 800b85c:	71da      	strb	r2, [r3, #7]
 800b85e:	2302      	movs	r3, #2
 800b860:	e127      	b.n	800bab2 <f_write+0x46a>
			sect += csect;
 800b862:	7dbb      	ldrb	r3, [r7, #22]
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	4413      	add	r3, r2
 800b868:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b876:	895b      	ldrh	r3, [r3, #10]
 800b878:	461a      	mov	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b880:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d069      	beq.n	800b95c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b888:	7dba      	ldrb	r2, [r7, #22]
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	4413      	add	r3, r2
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b894:	6812      	ldr	r2, [r2, #0]
 800b896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b89a:	7892      	ldrb	r2, [r2, #2]
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d90a      	bls.n	800b8b6 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ac:	789b      	ldrb	r3, [r3, #2]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	7dbb      	ldrb	r3, [r7, #22]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8c2:	7858      	ldrb	r0, [r3, #1]
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	69b9      	ldr	r1, [r7, #24]
 800b8ca:	f7fc fb79 	bl	8007fc0 <disk_write>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d006      	beq.n	800b8e2 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8da:	2201      	movs	r2, #1
 800b8dc:	71da      	strb	r2, [r3, #7]
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e0e7      	b.n	800bab2 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8e8:	699a      	ldr	r2, [r3, #24]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	69fa      	ldr	r2, [r7, #28]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d926      	bls.n	800b942 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8fc:	699a      	ldr	r2, [r3, #24]
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b908:	6812      	ldr	r2, [r2, #0]
 800b90a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b90e:	8952      	ldrh	r2, [r2, #10]
 800b910:	fb02 f303 	mul.w	r3, r2, r3
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	18d1      	adds	r1, r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b924:	895b      	ldrh	r3, [r3, #10]
 800b926:	461a      	mov	r2, r3
 800b928:	f7fc fb88 	bl	800803c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b932:	799b      	ldrb	r3, [r3, #6]
 800b934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b940:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b94e:	895b      	ldrh	r3, [r3, #10]
 800b950:	461a      	mov	r2, r3
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	fb02 f303 	mul.w	r3, r2, r3
 800b958:	623b      	str	r3, [r7, #32]
				continue;
 800b95a:	e06e      	b.n	800ba3a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	429a      	cmp	r2, r3
 800b968:	d01f      	beq.n	800b9aa <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b970:	689a      	ldr	r2, [r3, #8]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d215      	bcs.n	800b9aa <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b98a:	7858      	ldrb	r0, [r3, #1]
 800b98c:	68f9      	ldr	r1, [r7, #12]
 800b98e:	2301      	movs	r3, #1
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	f7fc faf5 	bl	8007f80 <disk_read>
 800b996:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d006      	beq.n	800b9aa <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	71da      	strb	r2, [r3, #7]
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e083      	b.n	800bab2 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c2:	895b      	ldrh	r3, [r3, #10]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9d4:	6812      	ldr	r2, [r2, #0]
 800b9d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9da:	8952      	ldrh	r2, [r2, #10]
 800b9dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9e0:	fb01 f202 	mul.w	r2, r1, r2
 800b9e4:	1a9b      	subs	r3, r3, r2
 800b9e6:	1ac3      	subs	r3, r0, r3
 800b9e8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800b9ea:	6a3a      	ldr	r2, [r7, #32]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d901      	bls.n	800b9f6 <f_write+0x3ae>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba04:	6812      	ldr	r2, [r2, #0]
 800ba06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba0a:	8952      	ldrh	r2, [r2, #10]
 800ba0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba10:	fb01 f202 	mul.w	r2, r1, r2
 800ba14:	1a9b      	subs	r3, r3, r2
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4413      	add	r3, r2
 800ba1a:	6a3a      	ldr	r2, [r7, #32]
 800ba1c:	69b9      	ldr	r1, [r7, #24]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fc fb0c 	bl	800803c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba2a:	799b      	ldrb	r3, [r3, #6]
 800ba2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba38:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800ba3a:	69ba      	ldr	r2, [r7, #24]
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	4413      	add	r3, r2
 800ba40:	61bb      	str	r3, [r7, #24]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba48:	689a      	ldr	r2, [r3, #8]
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba54:	6093      	str	r3, [r2, #8]
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	441a      	add	r2, r3
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	601a      	str	r2, [r3, #0]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f47f ae26 	bne.w	800b6be <f_write+0x76>
 800ba72:	e000      	b.n	800ba76 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba74:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba7c:	689a      	ldr	r2, [r3, #8]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d907      	bls.n	800ba9a <f_write+0x452>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba98:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa0:	799b      	ldrb	r3, [r3, #6]
 800baa2:	f043 0320 	orr.w	r3, r3, #32
 800baa6:	b2da      	uxtb	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baae:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3728      	adds	r7, #40	; 0x28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b086      	sub	sp, #24
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff f83a 	bl	800ab3c <validate>
 800bac8:	4603      	mov	r3, r0
 800baca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f040 80bc 	bne.w	800bc4c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bada:	799b      	ldrb	r3, [r3, #6]
 800badc:	f003 0320 	and.w	r3, r3, #32
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 80b3 	beq.w	800bc4c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baec:	799b      	ldrb	r3, [r3, #6]
 800baee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d01e      	beq.n	800bb34 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb02:	7858      	ldrb	r0, [r3, #1]
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	2301      	movs	r3, #1
 800bb10:	f7fc fa56 	bl	8007fc0 <disk_write>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e097      	b.n	800bc4e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb24:	799b      	ldrb	r3, [r3, #6]
 800bb26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb32:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb42:	69db      	ldr	r3, [r3, #28]
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f7fc fd06 	bl	8008558 <move_window>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800bb50:	7dfb      	ldrb	r3, [r7, #23]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d17a      	bne.n	800bc4c <f_sync+0x192>
				dir = fp->dir_ptr;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	330b      	adds	r3, #11
 800bb64:	781a      	ldrb	r2, [r3, #0]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	330b      	adds	r3, #11
 800bb6a:	f042 0220 	orr.w	r2, r2, #32
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb78:	68da      	ldr	r2, [r3, #12]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	331c      	adds	r3, #28
 800bb7e:	b2d2      	uxtb	r2, r2
 800bb80:	701a      	strb	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	0a1b      	lsrs	r3, r3, #8
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	331d      	adds	r3, #29
 800bb94:	b2d2      	uxtb	r2, r2
 800bb96:	701a      	strb	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	0c1a      	lsrs	r2, r3, #16
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	331e      	adds	r3, #30
 800bba6:	b2d2      	uxtb	r2, r2
 800bba8:	701a      	strb	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	0e1a      	lsrs	r2, r3, #24
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	331f      	adds	r3, #31
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6938      	ldr	r0, [r7, #16]
 800bbc8:	f7fd fc0a 	bl	80093e0 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800bbcc:	f7fc f93a 	bl	8007e44 <get_fattime>
 800bbd0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	3316      	adds	r3, #22
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	b2d2      	uxtb	r2, r2
 800bbda:	701a      	strb	r2, [r3, #0]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	0a1b      	lsrs	r3, r3, #8
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	3317      	adds	r3, #23
 800bbe8:	b2d2      	uxtb	r2, r2
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	0c1a      	lsrs	r2, r3, #16
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	3318      	adds	r3, #24
 800bbf4:	b2d2      	uxtb	r2, r2
 800bbf6:	701a      	strb	r2, [r3, #0]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	0e1a      	lsrs	r2, r3, #24
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	3319      	adds	r3, #25
 800bc00:	b2d2      	uxtb	r2, r2
 800bc02:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	3312      	adds	r3, #18
 800bc08:	2200      	movs	r2, #0
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	3313      	adds	r3, #19
 800bc10:	2200      	movs	r2, #0
 800bc12:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1a:	799b      	ldrb	r3, [r3, #6]
 800bc1c:	f023 0320 	bic.w	r3, r3, #32
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc28:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc36:	2201      	movs	r2, #1
 800bc38:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fc fcba 	bl	80085bc <sync_fs>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b084      	sub	sp, #16
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7ff ff2b 	bl	800baba <f_sync>
 800bc64:	4603      	mov	r3, r0
 800bc66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d119      	bne.n	800bca2 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7fe ff64 	bl	800ab3c <validate>
 800bc74:	4603      	mov	r3, r0
 800bc76:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d111      	bne.n	800bca2 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fc fba6 	bl	80083d8 <dec_lock>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d105      	bne.n	800bca2 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	2300      	movs	r3, #0
 800bca0:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b090      	sub	sp, #64	; 0x40
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f7fe ff40 	bl	800ab3c <validate>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bcc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d002      	beq.n	800bcd0 <f_lseek+0x24>
 800bcca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bcce:	e2da      	b.n	800c286 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd6:	79db      	ldrb	r3, [r3, #7]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d004      	beq.n	800bce6 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bce2:	79db      	ldrb	r3, [r3, #7]
 800bce4:	e2cf      	b.n	800c286 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f000 8124 	beq.w	800bf3c <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfa:	d16c      	bne.n	800bdd6 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	1d1a      	adds	r2, r3, #4
 800bd0a:	627a      	str	r2, [r7, #36]	; 0x24
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	617b      	str	r3, [r7, #20]
 800bd10:	2302      	movs	r3, #2
 800bd12:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d046      	beq.n	800bdb2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd26:	613b      	str	r3, [r7, #16]
 800bd28:	2300      	movs	r3, #0
 800bd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	3302      	adds	r3, #2
 800bd30:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	60fb      	str	r3, [r7, #12]
 800bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd38:	3301      	adds	r3, #1
 800bd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fc fd1c 	bl	8008784 <get_fat>
 800bd4c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d806      	bhi.n	800bd62 <f_lseek+0xb6>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	71da      	strb	r2, [r3, #7]
 800bd5e:	2302      	movs	r3, #2
 800bd60:	e291      	b.n	800c286 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd68:	d106      	bne.n	800bd78 <f_lseek+0xcc>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd70:	2201      	movs	r2, #1
 800bd72:	71da      	strb	r2, [r3, #7]
 800bd74:	2301      	movs	r3, #1
 800bd76:	e286      	b.n	800c286 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d0d7      	beq.n	800bd32 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bd82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d809      	bhi.n	800bd9e <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	1d1a      	adds	r2, r3, #4
 800bd8e:	627a      	str	r2, [r7, #36]	; 0x24
 800bd90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	1d1a      	adds	r2, r3, #4
 800bd98:	627a      	str	r2, [r7, #36]	; 0x24
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdaa:	695b      	ldr	r3, [r3, #20]
 800bdac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d3b8      	bcc.n	800bd24 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdbc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800bdbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d803      	bhi.n	800bdce <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	e259      	b.n	800c282 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bdce:	2311      	movs	r3, #17
 800bdd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bdd4:	e255      	b.n	800c282 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d904      	bls.n	800bdee <f_lseek+0x142>
				ofs = fp->fsize;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f000 8240 	beq.w	800c282 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	3b01      	subs	r3, #1
 800be06:	4619      	mov	r1, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7fd f813 	bl	8008e34 <clmt_clust>
 800be0e:	4602      	mov	r2, r0
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be16:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be26:	695b      	ldr	r3, [r3, #20]
 800be28:	4619      	mov	r1, r3
 800be2a:	4610      	mov	r0, r2
 800be2c:	f7fc fc85 	bl	800873a <clust2sect>
 800be30:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d106      	bne.n	800be46 <f_lseek+0x19a>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be3e:	2202      	movs	r2, #2
 800be40:	71da      	strb	r2, [r3, #7]
 800be42:	2302      	movs	r3, #2
 800be44:	e21f      	b.n	800c286 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	3b01      	subs	r3, #1
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be50:	6812      	ldr	r2, [r2, #0]
 800be52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be56:	8952      	ldrh	r2, [r2, #10]
 800be58:	fbb3 f3f2 	udiv	r3, r3, r2
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be62:	6812      	ldr	r2, [r2, #0]
 800be64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be68:	7892      	ldrb	r2, [r2, #2]
 800be6a:	3a01      	subs	r2, #1
 800be6c:	4013      	ands	r3, r2
 800be6e:	69ba      	ldr	r2, [r7, #24]
 800be70:	4413      	add	r3, r2
 800be72:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be82:	6812      	ldr	r2, [r2, #0]
 800be84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be88:	8952      	ldrh	r2, [r2, #10]
 800be8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800be8e:	fb01 f202 	mul.w	r2, r1, r2
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 81f4 	beq.w	800c282 <f_lseek+0x5d6>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea0:	699b      	ldr	r3, [r3, #24]
 800bea2:	69ba      	ldr	r2, [r7, #24]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	f000 81ec 	beq.w	800c282 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beb0:	799b      	ldrb	r3, [r3, #6]
 800beb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d023      	beq.n	800bf02 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bec6:	7858      	ldrb	r0, [r3, #1]
 800bec8:	6879      	ldr	r1, [r7, #4]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bed0:	699a      	ldr	r2, [r3, #24]
 800bed2:	2301      	movs	r3, #1
 800bed4:	f7fc f874 	bl	8007fc0 <disk_write>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d006      	beq.n	800beec <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee4:	2201      	movs	r2, #1
 800bee6:	71da      	strb	r2, [r3, #7]
 800bee8:	2301      	movs	r3, #1
 800beea:	e1cc      	b.n	800c286 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef2:	799b      	ldrb	r3, [r3, #6]
 800bef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf00:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf0e:	7858      	ldrb	r0, [r3, #1]
 800bf10:	6879      	ldr	r1, [r7, #4]
 800bf12:	2301      	movs	r3, #1
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	f7fc f833 	bl	8007f80 <disk_read>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d006      	beq.n	800bf2e <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf26:	2201      	movs	r2, #1
 800bf28:	71da      	strb	r2, [r3, #7]
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e1ab      	b.n	800c286 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf34:	461a      	mov	r2, r3
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	6193      	str	r3, [r2, #24]
 800bf3a:	e1a2      	b.n	800c282 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d90c      	bls.n	800bf64 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf50:	799b      	ldrb	r3, [r3, #6]
 800bf52:	f003 0302 	and.w	r3, r3, #2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d104      	bne.n	800bf64 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	637b      	str	r3, [r7, #52]	; 0x34
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf78:	461a      	mov	r2, r3
 800bf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7c:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 8100 	beq.w	800c186 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf92:	789b      	ldrb	r3, [r3, #2]
 800bf94:	461a      	mov	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfa2:	895b      	ldrh	r3, [r3, #10]
 800bfa4:	fb02 f303 	mul.w	r3, r2, r3
 800bfa8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d021      	beq.n	800bff4 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	1e5a      	subs	r2, r3, #1
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	1e59      	subs	r1, r3, #1
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d315      	bcc.n	800bff4 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	1e5a      	subs	r2, r3, #1
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	425b      	negs	r3, r3
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bfd8:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	1ad3      	subs	r3, r2, r3
 800bfe6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfee:	695b      	ldr	r3, [r3, #20]
 800bff0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bff2:	e031      	b.n	800c058 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	2b00      	cmp	r3, #0
 800c002:	d123      	bne.n	800c04c <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2100      	movs	r1, #0
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fc fe68 	bl	8008ce4 <create_chain>
 800c014:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d106      	bne.n	800c02a <f_lseek+0x37e>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c022:	2202      	movs	r2, #2
 800c024:	71da      	strb	r2, [r3, #7]
 800c026:	2302      	movs	r3, #2
 800c028:	e12d      	b.n	800c286 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c030:	d106      	bne.n	800c040 <f_lseek+0x394>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c038:	2201      	movs	r2, #1
 800c03a:	71da      	strb	r2, [r3, #7]
 800c03c:	2301      	movs	r3, #1
 800c03e:	e122      	b.n	800c286 <f_lseek+0x5da>
					fp->sclust = clst;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c046:	461a      	mov	r2, r3
 800c048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04a:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c052:	461a      	mov	r2, r3
 800c054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c056:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800c058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 8093 	beq.w	800c186 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800c060:	e052      	b.n	800c108 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c068:	799b      	ldrb	r3, [r3, #6]
 800c06a:	f003 0302 	and.w	r3, r3, #2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00e      	beq.n	800c090 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fc fe31 	bl	8008ce4 <create_chain>
 800c082:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800c084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10b      	bne.n	800c0a2 <f_lseek+0x3f6>
							ofs = bcs; break;
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	603b      	str	r3, [r7, #0]
 800c08e:	e03f      	b.n	800c110 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fc fb72 	bl	8008784 <get_fat>
 800c0a0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a8:	d106      	bne.n	800c0b8 <f_lseek+0x40c>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	71da      	strb	r2, [r3, #7]
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e0e6      	b.n	800c286 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d909      	bls.n	800c0d2 <f_lseek+0x426>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d306      	bcc.n	800c0e0 <f_lseek+0x434>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d8:	2202      	movs	r2, #2
 800c0da:	71da      	strb	r2, [r3, #7]
 800c0dc:	2302      	movs	r3, #2
 800c0de:	e0d2      	b.n	800c286 <f_lseek+0x5da>
					fp->clust = clst;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f2:	689a      	ldr	r2, [r3, #8]
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c0fe:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d8a8      	bhi.n	800c062 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c116:	689a      	ldr	r2, [r3, #8]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	4413      	add	r3, r2
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c122:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c130:	895b      	ldrh	r3, [r3, #10]
 800c132:	461a      	mov	r2, r3
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	fbb3 f1f2 	udiv	r1, r3, r2
 800c13a:	fb01 f202 	mul.w	r2, r1, r2
 800c13e:	1a9b      	subs	r3, r3, r2
 800c140:	2b00      	cmp	r3, #0
 800c142:	d020      	beq.n	800c186 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fc faf3 	bl	800873a <clust2sect>
 800c154:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800c156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d106      	bne.n	800c16a <f_lseek+0x4be>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c162:	2202      	movs	r2, #2
 800c164:	71da      	strb	r2, [r3, #7]
 800c166:	2302      	movs	r3, #2
 800c168:	e08d      	b.n	800c286 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c176:	895b      	ldrh	r3, [r3, #10]
 800c178:	461a      	mov	r2, r3
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c182:	4413      	add	r3, r2
 800c184:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c194:	6812      	ldr	r2, [r2, #0]
 800c196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c19a:	8952      	ldrh	r2, [r2, #10]
 800c19c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1a0:	fb01 f202 	mul.w	r2, r1, r2
 800c1a4:	1a9b      	subs	r3, r3, r2
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d04e      	beq.n	800c248 <f_lseek+0x59c>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d047      	beq.n	800c248 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1be:	799b      	ldrb	r3, [r3, #6]
 800c1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d023      	beq.n	800c210 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d4:	7858      	ldrb	r0, [r3, #1]
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1de:	699a      	ldr	r2, [r3, #24]
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f7fb feed 	bl	8007fc0 <disk_write>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d006      	beq.n	800c1fa <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	71da      	strb	r2, [r3, #7]
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e045      	b.n	800c286 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c200:	799b      	ldrb	r3, [r3, #6]
 800c202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c206:	b2da      	uxtb	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c20e:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c21c:	7858      	ldrb	r0, [r3, #1]
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	2301      	movs	r3, #1
 800c222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c224:	f7fb feac 	bl	8007f80 <disk_read>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d006      	beq.n	800c23c <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c234:	2201      	movs	r2, #1
 800c236:	71da      	strb	r2, [r3, #7]
 800c238:	2301      	movs	r3, #1
 800c23a:	e024      	b.n	800c286 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c242:	461a      	mov	r2, r3
 800c244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c246:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c24e:	689a      	ldr	r2, [r3, #8]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d912      	bls.n	800c282 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c26a:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c272:	799b      	ldrb	r3, [r3, #6]
 800c274:	f043 0320 	orr.w	r3, r3, #32
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c280:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800c282:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c286:	4618      	mov	r0, r3
 800c288:	3740      	adds	r7, #64	; 0x40
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
	...

0800c290 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <f_opendir+0x14>
 800c2a0:	2309      	movs	r3, #9
 800c2a2:	e089      	b.n	800c3b8 <f_opendir+0x128>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800c2a4:	4639      	mov	r1, r7
 800c2a6:	f107 0318 	add.w	r3, r7, #24
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fe f913 	bl	800a4d8 <find_volume>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800c2b6:	7ffb      	ldrb	r3, [r7, #31]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d173      	bne.n	800c3a4 <f_opendir+0x114>
		dp->fs = fs;
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c2c4:	6013      	str	r3, [r2, #0]
		INIT_BUF(*dp);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	f107 030c 	add.w	r3, r7, #12
 800c2d2:	6193      	str	r3, [r2, #24]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2da:	461a      	mov	r2, r3
 800c2dc:	4b38      	ldr	r3, [pc, #224]	; (800c3c0 <f_opendir+0x130>)
 800c2de:	6213      	str	r3, [r2, #32]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7fd ffcf 	bl	800a288 <follow_path>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800c2ee:	7ffb      	ldrb	r3, [r7, #31]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d152      	bne.n	800c39a <f_opendir+0x10a>
			if (dp->dir) {						/* It is not the origin directory itself */
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d01a      	beq.n	800c336 <f_opendir+0xa6>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c306:	695b      	ldr	r3, [r3, #20]
 800c308:	330b      	adds	r3, #11
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	f003 0310 	and.w	r3, r3, #16
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00e      	beq.n	800c332 <f_opendir+0xa2>
					dp->sclust = ld_clust(fs, dp->dir);
 800c314:	69ba      	ldr	r2, [r7, #24]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	4619      	mov	r1, r3
 800c320:	4610      	mov	r0, r2
 800c322:	f7fd f82e 	bl	8009382 <ld_clust>
 800c326:	4602      	mov	r2, r0
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c32e:	609a      	str	r2, [r3, #8]
 800c330:	e001      	b.n	800c336 <f_opendir+0xa6>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800c332:	2305      	movs	r3, #5
 800c334:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800c336:	7ffb      	ldrb	r3, [r7, #31]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d12e      	bne.n	800c39a <f_opendir+0x10a>
				dp->id = fs->id;
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c342:	88da      	ldrh	r2, [r3, #6]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c34a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c34c:	2100      	movs	r1, #0
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7fc fdb1 	bl	8008eb6 <dir_sdi>
 800c354:	4603      	mov	r3, r0
 800c356:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800c358:	7ffb      	ldrb	r3, [r7, #31]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d11d      	bne.n	800c39a <f_opendir+0x10a>
					if (dp->sclust) {
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d011      	beq.n	800c38e <f_opendir+0xfe>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c36a:	2100      	movs	r1, #0
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f7fb ff75 	bl	800825c <inc_lock>
 800c372:	4602      	mov	r2, r0
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c37a:	61da      	str	r2, [r3, #28]
						if (!dp->lockid)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c382:	69db      	ldr	r3, [r3, #28]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d108      	bne.n	800c39a <f_opendir+0x10a>
							res = FR_TOO_MANY_OPEN_FILES;
 800c388:	2312      	movs	r3, #18
 800c38a:	77fb      	strb	r3, [r7, #31]
 800c38c:	e005      	b.n	800c39a <f_opendir+0x10a>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c394:	461a      	mov	r2, r3
 800c396:	2300      	movs	r3, #0
 800c398:	61d3      	str	r3, [r2, #28]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c39a:	7ffb      	ldrb	r3, [r7, #31]
 800c39c:	2b04      	cmp	r3, #4
 800c39e:	d101      	bne.n	800c3a4 <f_opendir+0x114>
 800c3a0:	2305      	movs	r3, #5
 800c3a2:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800c3a4:	7ffb      	ldrb	r3, [r7, #31]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d005      	beq.n	800c3b6 <f_opendir+0x126>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	6013      	str	r3, [r2, #0]

	LEAVE_FF(fs, res);
 800c3b6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3720      	adds	r7, #32
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	200035c4 	.word	0x200035c4

0800c3c4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7fe fbb4 	bl	800ab3c <validate>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3d8:	7dfb      	ldrb	r3, [r7, #23]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d13f      	bne.n	800c45e <f_readdir+0x9a>
		if (!fno) {
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d106      	bne.n	800c3f2 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7fc fd65 	bl	8008eb6 <dir_sdi>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	75fb      	strb	r3, [r7, #23]
 800c3f0:	e035      	b.n	800c45e <f_readdir+0x9a>
		} else {
			INIT_BUF(*dp);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	f107 0308 	add.w	r3, r7, #8
 800c3fe:	6193      	str	r3, [r2, #24]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c406:	461a      	mov	r2, r3
 800c408:	4b17      	ldr	r3, [pc, #92]	; (800c468 <f_readdir+0xa4>)
 800c40a:	6213      	str	r3, [r2, #32]
			res = dir_read(dp, 0);			/* Read an item */
 800c40c:	2100      	movs	r1, #0
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7fd fad1 	bl	80099b6 <dir_read>
 800c414:	4603      	mov	r3, r0
 800c416:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800c418:	7dfb      	ldrb	r3, [r7, #23]
 800c41a:	2b04      	cmp	r3, #4
 800c41c:	d107      	bne.n	800c42e <f_readdir+0x6a>
				dp->sect = 0;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c424:	461a      	mov	r2, r3
 800c426:	2300      	movs	r3, #0
 800c428:	6113      	str	r3, [r2, #16]
				res = FR_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800c42e:	7dfb      	ldrb	r3, [r7, #23]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d114      	bne.n	800c45e <f_readdir+0x9a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7fd fc94 	bl	8009d64 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c43c:	2100      	movs	r1, #0
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7fc fe07 	bl	8009052 <dir_next>
 800c444:	4603      	mov	r3, r0
 800c446:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800c448:	7dfb      	ldrb	r3, [r7, #23]
 800c44a:	2b04      	cmp	r3, #4
 800c44c:	d107      	bne.n	800c45e <f_readdir+0x9a>
					dp->sect = 0;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c454:	461a      	mov	r2, r3
 800c456:	2300      	movs	r3, #0
 800c458:	6113      	str	r3, [r2, #16]
					res = FR_OK;
 800c45a:	2300      	movs	r3, #0
 800c45c:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	200035c4 	.word	0x200035c4

0800c46c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b087      	sub	sp, #28
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	4613      	mov	r3, r2
 800c478:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c47a:	2301      	movs	r3, #1
 800c47c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c47e:	2300      	movs	r3, #0
 800c480:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c482:	4b1f      	ldr	r3, [pc, #124]	; (800c500 <FATFS_LinkDriverEx+0x94>)
 800c484:	7a5b      	ldrb	r3, [r3, #9]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d831      	bhi.n	800c4f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c48c:	4b1c      	ldr	r3, [pc, #112]	; (800c500 <FATFS_LinkDriverEx+0x94>)
 800c48e:	7a5b      	ldrb	r3, [r3, #9]
 800c490:	b2db      	uxtb	r3, r3
 800c492:	461a      	mov	r2, r3
 800c494:	4b1a      	ldr	r3, [pc, #104]	; (800c500 <FATFS_LinkDriverEx+0x94>)
 800c496:	2100      	movs	r1, #0
 800c498:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c49a:	4b19      	ldr	r3, [pc, #100]	; (800c500 <FATFS_LinkDriverEx+0x94>)
 800c49c:	7a5b      	ldrb	r3, [r3, #9]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	4a17      	ldr	r2, [pc, #92]	; (800c500 <FATFS_LinkDriverEx+0x94>)
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c4aa:	4b15      	ldr	r3, [pc, #84]	; (800c500 <FATFS_LinkDriverEx+0x94>)
 800c4ac:	7a5b      	ldrb	r3, [r3, #9]
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4b13      	ldr	r3, [pc, #76]	; (800c500 <FATFS_LinkDriverEx+0x94>)
 800c4b4:	4413      	add	r3, r2
 800c4b6:	79fa      	ldrb	r2, [r7, #7]
 800c4b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c4ba:	4b11      	ldr	r3, [pc, #68]	; (800c500 <FATFS_LinkDriverEx+0x94>)
 800c4bc:	7a5b      	ldrb	r3, [r3, #9]
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	b2d1      	uxtb	r1, r2
 800c4c4:	4a0e      	ldr	r2, [pc, #56]	; (800c500 <FATFS_LinkDriverEx+0x94>)
 800c4c6:	7251      	strb	r1, [r2, #9]
 800c4c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c4ca:	7dbb      	ldrb	r3, [r7, #22]
 800c4cc:	3330      	adds	r3, #48	; 0x30
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	223a      	movs	r2, #58	; 0x3a
 800c4da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	3302      	adds	r3, #2
 800c4e0:	222f      	movs	r2, #47	; 0x2f
 800c4e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	3303      	adds	r3, #3
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	371c      	adds	r7, #28
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	200037c4 	.word	0x200037c4

0800c504 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c50e:	2200      	movs	r2, #0
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff ffaa 	bl	800c46c <FATFS_LinkDriverEx>
 800c518:	4603      	mov	r3, r0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
	...

0800c524 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c530:	88fb      	ldrh	r3, [r7, #6]
 800c532:	2b7f      	cmp	r3, #127	; 0x7f
 800c534:	d802      	bhi.n	800c53c <ff_convert+0x18>
		c = chr;
 800c536:	88fb      	ldrh	r3, [r7, #6]
 800c538:	81fb      	strh	r3, [r7, #14]
 800c53a:	e025      	b.n	800c588 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00b      	beq.n	800c55a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c542:	88fb      	ldrh	r3, [r7, #6]
 800c544:	2bff      	cmp	r3, #255	; 0xff
 800c546:	d805      	bhi.n	800c554 <ff_convert+0x30>
 800c548:	88fb      	ldrh	r3, [r7, #6]
 800c54a:	3b80      	subs	r3, #128	; 0x80
 800c54c:	4a12      	ldr	r2, [pc, #72]	; (800c598 <ff_convert+0x74>)
 800c54e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c552:	e000      	b.n	800c556 <ff_convert+0x32>
 800c554:	2300      	movs	r3, #0
 800c556:	81fb      	strh	r3, [r7, #14]
 800c558:	e016      	b.n	800c588 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800c55a:	2300      	movs	r3, #0
 800c55c:	81fb      	strh	r3, [r7, #14]
 800c55e:	e009      	b.n	800c574 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c560:	89fb      	ldrh	r3, [r7, #14]
 800c562:	4a0d      	ldr	r2, [pc, #52]	; (800c598 <ff_convert+0x74>)
 800c564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c568:	88fa      	ldrh	r2, [r7, #6]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d006      	beq.n	800c57c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c56e:	89fb      	ldrh	r3, [r7, #14]
 800c570:	3301      	adds	r3, #1
 800c572:	81fb      	strh	r3, [r7, #14]
 800c574:	89fb      	ldrh	r3, [r7, #14]
 800c576:	2b7f      	cmp	r3, #127	; 0x7f
 800c578:	d9f2      	bls.n	800c560 <ff_convert+0x3c>
 800c57a:	e000      	b.n	800c57e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c57c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c57e:	89fb      	ldrh	r3, [r7, #14]
 800c580:	3380      	adds	r3, #128	; 0x80
 800c582:	b29b      	uxth	r3, r3
 800c584:	b2db      	uxtb	r3, r3
 800c586:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c588:	89fb      	ldrh	r3, [r7, #14]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3714      	adds	r7, #20
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	0800dcb0 	.word	0x0800dcb0

0800c59c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60fb      	str	r3, [r7, #12]
 800c5aa:	e002      	b.n	800c5b2 <ff_wtoupper+0x16>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	60fb      	str	r3, [r7, #12]
 800c5b2:	4a0f      	ldr	r2, [pc, #60]	; (800c5f0 <ff_wtoupper+0x54>)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d006      	beq.n	800c5cc <ff_wtoupper+0x30>
 800c5be:	4a0c      	ldr	r2, [pc, #48]	; (800c5f0 <ff_wtoupper+0x54>)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5c6:	88fa      	ldrh	r2, [r7, #6]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d1ef      	bne.n	800c5ac <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800c5cc:	4a08      	ldr	r2, [pc, #32]	; (800c5f0 <ff_wtoupper+0x54>)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d004      	beq.n	800c5e2 <ff_wtoupper+0x46>
 800c5d8:	4a06      	ldr	r2, [pc, #24]	; (800c5f4 <ff_wtoupper+0x58>)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5e0:	e000      	b.n	800c5e4 <ff_wtoupper+0x48>
 800c5e2:	88fb      	ldrh	r3, [r7, #6]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	0800ddb0 	.word	0x0800ddb0
 800c5f4:	0800df90 	.word	0x0800df90

0800c5f8 <__errno>:
 800c5f8:	4b01      	ldr	r3, [pc, #4]	; (800c600 <__errno+0x8>)
 800c5fa:	6818      	ldr	r0, [r3, #0]
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	20000034 	.word	0x20000034

0800c604 <__libc_init_array>:
 800c604:	b570      	push	{r4, r5, r6, lr}
 800c606:	4d0d      	ldr	r5, [pc, #52]	; (800c63c <__libc_init_array+0x38>)
 800c608:	4c0d      	ldr	r4, [pc, #52]	; (800c640 <__libc_init_array+0x3c>)
 800c60a:	1b64      	subs	r4, r4, r5
 800c60c:	10a4      	asrs	r4, r4, #2
 800c60e:	2600      	movs	r6, #0
 800c610:	42a6      	cmp	r6, r4
 800c612:	d109      	bne.n	800c628 <__libc_init_array+0x24>
 800c614:	4d0b      	ldr	r5, [pc, #44]	; (800c644 <__libc_init_array+0x40>)
 800c616:	4c0c      	ldr	r4, [pc, #48]	; (800c648 <__libc_init_array+0x44>)
 800c618:	f001 fa00 	bl	800da1c <_init>
 800c61c:	1b64      	subs	r4, r4, r5
 800c61e:	10a4      	asrs	r4, r4, #2
 800c620:	2600      	movs	r6, #0
 800c622:	42a6      	cmp	r6, r4
 800c624:	d105      	bne.n	800c632 <__libc_init_array+0x2e>
 800c626:	bd70      	pop	{r4, r5, r6, pc}
 800c628:	f855 3b04 	ldr.w	r3, [r5], #4
 800c62c:	4798      	blx	r3
 800c62e:	3601      	adds	r6, #1
 800c630:	e7ee      	b.n	800c610 <__libc_init_array+0xc>
 800c632:	f855 3b04 	ldr.w	r3, [r5], #4
 800c636:	4798      	blx	r3
 800c638:	3601      	adds	r6, #1
 800c63a:	e7f2      	b.n	800c622 <__libc_init_array+0x1e>
 800c63c:	0800e208 	.word	0x0800e208
 800c640:	0800e208 	.word	0x0800e208
 800c644:	0800e208 	.word	0x0800e208
 800c648:	0800e20c 	.word	0x0800e20c

0800c64c <memset>:
 800c64c:	4402      	add	r2, r0
 800c64e:	4603      	mov	r3, r0
 800c650:	4293      	cmp	r3, r2
 800c652:	d100      	bne.n	800c656 <memset+0xa>
 800c654:	4770      	bx	lr
 800c656:	f803 1b01 	strb.w	r1, [r3], #1
 800c65a:	e7f9      	b.n	800c650 <memset+0x4>

0800c65c <iprintf>:
 800c65c:	b40f      	push	{r0, r1, r2, r3}
 800c65e:	4b0a      	ldr	r3, [pc, #40]	; (800c688 <iprintf+0x2c>)
 800c660:	b513      	push	{r0, r1, r4, lr}
 800c662:	681c      	ldr	r4, [r3, #0]
 800c664:	b124      	cbz	r4, 800c670 <iprintf+0x14>
 800c666:	69a3      	ldr	r3, [r4, #24]
 800c668:	b913      	cbnz	r3, 800c670 <iprintf+0x14>
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 fa7e 	bl	800cb6c <__sinit>
 800c670:	ab05      	add	r3, sp, #20
 800c672:	9a04      	ldr	r2, [sp, #16]
 800c674:	68a1      	ldr	r1, [r4, #8]
 800c676:	9301      	str	r3, [sp, #4]
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 fde3 	bl	800d244 <_vfiprintf_r>
 800c67e:	b002      	add	sp, #8
 800c680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c684:	b004      	add	sp, #16
 800c686:	4770      	bx	lr
 800c688:	20000034 	.word	0x20000034

0800c68c <_puts_r>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	460e      	mov	r6, r1
 800c690:	4605      	mov	r5, r0
 800c692:	b118      	cbz	r0, 800c69c <_puts_r+0x10>
 800c694:	6983      	ldr	r3, [r0, #24]
 800c696:	b90b      	cbnz	r3, 800c69c <_puts_r+0x10>
 800c698:	f000 fa68 	bl	800cb6c <__sinit>
 800c69c:	69ab      	ldr	r3, [r5, #24]
 800c69e:	68ac      	ldr	r4, [r5, #8]
 800c6a0:	b913      	cbnz	r3, 800c6a8 <_puts_r+0x1c>
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	f000 fa62 	bl	800cb6c <__sinit>
 800c6a8:	4b2c      	ldr	r3, [pc, #176]	; (800c75c <_puts_r+0xd0>)
 800c6aa:	429c      	cmp	r4, r3
 800c6ac:	d120      	bne.n	800c6f0 <_puts_r+0x64>
 800c6ae:	686c      	ldr	r4, [r5, #4]
 800c6b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6b2:	07db      	lsls	r3, r3, #31
 800c6b4:	d405      	bmi.n	800c6c2 <_puts_r+0x36>
 800c6b6:	89a3      	ldrh	r3, [r4, #12]
 800c6b8:	0598      	lsls	r0, r3, #22
 800c6ba:	d402      	bmi.n	800c6c2 <_puts_r+0x36>
 800c6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6be:	f000 faf3 	bl	800cca8 <__retarget_lock_acquire_recursive>
 800c6c2:	89a3      	ldrh	r3, [r4, #12]
 800c6c4:	0719      	lsls	r1, r3, #28
 800c6c6:	d51d      	bpl.n	800c704 <_puts_r+0x78>
 800c6c8:	6923      	ldr	r3, [r4, #16]
 800c6ca:	b1db      	cbz	r3, 800c704 <_puts_r+0x78>
 800c6cc:	3e01      	subs	r6, #1
 800c6ce:	68a3      	ldr	r3, [r4, #8]
 800c6d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	60a3      	str	r3, [r4, #8]
 800c6d8:	bb39      	cbnz	r1, 800c72a <_puts_r+0x9e>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	da38      	bge.n	800c750 <_puts_r+0xc4>
 800c6de:	4622      	mov	r2, r4
 800c6e0:	210a      	movs	r1, #10
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f000 f868 	bl	800c7b8 <__swbuf_r>
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d011      	beq.n	800c710 <_puts_r+0x84>
 800c6ec:	250a      	movs	r5, #10
 800c6ee:	e011      	b.n	800c714 <_puts_r+0x88>
 800c6f0:	4b1b      	ldr	r3, [pc, #108]	; (800c760 <_puts_r+0xd4>)
 800c6f2:	429c      	cmp	r4, r3
 800c6f4:	d101      	bne.n	800c6fa <_puts_r+0x6e>
 800c6f6:	68ac      	ldr	r4, [r5, #8]
 800c6f8:	e7da      	b.n	800c6b0 <_puts_r+0x24>
 800c6fa:	4b1a      	ldr	r3, [pc, #104]	; (800c764 <_puts_r+0xd8>)
 800c6fc:	429c      	cmp	r4, r3
 800c6fe:	bf08      	it	eq
 800c700:	68ec      	ldreq	r4, [r5, #12]
 800c702:	e7d5      	b.n	800c6b0 <_puts_r+0x24>
 800c704:	4621      	mov	r1, r4
 800c706:	4628      	mov	r0, r5
 800c708:	f000 f8a8 	bl	800c85c <__swsetup_r>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d0dd      	beq.n	800c6cc <_puts_r+0x40>
 800c710:	f04f 35ff 	mov.w	r5, #4294967295
 800c714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c716:	07da      	lsls	r2, r3, #31
 800c718:	d405      	bmi.n	800c726 <_puts_r+0x9a>
 800c71a:	89a3      	ldrh	r3, [r4, #12]
 800c71c:	059b      	lsls	r3, r3, #22
 800c71e:	d402      	bmi.n	800c726 <_puts_r+0x9a>
 800c720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c722:	f000 fac2 	bl	800ccaa <__retarget_lock_release_recursive>
 800c726:	4628      	mov	r0, r5
 800c728:	bd70      	pop	{r4, r5, r6, pc}
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	da04      	bge.n	800c738 <_puts_r+0xac>
 800c72e:	69a2      	ldr	r2, [r4, #24]
 800c730:	429a      	cmp	r2, r3
 800c732:	dc06      	bgt.n	800c742 <_puts_r+0xb6>
 800c734:	290a      	cmp	r1, #10
 800c736:	d004      	beq.n	800c742 <_puts_r+0xb6>
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	1c5a      	adds	r2, r3, #1
 800c73c:	6022      	str	r2, [r4, #0]
 800c73e:	7019      	strb	r1, [r3, #0]
 800c740:	e7c5      	b.n	800c6ce <_puts_r+0x42>
 800c742:	4622      	mov	r2, r4
 800c744:	4628      	mov	r0, r5
 800c746:	f000 f837 	bl	800c7b8 <__swbuf_r>
 800c74a:	3001      	adds	r0, #1
 800c74c:	d1bf      	bne.n	800c6ce <_puts_r+0x42>
 800c74e:	e7df      	b.n	800c710 <_puts_r+0x84>
 800c750:	6823      	ldr	r3, [r4, #0]
 800c752:	250a      	movs	r5, #10
 800c754:	1c5a      	adds	r2, r3, #1
 800c756:	6022      	str	r2, [r4, #0]
 800c758:	701d      	strb	r5, [r3, #0]
 800c75a:	e7db      	b.n	800c714 <_puts_r+0x88>
 800c75c:	0800e194 	.word	0x0800e194
 800c760:	0800e1b4 	.word	0x0800e1b4
 800c764:	0800e174 	.word	0x0800e174

0800c768 <puts>:
 800c768:	4b02      	ldr	r3, [pc, #8]	; (800c774 <puts+0xc>)
 800c76a:	4601      	mov	r1, r0
 800c76c:	6818      	ldr	r0, [r3, #0]
 800c76e:	f7ff bf8d 	b.w	800c68c <_puts_r>
 800c772:	bf00      	nop
 800c774:	20000034 	.word	0x20000034

0800c778 <siprintf>:
 800c778:	b40e      	push	{r1, r2, r3}
 800c77a:	b500      	push	{lr}
 800c77c:	b09c      	sub	sp, #112	; 0x70
 800c77e:	ab1d      	add	r3, sp, #116	; 0x74
 800c780:	9002      	str	r0, [sp, #8]
 800c782:	9006      	str	r0, [sp, #24]
 800c784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c788:	4809      	ldr	r0, [pc, #36]	; (800c7b0 <siprintf+0x38>)
 800c78a:	9107      	str	r1, [sp, #28]
 800c78c:	9104      	str	r1, [sp, #16]
 800c78e:	4909      	ldr	r1, [pc, #36]	; (800c7b4 <siprintf+0x3c>)
 800c790:	f853 2b04 	ldr.w	r2, [r3], #4
 800c794:	9105      	str	r1, [sp, #20]
 800c796:	6800      	ldr	r0, [r0, #0]
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	a902      	add	r1, sp, #8
 800c79c:	f000 fc28 	bl	800cff0 <_svfiprintf_r>
 800c7a0:	9b02      	ldr	r3, [sp, #8]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	b01c      	add	sp, #112	; 0x70
 800c7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7ac:	b003      	add	sp, #12
 800c7ae:	4770      	bx	lr
 800c7b0:	20000034 	.word	0x20000034
 800c7b4:	ffff0208 	.word	0xffff0208

0800c7b8 <__swbuf_r>:
 800c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ba:	460e      	mov	r6, r1
 800c7bc:	4614      	mov	r4, r2
 800c7be:	4605      	mov	r5, r0
 800c7c0:	b118      	cbz	r0, 800c7ca <__swbuf_r+0x12>
 800c7c2:	6983      	ldr	r3, [r0, #24]
 800c7c4:	b90b      	cbnz	r3, 800c7ca <__swbuf_r+0x12>
 800c7c6:	f000 f9d1 	bl	800cb6c <__sinit>
 800c7ca:	4b21      	ldr	r3, [pc, #132]	; (800c850 <__swbuf_r+0x98>)
 800c7cc:	429c      	cmp	r4, r3
 800c7ce:	d12b      	bne.n	800c828 <__swbuf_r+0x70>
 800c7d0:	686c      	ldr	r4, [r5, #4]
 800c7d2:	69a3      	ldr	r3, [r4, #24]
 800c7d4:	60a3      	str	r3, [r4, #8]
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	071a      	lsls	r2, r3, #28
 800c7da:	d52f      	bpl.n	800c83c <__swbuf_r+0x84>
 800c7dc:	6923      	ldr	r3, [r4, #16]
 800c7de:	b36b      	cbz	r3, 800c83c <__swbuf_r+0x84>
 800c7e0:	6923      	ldr	r3, [r4, #16]
 800c7e2:	6820      	ldr	r0, [r4, #0]
 800c7e4:	1ac0      	subs	r0, r0, r3
 800c7e6:	6963      	ldr	r3, [r4, #20]
 800c7e8:	b2f6      	uxtb	r6, r6
 800c7ea:	4283      	cmp	r3, r0
 800c7ec:	4637      	mov	r7, r6
 800c7ee:	dc04      	bgt.n	800c7fa <__swbuf_r+0x42>
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f000 f926 	bl	800ca44 <_fflush_r>
 800c7f8:	bb30      	cbnz	r0, 800c848 <__swbuf_r+0x90>
 800c7fa:	68a3      	ldr	r3, [r4, #8]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	60a3      	str	r3, [r4, #8]
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	6022      	str	r2, [r4, #0]
 800c806:	701e      	strb	r6, [r3, #0]
 800c808:	6963      	ldr	r3, [r4, #20]
 800c80a:	3001      	adds	r0, #1
 800c80c:	4283      	cmp	r3, r0
 800c80e:	d004      	beq.n	800c81a <__swbuf_r+0x62>
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	07db      	lsls	r3, r3, #31
 800c814:	d506      	bpl.n	800c824 <__swbuf_r+0x6c>
 800c816:	2e0a      	cmp	r6, #10
 800c818:	d104      	bne.n	800c824 <__swbuf_r+0x6c>
 800c81a:	4621      	mov	r1, r4
 800c81c:	4628      	mov	r0, r5
 800c81e:	f000 f911 	bl	800ca44 <_fflush_r>
 800c822:	b988      	cbnz	r0, 800c848 <__swbuf_r+0x90>
 800c824:	4638      	mov	r0, r7
 800c826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <__swbuf_r+0x9c>)
 800c82a:	429c      	cmp	r4, r3
 800c82c:	d101      	bne.n	800c832 <__swbuf_r+0x7a>
 800c82e:	68ac      	ldr	r4, [r5, #8]
 800c830:	e7cf      	b.n	800c7d2 <__swbuf_r+0x1a>
 800c832:	4b09      	ldr	r3, [pc, #36]	; (800c858 <__swbuf_r+0xa0>)
 800c834:	429c      	cmp	r4, r3
 800c836:	bf08      	it	eq
 800c838:	68ec      	ldreq	r4, [r5, #12]
 800c83a:	e7ca      	b.n	800c7d2 <__swbuf_r+0x1a>
 800c83c:	4621      	mov	r1, r4
 800c83e:	4628      	mov	r0, r5
 800c840:	f000 f80c 	bl	800c85c <__swsetup_r>
 800c844:	2800      	cmp	r0, #0
 800c846:	d0cb      	beq.n	800c7e0 <__swbuf_r+0x28>
 800c848:	f04f 37ff 	mov.w	r7, #4294967295
 800c84c:	e7ea      	b.n	800c824 <__swbuf_r+0x6c>
 800c84e:	bf00      	nop
 800c850:	0800e194 	.word	0x0800e194
 800c854:	0800e1b4 	.word	0x0800e1b4
 800c858:	0800e174 	.word	0x0800e174

0800c85c <__swsetup_r>:
 800c85c:	4b32      	ldr	r3, [pc, #200]	; (800c928 <__swsetup_r+0xcc>)
 800c85e:	b570      	push	{r4, r5, r6, lr}
 800c860:	681d      	ldr	r5, [r3, #0]
 800c862:	4606      	mov	r6, r0
 800c864:	460c      	mov	r4, r1
 800c866:	b125      	cbz	r5, 800c872 <__swsetup_r+0x16>
 800c868:	69ab      	ldr	r3, [r5, #24]
 800c86a:	b913      	cbnz	r3, 800c872 <__swsetup_r+0x16>
 800c86c:	4628      	mov	r0, r5
 800c86e:	f000 f97d 	bl	800cb6c <__sinit>
 800c872:	4b2e      	ldr	r3, [pc, #184]	; (800c92c <__swsetup_r+0xd0>)
 800c874:	429c      	cmp	r4, r3
 800c876:	d10f      	bne.n	800c898 <__swsetup_r+0x3c>
 800c878:	686c      	ldr	r4, [r5, #4]
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c880:	0719      	lsls	r1, r3, #28
 800c882:	d42c      	bmi.n	800c8de <__swsetup_r+0x82>
 800c884:	06dd      	lsls	r5, r3, #27
 800c886:	d411      	bmi.n	800c8ac <__swsetup_r+0x50>
 800c888:	2309      	movs	r3, #9
 800c88a:	6033      	str	r3, [r6, #0]
 800c88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c890:	81a3      	strh	r3, [r4, #12]
 800c892:	f04f 30ff 	mov.w	r0, #4294967295
 800c896:	e03e      	b.n	800c916 <__swsetup_r+0xba>
 800c898:	4b25      	ldr	r3, [pc, #148]	; (800c930 <__swsetup_r+0xd4>)
 800c89a:	429c      	cmp	r4, r3
 800c89c:	d101      	bne.n	800c8a2 <__swsetup_r+0x46>
 800c89e:	68ac      	ldr	r4, [r5, #8]
 800c8a0:	e7eb      	b.n	800c87a <__swsetup_r+0x1e>
 800c8a2:	4b24      	ldr	r3, [pc, #144]	; (800c934 <__swsetup_r+0xd8>)
 800c8a4:	429c      	cmp	r4, r3
 800c8a6:	bf08      	it	eq
 800c8a8:	68ec      	ldreq	r4, [r5, #12]
 800c8aa:	e7e6      	b.n	800c87a <__swsetup_r+0x1e>
 800c8ac:	0758      	lsls	r0, r3, #29
 800c8ae:	d512      	bpl.n	800c8d6 <__swsetup_r+0x7a>
 800c8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8b2:	b141      	cbz	r1, 800c8c6 <__swsetup_r+0x6a>
 800c8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b8:	4299      	cmp	r1, r3
 800c8ba:	d002      	beq.n	800c8c2 <__swsetup_r+0x66>
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f000 fa5b 	bl	800cd78 <_free_r>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8cc:	81a3      	strh	r3, [r4, #12]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	6063      	str	r3, [r4, #4]
 800c8d2:	6923      	ldr	r3, [r4, #16]
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	f043 0308 	orr.w	r3, r3, #8
 800c8dc:	81a3      	strh	r3, [r4, #12]
 800c8de:	6923      	ldr	r3, [r4, #16]
 800c8e0:	b94b      	cbnz	r3, 800c8f6 <__swsetup_r+0x9a>
 800c8e2:	89a3      	ldrh	r3, [r4, #12]
 800c8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ec:	d003      	beq.n	800c8f6 <__swsetup_r+0x9a>
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f000 fa01 	bl	800ccf8 <__smakebuf_r>
 800c8f6:	89a0      	ldrh	r0, [r4, #12]
 800c8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8fc:	f010 0301 	ands.w	r3, r0, #1
 800c900:	d00a      	beq.n	800c918 <__swsetup_r+0xbc>
 800c902:	2300      	movs	r3, #0
 800c904:	60a3      	str	r3, [r4, #8]
 800c906:	6963      	ldr	r3, [r4, #20]
 800c908:	425b      	negs	r3, r3
 800c90a:	61a3      	str	r3, [r4, #24]
 800c90c:	6923      	ldr	r3, [r4, #16]
 800c90e:	b943      	cbnz	r3, 800c922 <__swsetup_r+0xc6>
 800c910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c914:	d1ba      	bne.n	800c88c <__swsetup_r+0x30>
 800c916:	bd70      	pop	{r4, r5, r6, pc}
 800c918:	0781      	lsls	r1, r0, #30
 800c91a:	bf58      	it	pl
 800c91c:	6963      	ldrpl	r3, [r4, #20]
 800c91e:	60a3      	str	r3, [r4, #8]
 800c920:	e7f4      	b.n	800c90c <__swsetup_r+0xb0>
 800c922:	2000      	movs	r0, #0
 800c924:	e7f7      	b.n	800c916 <__swsetup_r+0xba>
 800c926:	bf00      	nop
 800c928:	20000034 	.word	0x20000034
 800c92c:	0800e194 	.word	0x0800e194
 800c930:	0800e1b4 	.word	0x0800e1b4
 800c934:	0800e174 	.word	0x0800e174

0800c938 <__sflush_r>:
 800c938:	898a      	ldrh	r2, [r1, #12]
 800c93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c93e:	4605      	mov	r5, r0
 800c940:	0710      	lsls	r0, r2, #28
 800c942:	460c      	mov	r4, r1
 800c944:	d458      	bmi.n	800c9f8 <__sflush_r+0xc0>
 800c946:	684b      	ldr	r3, [r1, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	dc05      	bgt.n	800c958 <__sflush_r+0x20>
 800c94c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dc02      	bgt.n	800c958 <__sflush_r+0x20>
 800c952:	2000      	movs	r0, #0
 800c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c95a:	2e00      	cmp	r6, #0
 800c95c:	d0f9      	beq.n	800c952 <__sflush_r+0x1a>
 800c95e:	2300      	movs	r3, #0
 800c960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c964:	682f      	ldr	r7, [r5, #0]
 800c966:	602b      	str	r3, [r5, #0]
 800c968:	d032      	beq.n	800c9d0 <__sflush_r+0x98>
 800c96a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	075a      	lsls	r2, r3, #29
 800c970:	d505      	bpl.n	800c97e <__sflush_r+0x46>
 800c972:	6863      	ldr	r3, [r4, #4]
 800c974:	1ac0      	subs	r0, r0, r3
 800c976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c978:	b10b      	cbz	r3, 800c97e <__sflush_r+0x46>
 800c97a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c97c:	1ac0      	subs	r0, r0, r3
 800c97e:	2300      	movs	r3, #0
 800c980:	4602      	mov	r2, r0
 800c982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c984:	6a21      	ldr	r1, [r4, #32]
 800c986:	4628      	mov	r0, r5
 800c988:	47b0      	blx	r6
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	d106      	bne.n	800c99e <__sflush_r+0x66>
 800c990:	6829      	ldr	r1, [r5, #0]
 800c992:	291d      	cmp	r1, #29
 800c994:	d82c      	bhi.n	800c9f0 <__sflush_r+0xb8>
 800c996:	4a2a      	ldr	r2, [pc, #168]	; (800ca40 <__sflush_r+0x108>)
 800c998:	40ca      	lsrs	r2, r1
 800c99a:	07d6      	lsls	r6, r2, #31
 800c99c:	d528      	bpl.n	800c9f0 <__sflush_r+0xb8>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	6062      	str	r2, [r4, #4]
 800c9a2:	04d9      	lsls	r1, r3, #19
 800c9a4:	6922      	ldr	r2, [r4, #16]
 800c9a6:	6022      	str	r2, [r4, #0]
 800c9a8:	d504      	bpl.n	800c9b4 <__sflush_r+0x7c>
 800c9aa:	1c42      	adds	r2, r0, #1
 800c9ac:	d101      	bne.n	800c9b2 <__sflush_r+0x7a>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	b903      	cbnz	r3, 800c9b4 <__sflush_r+0x7c>
 800c9b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c9b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9b6:	602f      	str	r7, [r5, #0]
 800c9b8:	2900      	cmp	r1, #0
 800c9ba:	d0ca      	beq.n	800c952 <__sflush_r+0x1a>
 800c9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9c0:	4299      	cmp	r1, r3
 800c9c2:	d002      	beq.n	800c9ca <__sflush_r+0x92>
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f000 f9d7 	bl	800cd78 <_free_r>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c9ce:	e7c1      	b.n	800c954 <__sflush_r+0x1c>
 800c9d0:	6a21      	ldr	r1, [r4, #32]
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	47b0      	blx	r6
 800c9d8:	1c41      	adds	r1, r0, #1
 800c9da:	d1c7      	bne.n	800c96c <__sflush_r+0x34>
 800c9dc:	682b      	ldr	r3, [r5, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0c4      	beq.n	800c96c <__sflush_r+0x34>
 800c9e2:	2b1d      	cmp	r3, #29
 800c9e4:	d001      	beq.n	800c9ea <__sflush_r+0xb2>
 800c9e6:	2b16      	cmp	r3, #22
 800c9e8:	d101      	bne.n	800c9ee <__sflush_r+0xb6>
 800c9ea:	602f      	str	r7, [r5, #0]
 800c9ec:	e7b1      	b.n	800c952 <__sflush_r+0x1a>
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9f4:	81a3      	strh	r3, [r4, #12]
 800c9f6:	e7ad      	b.n	800c954 <__sflush_r+0x1c>
 800c9f8:	690f      	ldr	r7, [r1, #16]
 800c9fa:	2f00      	cmp	r7, #0
 800c9fc:	d0a9      	beq.n	800c952 <__sflush_r+0x1a>
 800c9fe:	0793      	lsls	r3, r2, #30
 800ca00:	680e      	ldr	r6, [r1, #0]
 800ca02:	bf08      	it	eq
 800ca04:	694b      	ldreq	r3, [r1, #20]
 800ca06:	600f      	str	r7, [r1, #0]
 800ca08:	bf18      	it	ne
 800ca0a:	2300      	movne	r3, #0
 800ca0c:	eba6 0807 	sub.w	r8, r6, r7
 800ca10:	608b      	str	r3, [r1, #8]
 800ca12:	f1b8 0f00 	cmp.w	r8, #0
 800ca16:	dd9c      	ble.n	800c952 <__sflush_r+0x1a>
 800ca18:	6a21      	ldr	r1, [r4, #32]
 800ca1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca1c:	4643      	mov	r3, r8
 800ca1e:	463a      	mov	r2, r7
 800ca20:	4628      	mov	r0, r5
 800ca22:	47b0      	blx	r6
 800ca24:	2800      	cmp	r0, #0
 800ca26:	dc06      	bgt.n	800ca36 <__sflush_r+0xfe>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca2e:	81a3      	strh	r3, [r4, #12]
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295
 800ca34:	e78e      	b.n	800c954 <__sflush_r+0x1c>
 800ca36:	4407      	add	r7, r0
 800ca38:	eba8 0800 	sub.w	r8, r8, r0
 800ca3c:	e7e9      	b.n	800ca12 <__sflush_r+0xda>
 800ca3e:	bf00      	nop
 800ca40:	20400001 	.word	0x20400001

0800ca44 <_fflush_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	690b      	ldr	r3, [r1, #16]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	b913      	cbnz	r3, 800ca54 <_fflush_r+0x10>
 800ca4e:	2500      	movs	r5, #0
 800ca50:	4628      	mov	r0, r5
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	b118      	cbz	r0, 800ca5e <_fflush_r+0x1a>
 800ca56:	6983      	ldr	r3, [r0, #24]
 800ca58:	b90b      	cbnz	r3, 800ca5e <_fflush_r+0x1a>
 800ca5a:	f000 f887 	bl	800cb6c <__sinit>
 800ca5e:	4b14      	ldr	r3, [pc, #80]	; (800cab0 <_fflush_r+0x6c>)
 800ca60:	429c      	cmp	r4, r3
 800ca62:	d11b      	bne.n	800ca9c <_fflush_r+0x58>
 800ca64:	686c      	ldr	r4, [r5, #4]
 800ca66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0ef      	beq.n	800ca4e <_fflush_r+0xa>
 800ca6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca70:	07d0      	lsls	r0, r2, #31
 800ca72:	d404      	bmi.n	800ca7e <_fflush_r+0x3a>
 800ca74:	0599      	lsls	r1, r3, #22
 800ca76:	d402      	bmi.n	800ca7e <_fflush_r+0x3a>
 800ca78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca7a:	f000 f915 	bl	800cca8 <__retarget_lock_acquire_recursive>
 800ca7e:	4628      	mov	r0, r5
 800ca80:	4621      	mov	r1, r4
 800ca82:	f7ff ff59 	bl	800c938 <__sflush_r>
 800ca86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca88:	07da      	lsls	r2, r3, #31
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	d4e0      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	059b      	lsls	r3, r3, #22
 800ca92:	d4dd      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca96:	f000 f908 	bl	800ccaa <__retarget_lock_release_recursive>
 800ca9a:	e7d9      	b.n	800ca50 <_fflush_r+0xc>
 800ca9c:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <_fflush_r+0x70>)
 800ca9e:	429c      	cmp	r4, r3
 800caa0:	d101      	bne.n	800caa6 <_fflush_r+0x62>
 800caa2:	68ac      	ldr	r4, [r5, #8]
 800caa4:	e7df      	b.n	800ca66 <_fflush_r+0x22>
 800caa6:	4b04      	ldr	r3, [pc, #16]	; (800cab8 <_fflush_r+0x74>)
 800caa8:	429c      	cmp	r4, r3
 800caaa:	bf08      	it	eq
 800caac:	68ec      	ldreq	r4, [r5, #12]
 800caae:	e7da      	b.n	800ca66 <_fflush_r+0x22>
 800cab0:	0800e194 	.word	0x0800e194
 800cab4:	0800e1b4 	.word	0x0800e1b4
 800cab8:	0800e174 	.word	0x0800e174

0800cabc <std>:
 800cabc:	2300      	movs	r3, #0
 800cabe:	b510      	push	{r4, lr}
 800cac0:	4604      	mov	r4, r0
 800cac2:	e9c0 3300 	strd	r3, r3, [r0]
 800cac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caca:	6083      	str	r3, [r0, #8]
 800cacc:	8181      	strh	r1, [r0, #12]
 800cace:	6643      	str	r3, [r0, #100]	; 0x64
 800cad0:	81c2      	strh	r2, [r0, #14]
 800cad2:	6183      	str	r3, [r0, #24]
 800cad4:	4619      	mov	r1, r3
 800cad6:	2208      	movs	r2, #8
 800cad8:	305c      	adds	r0, #92	; 0x5c
 800cada:	f7ff fdb7 	bl	800c64c <memset>
 800cade:	4b05      	ldr	r3, [pc, #20]	; (800caf4 <std+0x38>)
 800cae0:	6263      	str	r3, [r4, #36]	; 0x24
 800cae2:	4b05      	ldr	r3, [pc, #20]	; (800caf8 <std+0x3c>)
 800cae4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cae6:	4b05      	ldr	r3, [pc, #20]	; (800cafc <std+0x40>)
 800cae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800caea:	4b05      	ldr	r3, [pc, #20]	; (800cb00 <std+0x44>)
 800caec:	6224      	str	r4, [r4, #32]
 800caee:	6323      	str	r3, [r4, #48]	; 0x30
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	bf00      	nop
 800caf4:	0800d7ed 	.word	0x0800d7ed
 800caf8:	0800d80f 	.word	0x0800d80f
 800cafc:	0800d847 	.word	0x0800d847
 800cb00:	0800d86b 	.word	0x0800d86b

0800cb04 <_cleanup_r>:
 800cb04:	4901      	ldr	r1, [pc, #4]	; (800cb0c <_cleanup_r+0x8>)
 800cb06:	f000 b8af 	b.w	800cc68 <_fwalk_reent>
 800cb0a:	bf00      	nop
 800cb0c:	0800ca45 	.word	0x0800ca45

0800cb10 <__sfmoreglue>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	2268      	movs	r2, #104	; 0x68
 800cb14:	1e4d      	subs	r5, r1, #1
 800cb16:	4355      	muls	r5, r2
 800cb18:	460e      	mov	r6, r1
 800cb1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb1e:	f000 f997 	bl	800ce50 <_malloc_r>
 800cb22:	4604      	mov	r4, r0
 800cb24:	b140      	cbz	r0, 800cb38 <__sfmoreglue+0x28>
 800cb26:	2100      	movs	r1, #0
 800cb28:	e9c0 1600 	strd	r1, r6, [r0]
 800cb2c:	300c      	adds	r0, #12
 800cb2e:	60a0      	str	r0, [r4, #8]
 800cb30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb34:	f7ff fd8a 	bl	800c64c <memset>
 800cb38:	4620      	mov	r0, r4
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}

0800cb3c <__sfp_lock_acquire>:
 800cb3c:	4801      	ldr	r0, [pc, #4]	; (800cb44 <__sfp_lock_acquire+0x8>)
 800cb3e:	f000 b8b3 	b.w	800cca8 <__retarget_lock_acquire_recursive>
 800cb42:	bf00      	nop
 800cb44:	200037d1 	.word	0x200037d1

0800cb48 <__sfp_lock_release>:
 800cb48:	4801      	ldr	r0, [pc, #4]	; (800cb50 <__sfp_lock_release+0x8>)
 800cb4a:	f000 b8ae 	b.w	800ccaa <__retarget_lock_release_recursive>
 800cb4e:	bf00      	nop
 800cb50:	200037d1 	.word	0x200037d1

0800cb54 <__sinit_lock_acquire>:
 800cb54:	4801      	ldr	r0, [pc, #4]	; (800cb5c <__sinit_lock_acquire+0x8>)
 800cb56:	f000 b8a7 	b.w	800cca8 <__retarget_lock_acquire_recursive>
 800cb5a:	bf00      	nop
 800cb5c:	200037d2 	.word	0x200037d2

0800cb60 <__sinit_lock_release>:
 800cb60:	4801      	ldr	r0, [pc, #4]	; (800cb68 <__sinit_lock_release+0x8>)
 800cb62:	f000 b8a2 	b.w	800ccaa <__retarget_lock_release_recursive>
 800cb66:	bf00      	nop
 800cb68:	200037d2 	.word	0x200037d2

0800cb6c <__sinit>:
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	4604      	mov	r4, r0
 800cb70:	f7ff fff0 	bl	800cb54 <__sinit_lock_acquire>
 800cb74:	69a3      	ldr	r3, [r4, #24]
 800cb76:	b11b      	cbz	r3, 800cb80 <__sinit+0x14>
 800cb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb7c:	f7ff bff0 	b.w	800cb60 <__sinit_lock_release>
 800cb80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb84:	6523      	str	r3, [r4, #80]	; 0x50
 800cb86:	4b13      	ldr	r3, [pc, #76]	; (800cbd4 <__sinit+0x68>)
 800cb88:	4a13      	ldr	r2, [pc, #76]	; (800cbd8 <__sinit+0x6c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb8e:	42a3      	cmp	r3, r4
 800cb90:	bf04      	itt	eq
 800cb92:	2301      	moveq	r3, #1
 800cb94:	61a3      	streq	r3, [r4, #24]
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 f820 	bl	800cbdc <__sfp>
 800cb9c:	6060      	str	r0, [r4, #4]
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f000 f81c 	bl	800cbdc <__sfp>
 800cba4:	60a0      	str	r0, [r4, #8]
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 f818 	bl	800cbdc <__sfp>
 800cbac:	2200      	movs	r2, #0
 800cbae:	60e0      	str	r0, [r4, #12]
 800cbb0:	2104      	movs	r1, #4
 800cbb2:	6860      	ldr	r0, [r4, #4]
 800cbb4:	f7ff ff82 	bl	800cabc <std>
 800cbb8:	68a0      	ldr	r0, [r4, #8]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	2109      	movs	r1, #9
 800cbbe:	f7ff ff7d 	bl	800cabc <std>
 800cbc2:	68e0      	ldr	r0, [r4, #12]
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	2112      	movs	r1, #18
 800cbc8:	f7ff ff78 	bl	800cabc <std>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	61a3      	str	r3, [r4, #24]
 800cbd0:	e7d2      	b.n	800cb78 <__sinit+0xc>
 800cbd2:	bf00      	nop
 800cbd4:	0800e170 	.word	0x0800e170
 800cbd8:	0800cb05 	.word	0x0800cb05

0800cbdc <__sfp>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	4607      	mov	r7, r0
 800cbe0:	f7ff ffac 	bl	800cb3c <__sfp_lock_acquire>
 800cbe4:	4b1e      	ldr	r3, [pc, #120]	; (800cc60 <__sfp+0x84>)
 800cbe6:	681e      	ldr	r6, [r3, #0]
 800cbe8:	69b3      	ldr	r3, [r6, #24]
 800cbea:	b913      	cbnz	r3, 800cbf2 <__sfp+0x16>
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7ff ffbd 	bl	800cb6c <__sinit>
 800cbf2:	3648      	adds	r6, #72	; 0x48
 800cbf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	d503      	bpl.n	800cc04 <__sfp+0x28>
 800cbfc:	6833      	ldr	r3, [r6, #0]
 800cbfe:	b30b      	cbz	r3, 800cc44 <__sfp+0x68>
 800cc00:	6836      	ldr	r6, [r6, #0]
 800cc02:	e7f7      	b.n	800cbf4 <__sfp+0x18>
 800cc04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc08:	b9d5      	cbnz	r5, 800cc40 <__sfp+0x64>
 800cc0a:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <__sfp+0x88>)
 800cc0c:	60e3      	str	r3, [r4, #12]
 800cc0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc12:	6665      	str	r5, [r4, #100]	; 0x64
 800cc14:	f000 f847 	bl	800cca6 <__retarget_lock_init_recursive>
 800cc18:	f7ff ff96 	bl	800cb48 <__sfp_lock_release>
 800cc1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc24:	6025      	str	r5, [r4, #0]
 800cc26:	61a5      	str	r5, [r4, #24]
 800cc28:	2208      	movs	r2, #8
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc30:	f7ff fd0c 	bl	800c64c <memset>
 800cc34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc40:	3468      	adds	r4, #104	; 0x68
 800cc42:	e7d9      	b.n	800cbf8 <__sfp+0x1c>
 800cc44:	2104      	movs	r1, #4
 800cc46:	4638      	mov	r0, r7
 800cc48:	f7ff ff62 	bl	800cb10 <__sfmoreglue>
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	6030      	str	r0, [r6, #0]
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d1d5      	bne.n	800cc00 <__sfp+0x24>
 800cc54:	f7ff ff78 	bl	800cb48 <__sfp_lock_release>
 800cc58:	230c      	movs	r3, #12
 800cc5a:	603b      	str	r3, [r7, #0]
 800cc5c:	e7ee      	b.n	800cc3c <__sfp+0x60>
 800cc5e:	bf00      	nop
 800cc60:	0800e170 	.word	0x0800e170
 800cc64:	ffff0001 	.word	0xffff0001

0800cc68 <_fwalk_reent>:
 800cc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	4606      	mov	r6, r0
 800cc6e:	4688      	mov	r8, r1
 800cc70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc74:	2700      	movs	r7, #0
 800cc76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc7a:	f1b9 0901 	subs.w	r9, r9, #1
 800cc7e:	d505      	bpl.n	800cc8c <_fwalk_reent+0x24>
 800cc80:	6824      	ldr	r4, [r4, #0]
 800cc82:	2c00      	cmp	r4, #0
 800cc84:	d1f7      	bne.n	800cc76 <_fwalk_reent+0xe>
 800cc86:	4638      	mov	r0, r7
 800cc88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8c:	89ab      	ldrh	r3, [r5, #12]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d907      	bls.n	800cca2 <_fwalk_reent+0x3a>
 800cc92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc96:	3301      	adds	r3, #1
 800cc98:	d003      	beq.n	800cca2 <_fwalk_reent+0x3a>
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	47c0      	blx	r8
 800cca0:	4307      	orrs	r7, r0
 800cca2:	3568      	adds	r5, #104	; 0x68
 800cca4:	e7e9      	b.n	800cc7a <_fwalk_reent+0x12>

0800cca6 <__retarget_lock_init_recursive>:
 800cca6:	4770      	bx	lr

0800cca8 <__retarget_lock_acquire_recursive>:
 800cca8:	4770      	bx	lr

0800ccaa <__retarget_lock_release_recursive>:
 800ccaa:	4770      	bx	lr

0800ccac <__swhatbuf_r>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	460e      	mov	r6, r1
 800ccb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb4:	2900      	cmp	r1, #0
 800ccb6:	b096      	sub	sp, #88	; 0x58
 800ccb8:	4614      	mov	r4, r2
 800ccba:	461d      	mov	r5, r3
 800ccbc:	da08      	bge.n	800ccd0 <__swhatbuf_r+0x24>
 800ccbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	602a      	str	r2, [r5, #0]
 800ccc6:	061a      	lsls	r2, r3, #24
 800ccc8:	d410      	bmi.n	800ccec <__swhatbuf_r+0x40>
 800ccca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccce:	e00e      	b.n	800ccee <__swhatbuf_r+0x42>
 800ccd0:	466a      	mov	r2, sp
 800ccd2:	f000 fdf1 	bl	800d8b8 <_fstat_r>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	dbf1      	blt.n	800ccbe <__swhatbuf_r+0x12>
 800ccda:	9a01      	ldr	r2, [sp, #4]
 800ccdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cce0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cce4:	425a      	negs	r2, r3
 800cce6:	415a      	adcs	r2, r3
 800cce8:	602a      	str	r2, [r5, #0]
 800ccea:	e7ee      	b.n	800ccca <__swhatbuf_r+0x1e>
 800ccec:	2340      	movs	r3, #64	; 0x40
 800ccee:	2000      	movs	r0, #0
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	b016      	add	sp, #88	; 0x58
 800ccf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ccf8 <__smakebuf_r>:
 800ccf8:	898b      	ldrh	r3, [r1, #12]
 800ccfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccfc:	079d      	lsls	r5, r3, #30
 800ccfe:	4606      	mov	r6, r0
 800cd00:	460c      	mov	r4, r1
 800cd02:	d507      	bpl.n	800cd14 <__smakebuf_r+0x1c>
 800cd04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	6123      	str	r3, [r4, #16]
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	6163      	str	r3, [r4, #20]
 800cd10:	b002      	add	sp, #8
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	ab01      	add	r3, sp, #4
 800cd16:	466a      	mov	r2, sp
 800cd18:	f7ff ffc8 	bl	800ccac <__swhatbuf_r>
 800cd1c:	9900      	ldr	r1, [sp, #0]
 800cd1e:	4605      	mov	r5, r0
 800cd20:	4630      	mov	r0, r6
 800cd22:	f000 f895 	bl	800ce50 <_malloc_r>
 800cd26:	b948      	cbnz	r0, 800cd3c <__smakebuf_r+0x44>
 800cd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd2c:	059a      	lsls	r2, r3, #22
 800cd2e:	d4ef      	bmi.n	800cd10 <__smakebuf_r+0x18>
 800cd30:	f023 0303 	bic.w	r3, r3, #3
 800cd34:	f043 0302 	orr.w	r3, r3, #2
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	e7e3      	b.n	800cd04 <__smakebuf_r+0xc>
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <__smakebuf_r+0x7c>)
 800cd3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	6020      	str	r0, [r4, #0]
 800cd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	9b00      	ldr	r3, [sp, #0]
 800cd4c:	6163      	str	r3, [r4, #20]
 800cd4e:	9b01      	ldr	r3, [sp, #4]
 800cd50:	6120      	str	r0, [r4, #16]
 800cd52:	b15b      	cbz	r3, 800cd6c <__smakebuf_r+0x74>
 800cd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f000 fdbf 	bl	800d8dc <_isatty_r>
 800cd5e:	b128      	cbz	r0, 800cd6c <__smakebuf_r+0x74>
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	f023 0303 	bic.w	r3, r3, #3
 800cd66:	f043 0301 	orr.w	r3, r3, #1
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	89a0      	ldrh	r0, [r4, #12]
 800cd6e:	4305      	orrs	r5, r0
 800cd70:	81a5      	strh	r5, [r4, #12]
 800cd72:	e7cd      	b.n	800cd10 <__smakebuf_r+0x18>
 800cd74:	0800cb05 	.word	0x0800cb05

0800cd78 <_free_r>:
 800cd78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd7a:	2900      	cmp	r1, #0
 800cd7c:	d044      	beq.n	800ce08 <_free_r+0x90>
 800cd7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd82:	9001      	str	r0, [sp, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f1a1 0404 	sub.w	r4, r1, #4
 800cd8a:	bfb8      	it	lt
 800cd8c:	18e4      	addlt	r4, r4, r3
 800cd8e:	f000 fdef 	bl	800d970 <__malloc_lock>
 800cd92:	4a1e      	ldr	r2, [pc, #120]	; (800ce0c <_free_r+0x94>)
 800cd94:	9801      	ldr	r0, [sp, #4]
 800cd96:	6813      	ldr	r3, [r2, #0]
 800cd98:	b933      	cbnz	r3, 800cda8 <_free_r+0x30>
 800cd9a:	6063      	str	r3, [r4, #4]
 800cd9c:	6014      	str	r4, [r2, #0]
 800cd9e:	b003      	add	sp, #12
 800cda0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cda4:	f000 bdea 	b.w	800d97c <__malloc_unlock>
 800cda8:	42a3      	cmp	r3, r4
 800cdaa:	d908      	bls.n	800cdbe <_free_r+0x46>
 800cdac:	6825      	ldr	r5, [r4, #0]
 800cdae:	1961      	adds	r1, r4, r5
 800cdb0:	428b      	cmp	r3, r1
 800cdb2:	bf01      	itttt	eq
 800cdb4:	6819      	ldreq	r1, [r3, #0]
 800cdb6:	685b      	ldreq	r3, [r3, #4]
 800cdb8:	1949      	addeq	r1, r1, r5
 800cdba:	6021      	streq	r1, [r4, #0]
 800cdbc:	e7ed      	b.n	800cd9a <_free_r+0x22>
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	b10b      	cbz	r3, 800cdc8 <_free_r+0x50>
 800cdc4:	42a3      	cmp	r3, r4
 800cdc6:	d9fa      	bls.n	800cdbe <_free_r+0x46>
 800cdc8:	6811      	ldr	r1, [r2, #0]
 800cdca:	1855      	adds	r5, r2, r1
 800cdcc:	42a5      	cmp	r5, r4
 800cdce:	d10b      	bne.n	800cde8 <_free_r+0x70>
 800cdd0:	6824      	ldr	r4, [r4, #0]
 800cdd2:	4421      	add	r1, r4
 800cdd4:	1854      	adds	r4, r2, r1
 800cdd6:	42a3      	cmp	r3, r4
 800cdd8:	6011      	str	r1, [r2, #0]
 800cdda:	d1e0      	bne.n	800cd9e <_free_r+0x26>
 800cddc:	681c      	ldr	r4, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	6053      	str	r3, [r2, #4]
 800cde2:	4421      	add	r1, r4
 800cde4:	6011      	str	r1, [r2, #0]
 800cde6:	e7da      	b.n	800cd9e <_free_r+0x26>
 800cde8:	d902      	bls.n	800cdf0 <_free_r+0x78>
 800cdea:	230c      	movs	r3, #12
 800cdec:	6003      	str	r3, [r0, #0]
 800cdee:	e7d6      	b.n	800cd9e <_free_r+0x26>
 800cdf0:	6825      	ldr	r5, [r4, #0]
 800cdf2:	1961      	adds	r1, r4, r5
 800cdf4:	428b      	cmp	r3, r1
 800cdf6:	bf04      	itt	eq
 800cdf8:	6819      	ldreq	r1, [r3, #0]
 800cdfa:	685b      	ldreq	r3, [r3, #4]
 800cdfc:	6063      	str	r3, [r4, #4]
 800cdfe:	bf04      	itt	eq
 800ce00:	1949      	addeq	r1, r1, r5
 800ce02:	6021      	streq	r1, [r4, #0]
 800ce04:	6054      	str	r4, [r2, #4]
 800ce06:	e7ca      	b.n	800cd9e <_free_r+0x26>
 800ce08:	b003      	add	sp, #12
 800ce0a:	bd30      	pop	{r4, r5, pc}
 800ce0c:	200037d4 	.word	0x200037d4

0800ce10 <sbrk_aligned>:
 800ce10:	b570      	push	{r4, r5, r6, lr}
 800ce12:	4e0e      	ldr	r6, [pc, #56]	; (800ce4c <sbrk_aligned+0x3c>)
 800ce14:	460c      	mov	r4, r1
 800ce16:	6831      	ldr	r1, [r6, #0]
 800ce18:	4605      	mov	r5, r0
 800ce1a:	b911      	cbnz	r1, 800ce22 <sbrk_aligned+0x12>
 800ce1c:	f000 fcd6 	bl	800d7cc <_sbrk_r>
 800ce20:	6030      	str	r0, [r6, #0]
 800ce22:	4621      	mov	r1, r4
 800ce24:	4628      	mov	r0, r5
 800ce26:	f000 fcd1 	bl	800d7cc <_sbrk_r>
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	d00a      	beq.n	800ce44 <sbrk_aligned+0x34>
 800ce2e:	1cc4      	adds	r4, r0, #3
 800ce30:	f024 0403 	bic.w	r4, r4, #3
 800ce34:	42a0      	cmp	r0, r4
 800ce36:	d007      	beq.n	800ce48 <sbrk_aligned+0x38>
 800ce38:	1a21      	subs	r1, r4, r0
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	f000 fcc6 	bl	800d7cc <_sbrk_r>
 800ce40:	3001      	adds	r0, #1
 800ce42:	d101      	bne.n	800ce48 <sbrk_aligned+0x38>
 800ce44:	f04f 34ff 	mov.w	r4, #4294967295
 800ce48:	4620      	mov	r0, r4
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	200037d8 	.word	0x200037d8

0800ce50 <_malloc_r>:
 800ce50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce54:	1ccd      	adds	r5, r1, #3
 800ce56:	f025 0503 	bic.w	r5, r5, #3
 800ce5a:	3508      	adds	r5, #8
 800ce5c:	2d0c      	cmp	r5, #12
 800ce5e:	bf38      	it	cc
 800ce60:	250c      	movcc	r5, #12
 800ce62:	2d00      	cmp	r5, #0
 800ce64:	4607      	mov	r7, r0
 800ce66:	db01      	blt.n	800ce6c <_malloc_r+0x1c>
 800ce68:	42a9      	cmp	r1, r5
 800ce6a:	d905      	bls.n	800ce78 <_malloc_r+0x28>
 800ce6c:	230c      	movs	r3, #12
 800ce6e:	603b      	str	r3, [r7, #0]
 800ce70:	2600      	movs	r6, #0
 800ce72:	4630      	mov	r0, r6
 800ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce78:	4e2e      	ldr	r6, [pc, #184]	; (800cf34 <_malloc_r+0xe4>)
 800ce7a:	f000 fd79 	bl	800d970 <__malloc_lock>
 800ce7e:	6833      	ldr	r3, [r6, #0]
 800ce80:	461c      	mov	r4, r3
 800ce82:	bb34      	cbnz	r4, 800ced2 <_malloc_r+0x82>
 800ce84:	4629      	mov	r1, r5
 800ce86:	4638      	mov	r0, r7
 800ce88:	f7ff ffc2 	bl	800ce10 <sbrk_aligned>
 800ce8c:	1c43      	adds	r3, r0, #1
 800ce8e:	4604      	mov	r4, r0
 800ce90:	d14d      	bne.n	800cf2e <_malloc_r+0xde>
 800ce92:	6834      	ldr	r4, [r6, #0]
 800ce94:	4626      	mov	r6, r4
 800ce96:	2e00      	cmp	r6, #0
 800ce98:	d140      	bne.n	800cf1c <_malloc_r+0xcc>
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4638      	mov	r0, r7
 800cea0:	eb04 0803 	add.w	r8, r4, r3
 800cea4:	f000 fc92 	bl	800d7cc <_sbrk_r>
 800cea8:	4580      	cmp	r8, r0
 800ceaa:	d13a      	bne.n	800cf22 <_malloc_r+0xd2>
 800ceac:	6821      	ldr	r1, [r4, #0]
 800ceae:	3503      	adds	r5, #3
 800ceb0:	1a6d      	subs	r5, r5, r1
 800ceb2:	f025 0503 	bic.w	r5, r5, #3
 800ceb6:	3508      	adds	r5, #8
 800ceb8:	2d0c      	cmp	r5, #12
 800ceba:	bf38      	it	cc
 800cebc:	250c      	movcc	r5, #12
 800cebe:	4629      	mov	r1, r5
 800cec0:	4638      	mov	r0, r7
 800cec2:	f7ff ffa5 	bl	800ce10 <sbrk_aligned>
 800cec6:	3001      	adds	r0, #1
 800cec8:	d02b      	beq.n	800cf22 <_malloc_r+0xd2>
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	442b      	add	r3, r5
 800cece:	6023      	str	r3, [r4, #0]
 800ced0:	e00e      	b.n	800cef0 <_malloc_r+0xa0>
 800ced2:	6822      	ldr	r2, [r4, #0]
 800ced4:	1b52      	subs	r2, r2, r5
 800ced6:	d41e      	bmi.n	800cf16 <_malloc_r+0xc6>
 800ced8:	2a0b      	cmp	r2, #11
 800ceda:	d916      	bls.n	800cf0a <_malloc_r+0xba>
 800cedc:	1961      	adds	r1, r4, r5
 800cede:	42a3      	cmp	r3, r4
 800cee0:	6025      	str	r5, [r4, #0]
 800cee2:	bf18      	it	ne
 800cee4:	6059      	strne	r1, [r3, #4]
 800cee6:	6863      	ldr	r3, [r4, #4]
 800cee8:	bf08      	it	eq
 800ceea:	6031      	streq	r1, [r6, #0]
 800ceec:	5162      	str	r2, [r4, r5]
 800ceee:	604b      	str	r3, [r1, #4]
 800cef0:	4638      	mov	r0, r7
 800cef2:	f104 060b 	add.w	r6, r4, #11
 800cef6:	f000 fd41 	bl	800d97c <__malloc_unlock>
 800cefa:	f026 0607 	bic.w	r6, r6, #7
 800cefe:	1d23      	adds	r3, r4, #4
 800cf00:	1af2      	subs	r2, r6, r3
 800cf02:	d0b6      	beq.n	800ce72 <_malloc_r+0x22>
 800cf04:	1b9b      	subs	r3, r3, r6
 800cf06:	50a3      	str	r3, [r4, r2]
 800cf08:	e7b3      	b.n	800ce72 <_malloc_r+0x22>
 800cf0a:	6862      	ldr	r2, [r4, #4]
 800cf0c:	42a3      	cmp	r3, r4
 800cf0e:	bf0c      	ite	eq
 800cf10:	6032      	streq	r2, [r6, #0]
 800cf12:	605a      	strne	r2, [r3, #4]
 800cf14:	e7ec      	b.n	800cef0 <_malloc_r+0xa0>
 800cf16:	4623      	mov	r3, r4
 800cf18:	6864      	ldr	r4, [r4, #4]
 800cf1a:	e7b2      	b.n	800ce82 <_malloc_r+0x32>
 800cf1c:	4634      	mov	r4, r6
 800cf1e:	6876      	ldr	r6, [r6, #4]
 800cf20:	e7b9      	b.n	800ce96 <_malloc_r+0x46>
 800cf22:	230c      	movs	r3, #12
 800cf24:	603b      	str	r3, [r7, #0]
 800cf26:	4638      	mov	r0, r7
 800cf28:	f000 fd28 	bl	800d97c <__malloc_unlock>
 800cf2c:	e7a1      	b.n	800ce72 <_malloc_r+0x22>
 800cf2e:	6025      	str	r5, [r4, #0]
 800cf30:	e7de      	b.n	800cef0 <_malloc_r+0xa0>
 800cf32:	bf00      	nop
 800cf34:	200037d4 	.word	0x200037d4

0800cf38 <__ssputs_r>:
 800cf38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf3c:	688e      	ldr	r6, [r1, #8]
 800cf3e:	429e      	cmp	r6, r3
 800cf40:	4682      	mov	sl, r0
 800cf42:	460c      	mov	r4, r1
 800cf44:	4690      	mov	r8, r2
 800cf46:	461f      	mov	r7, r3
 800cf48:	d838      	bhi.n	800cfbc <__ssputs_r+0x84>
 800cf4a:	898a      	ldrh	r2, [r1, #12]
 800cf4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf50:	d032      	beq.n	800cfb8 <__ssputs_r+0x80>
 800cf52:	6825      	ldr	r5, [r4, #0]
 800cf54:	6909      	ldr	r1, [r1, #16]
 800cf56:	eba5 0901 	sub.w	r9, r5, r1
 800cf5a:	6965      	ldr	r5, [r4, #20]
 800cf5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf64:	3301      	adds	r3, #1
 800cf66:	444b      	add	r3, r9
 800cf68:	106d      	asrs	r5, r5, #1
 800cf6a:	429d      	cmp	r5, r3
 800cf6c:	bf38      	it	cc
 800cf6e:	461d      	movcc	r5, r3
 800cf70:	0553      	lsls	r3, r2, #21
 800cf72:	d531      	bpl.n	800cfd8 <__ssputs_r+0xa0>
 800cf74:	4629      	mov	r1, r5
 800cf76:	f7ff ff6b 	bl	800ce50 <_malloc_r>
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	b950      	cbnz	r0, 800cf94 <__ssputs_r+0x5c>
 800cf7e:	230c      	movs	r3, #12
 800cf80:	f8ca 3000 	str.w	r3, [sl]
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf8a:	81a3      	strh	r3, [r4, #12]
 800cf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf94:	6921      	ldr	r1, [r4, #16]
 800cf96:	464a      	mov	r2, r9
 800cf98:	f000 fcc2 	bl	800d920 <memcpy>
 800cf9c:	89a3      	ldrh	r3, [r4, #12]
 800cf9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa6:	81a3      	strh	r3, [r4, #12]
 800cfa8:	6126      	str	r6, [r4, #16]
 800cfaa:	6165      	str	r5, [r4, #20]
 800cfac:	444e      	add	r6, r9
 800cfae:	eba5 0509 	sub.w	r5, r5, r9
 800cfb2:	6026      	str	r6, [r4, #0]
 800cfb4:	60a5      	str	r5, [r4, #8]
 800cfb6:	463e      	mov	r6, r7
 800cfb8:	42be      	cmp	r6, r7
 800cfba:	d900      	bls.n	800cfbe <__ssputs_r+0x86>
 800cfbc:	463e      	mov	r6, r7
 800cfbe:	6820      	ldr	r0, [r4, #0]
 800cfc0:	4632      	mov	r2, r6
 800cfc2:	4641      	mov	r1, r8
 800cfc4:	f000 fcba 	bl	800d93c <memmove>
 800cfc8:	68a3      	ldr	r3, [r4, #8]
 800cfca:	1b9b      	subs	r3, r3, r6
 800cfcc:	60a3      	str	r3, [r4, #8]
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	4433      	add	r3, r6
 800cfd2:	6023      	str	r3, [r4, #0]
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e7db      	b.n	800cf90 <__ssputs_r+0x58>
 800cfd8:	462a      	mov	r2, r5
 800cfda:	f000 fcd5 	bl	800d988 <_realloc_r>
 800cfde:	4606      	mov	r6, r0
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d1e1      	bne.n	800cfa8 <__ssputs_r+0x70>
 800cfe4:	6921      	ldr	r1, [r4, #16]
 800cfe6:	4650      	mov	r0, sl
 800cfe8:	f7ff fec6 	bl	800cd78 <_free_r>
 800cfec:	e7c7      	b.n	800cf7e <__ssputs_r+0x46>
	...

0800cff0 <_svfiprintf_r>:
 800cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff4:	4698      	mov	r8, r3
 800cff6:	898b      	ldrh	r3, [r1, #12]
 800cff8:	061b      	lsls	r3, r3, #24
 800cffa:	b09d      	sub	sp, #116	; 0x74
 800cffc:	4607      	mov	r7, r0
 800cffe:	460d      	mov	r5, r1
 800d000:	4614      	mov	r4, r2
 800d002:	d50e      	bpl.n	800d022 <_svfiprintf_r+0x32>
 800d004:	690b      	ldr	r3, [r1, #16]
 800d006:	b963      	cbnz	r3, 800d022 <_svfiprintf_r+0x32>
 800d008:	2140      	movs	r1, #64	; 0x40
 800d00a:	f7ff ff21 	bl	800ce50 <_malloc_r>
 800d00e:	6028      	str	r0, [r5, #0]
 800d010:	6128      	str	r0, [r5, #16]
 800d012:	b920      	cbnz	r0, 800d01e <_svfiprintf_r+0x2e>
 800d014:	230c      	movs	r3, #12
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	f04f 30ff 	mov.w	r0, #4294967295
 800d01c:	e0d1      	b.n	800d1c2 <_svfiprintf_r+0x1d2>
 800d01e:	2340      	movs	r3, #64	; 0x40
 800d020:	616b      	str	r3, [r5, #20]
 800d022:	2300      	movs	r3, #0
 800d024:	9309      	str	r3, [sp, #36]	; 0x24
 800d026:	2320      	movs	r3, #32
 800d028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d030:	2330      	movs	r3, #48	; 0x30
 800d032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d1dc <_svfiprintf_r+0x1ec>
 800d036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d03a:	f04f 0901 	mov.w	r9, #1
 800d03e:	4623      	mov	r3, r4
 800d040:	469a      	mov	sl, r3
 800d042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d046:	b10a      	cbz	r2, 800d04c <_svfiprintf_r+0x5c>
 800d048:	2a25      	cmp	r2, #37	; 0x25
 800d04a:	d1f9      	bne.n	800d040 <_svfiprintf_r+0x50>
 800d04c:	ebba 0b04 	subs.w	fp, sl, r4
 800d050:	d00b      	beq.n	800d06a <_svfiprintf_r+0x7a>
 800d052:	465b      	mov	r3, fp
 800d054:	4622      	mov	r2, r4
 800d056:	4629      	mov	r1, r5
 800d058:	4638      	mov	r0, r7
 800d05a:	f7ff ff6d 	bl	800cf38 <__ssputs_r>
 800d05e:	3001      	adds	r0, #1
 800d060:	f000 80aa 	beq.w	800d1b8 <_svfiprintf_r+0x1c8>
 800d064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d066:	445a      	add	r2, fp
 800d068:	9209      	str	r2, [sp, #36]	; 0x24
 800d06a:	f89a 3000 	ldrb.w	r3, [sl]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f000 80a2 	beq.w	800d1b8 <_svfiprintf_r+0x1c8>
 800d074:	2300      	movs	r3, #0
 800d076:	f04f 32ff 	mov.w	r2, #4294967295
 800d07a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d07e:	f10a 0a01 	add.w	sl, sl, #1
 800d082:	9304      	str	r3, [sp, #16]
 800d084:	9307      	str	r3, [sp, #28]
 800d086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d08a:	931a      	str	r3, [sp, #104]	; 0x68
 800d08c:	4654      	mov	r4, sl
 800d08e:	2205      	movs	r2, #5
 800d090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d094:	4851      	ldr	r0, [pc, #324]	; (800d1dc <_svfiprintf_r+0x1ec>)
 800d096:	f7f3 f89b 	bl	80001d0 <memchr>
 800d09a:	9a04      	ldr	r2, [sp, #16]
 800d09c:	b9d8      	cbnz	r0, 800d0d6 <_svfiprintf_r+0xe6>
 800d09e:	06d0      	lsls	r0, r2, #27
 800d0a0:	bf44      	itt	mi
 800d0a2:	2320      	movmi	r3, #32
 800d0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0a8:	0711      	lsls	r1, r2, #28
 800d0aa:	bf44      	itt	mi
 800d0ac:	232b      	movmi	r3, #43	; 0x2b
 800d0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d0b8:	d015      	beq.n	800d0e6 <_svfiprintf_r+0xf6>
 800d0ba:	9a07      	ldr	r2, [sp, #28]
 800d0bc:	4654      	mov	r4, sl
 800d0be:	2000      	movs	r0, #0
 800d0c0:	f04f 0c0a 	mov.w	ip, #10
 800d0c4:	4621      	mov	r1, r4
 800d0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0ca:	3b30      	subs	r3, #48	; 0x30
 800d0cc:	2b09      	cmp	r3, #9
 800d0ce:	d94e      	bls.n	800d16e <_svfiprintf_r+0x17e>
 800d0d0:	b1b0      	cbz	r0, 800d100 <_svfiprintf_r+0x110>
 800d0d2:	9207      	str	r2, [sp, #28]
 800d0d4:	e014      	b.n	800d100 <_svfiprintf_r+0x110>
 800d0d6:	eba0 0308 	sub.w	r3, r0, r8
 800d0da:	fa09 f303 	lsl.w	r3, r9, r3
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	9304      	str	r3, [sp, #16]
 800d0e2:	46a2      	mov	sl, r4
 800d0e4:	e7d2      	b.n	800d08c <_svfiprintf_r+0x9c>
 800d0e6:	9b03      	ldr	r3, [sp, #12]
 800d0e8:	1d19      	adds	r1, r3, #4
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	9103      	str	r1, [sp, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	bfbb      	ittet	lt
 800d0f2:	425b      	neglt	r3, r3
 800d0f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d0f8:	9307      	strge	r3, [sp, #28]
 800d0fa:	9307      	strlt	r3, [sp, #28]
 800d0fc:	bfb8      	it	lt
 800d0fe:	9204      	strlt	r2, [sp, #16]
 800d100:	7823      	ldrb	r3, [r4, #0]
 800d102:	2b2e      	cmp	r3, #46	; 0x2e
 800d104:	d10c      	bne.n	800d120 <_svfiprintf_r+0x130>
 800d106:	7863      	ldrb	r3, [r4, #1]
 800d108:	2b2a      	cmp	r3, #42	; 0x2a
 800d10a:	d135      	bne.n	800d178 <_svfiprintf_r+0x188>
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	1d1a      	adds	r2, r3, #4
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	9203      	str	r2, [sp, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	bfb8      	it	lt
 800d118:	f04f 33ff 	movlt.w	r3, #4294967295
 800d11c:	3402      	adds	r4, #2
 800d11e:	9305      	str	r3, [sp, #20]
 800d120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1ec <_svfiprintf_r+0x1fc>
 800d124:	7821      	ldrb	r1, [r4, #0]
 800d126:	2203      	movs	r2, #3
 800d128:	4650      	mov	r0, sl
 800d12a:	f7f3 f851 	bl	80001d0 <memchr>
 800d12e:	b140      	cbz	r0, 800d142 <_svfiprintf_r+0x152>
 800d130:	2340      	movs	r3, #64	; 0x40
 800d132:	eba0 000a 	sub.w	r0, r0, sl
 800d136:	fa03 f000 	lsl.w	r0, r3, r0
 800d13a:	9b04      	ldr	r3, [sp, #16]
 800d13c:	4303      	orrs	r3, r0
 800d13e:	3401      	adds	r4, #1
 800d140:	9304      	str	r3, [sp, #16]
 800d142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d146:	4826      	ldr	r0, [pc, #152]	; (800d1e0 <_svfiprintf_r+0x1f0>)
 800d148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d14c:	2206      	movs	r2, #6
 800d14e:	f7f3 f83f 	bl	80001d0 <memchr>
 800d152:	2800      	cmp	r0, #0
 800d154:	d038      	beq.n	800d1c8 <_svfiprintf_r+0x1d8>
 800d156:	4b23      	ldr	r3, [pc, #140]	; (800d1e4 <_svfiprintf_r+0x1f4>)
 800d158:	bb1b      	cbnz	r3, 800d1a2 <_svfiprintf_r+0x1b2>
 800d15a:	9b03      	ldr	r3, [sp, #12]
 800d15c:	3307      	adds	r3, #7
 800d15e:	f023 0307 	bic.w	r3, r3, #7
 800d162:	3308      	adds	r3, #8
 800d164:	9303      	str	r3, [sp, #12]
 800d166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d168:	4433      	add	r3, r6
 800d16a:	9309      	str	r3, [sp, #36]	; 0x24
 800d16c:	e767      	b.n	800d03e <_svfiprintf_r+0x4e>
 800d16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d172:	460c      	mov	r4, r1
 800d174:	2001      	movs	r0, #1
 800d176:	e7a5      	b.n	800d0c4 <_svfiprintf_r+0xd4>
 800d178:	2300      	movs	r3, #0
 800d17a:	3401      	adds	r4, #1
 800d17c:	9305      	str	r3, [sp, #20]
 800d17e:	4619      	mov	r1, r3
 800d180:	f04f 0c0a 	mov.w	ip, #10
 800d184:	4620      	mov	r0, r4
 800d186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d18a:	3a30      	subs	r2, #48	; 0x30
 800d18c:	2a09      	cmp	r2, #9
 800d18e:	d903      	bls.n	800d198 <_svfiprintf_r+0x1a8>
 800d190:	2b00      	cmp	r3, #0
 800d192:	d0c5      	beq.n	800d120 <_svfiprintf_r+0x130>
 800d194:	9105      	str	r1, [sp, #20]
 800d196:	e7c3      	b.n	800d120 <_svfiprintf_r+0x130>
 800d198:	fb0c 2101 	mla	r1, ip, r1, r2
 800d19c:	4604      	mov	r4, r0
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e7f0      	b.n	800d184 <_svfiprintf_r+0x194>
 800d1a2:	ab03      	add	r3, sp, #12
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	462a      	mov	r2, r5
 800d1a8:	4b0f      	ldr	r3, [pc, #60]	; (800d1e8 <_svfiprintf_r+0x1f8>)
 800d1aa:	a904      	add	r1, sp, #16
 800d1ac:	4638      	mov	r0, r7
 800d1ae:	f3af 8000 	nop.w
 800d1b2:	1c42      	adds	r2, r0, #1
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	d1d6      	bne.n	800d166 <_svfiprintf_r+0x176>
 800d1b8:	89ab      	ldrh	r3, [r5, #12]
 800d1ba:	065b      	lsls	r3, r3, #25
 800d1bc:	f53f af2c 	bmi.w	800d018 <_svfiprintf_r+0x28>
 800d1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1c2:	b01d      	add	sp, #116	; 0x74
 800d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c8:	ab03      	add	r3, sp, #12
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	462a      	mov	r2, r5
 800d1ce:	4b06      	ldr	r3, [pc, #24]	; (800d1e8 <_svfiprintf_r+0x1f8>)
 800d1d0:	a904      	add	r1, sp, #16
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	f000 f9d4 	bl	800d580 <_printf_i>
 800d1d8:	e7eb      	b.n	800d1b2 <_svfiprintf_r+0x1c2>
 800d1da:	bf00      	nop
 800d1dc:	0800e1d4 	.word	0x0800e1d4
 800d1e0:	0800e1de 	.word	0x0800e1de
 800d1e4:	00000000 	.word	0x00000000
 800d1e8:	0800cf39 	.word	0x0800cf39
 800d1ec:	0800e1da 	.word	0x0800e1da

0800d1f0 <__sfputc_r>:
 800d1f0:	6893      	ldr	r3, [r2, #8]
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	b410      	push	{r4}
 800d1f8:	6093      	str	r3, [r2, #8]
 800d1fa:	da08      	bge.n	800d20e <__sfputc_r+0x1e>
 800d1fc:	6994      	ldr	r4, [r2, #24]
 800d1fe:	42a3      	cmp	r3, r4
 800d200:	db01      	blt.n	800d206 <__sfputc_r+0x16>
 800d202:	290a      	cmp	r1, #10
 800d204:	d103      	bne.n	800d20e <__sfputc_r+0x1e>
 800d206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d20a:	f7ff bad5 	b.w	800c7b8 <__swbuf_r>
 800d20e:	6813      	ldr	r3, [r2, #0]
 800d210:	1c58      	adds	r0, r3, #1
 800d212:	6010      	str	r0, [r2, #0]
 800d214:	7019      	strb	r1, [r3, #0]
 800d216:	4608      	mov	r0, r1
 800d218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <__sfputs_r>:
 800d21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d220:	4606      	mov	r6, r0
 800d222:	460f      	mov	r7, r1
 800d224:	4614      	mov	r4, r2
 800d226:	18d5      	adds	r5, r2, r3
 800d228:	42ac      	cmp	r4, r5
 800d22a:	d101      	bne.n	800d230 <__sfputs_r+0x12>
 800d22c:	2000      	movs	r0, #0
 800d22e:	e007      	b.n	800d240 <__sfputs_r+0x22>
 800d230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d234:	463a      	mov	r2, r7
 800d236:	4630      	mov	r0, r6
 800d238:	f7ff ffda 	bl	800d1f0 <__sfputc_r>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	d1f3      	bne.n	800d228 <__sfputs_r+0xa>
 800d240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d244 <_vfiprintf_r>:
 800d244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d248:	460d      	mov	r5, r1
 800d24a:	b09d      	sub	sp, #116	; 0x74
 800d24c:	4614      	mov	r4, r2
 800d24e:	4698      	mov	r8, r3
 800d250:	4606      	mov	r6, r0
 800d252:	b118      	cbz	r0, 800d25c <_vfiprintf_r+0x18>
 800d254:	6983      	ldr	r3, [r0, #24]
 800d256:	b90b      	cbnz	r3, 800d25c <_vfiprintf_r+0x18>
 800d258:	f7ff fc88 	bl	800cb6c <__sinit>
 800d25c:	4b89      	ldr	r3, [pc, #548]	; (800d484 <_vfiprintf_r+0x240>)
 800d25e:	429d      	cmp	r5, r3
 800d260:	d11b      	bne.n	800d29a <_vfiprintf_r+0x56>
 800d262:	6875      	ldr	r5, [r6, #4]
 800d264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d266:	07d9      	lsls	r1, r3, #31
 800d268:	d405      	bmi.n	800d276 <_vfiprintf_r+0x32>
 800d26a:	89ab      	ldrh	r3, [r5, #12]
 800d26c:	059a      	lsls	r2, r3, #22
 800d26e:	d402      	bmi.n	800d276 <_vfiprintf_r+0x32>
 800d270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d272:	f7ff fd19 	bl	800cca8 <__retarget_lock_acquire_recursive>
 800d276:	89ab      	ldrh	r3, [r5, #12]
 800d278:	071b      	lsls	r3, r3, #28
 800d27a:	d501      	bpl.n	800d280 <_vfiprintf_r+0x3c>
 800d27c:	692b      	ldr	r3, [r5, #16]
 800d27e:	b9eb      	cbnz	r3, 800d2bc <_vfiprintf_r+0x78>
 800d280:	4629      	mov	r1, r5
 800d282:	4630      	mov	r0, r6
 800d284:	f7ff faea 	bl	800c85c <__swsetup_r>
 800d288:	b1c0      	cbz	r0, 800d2bc <_vfiprintf_r+0x78>
 800d28a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d28c:	07dc      	lsls	r4, r3, #31
 800d28e:	d50e      	bpl.n	800d2ae <_vfiprintf_r+0x6a>
 800d290:	f04f 30ff 	mov.w	r0, #4294967295
 800d294:	b01d      	add	sp, #116	; 0x74
 800d296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29a:	4b7b      	ldr	r3, [pc, #492]	; (800d488 <_vfiprintf_r+0x244>)
 800d29c:	429d      	cmp	r5, r3
 800d29e:	d101      	bne.n	800d2a4 <_vfiprintf_r+0x60>
 800d2a0:	68b5      	ldr	r5, [r6, #8]
 800d2a2:	e7df      	b.n	800d264 <_vfiprintf_r+0x20>
 800d2a4:	4b79      	ldr	r3, [pc, #484]	; (800d48c <_vfiprintf_r+0x248>)
 800d2a6:	429d      	cmp	r5, r3
 800d2a8:	bf08      	it	eq
 800d2aa:	68f5      	ldreq	r5, [r6, #12]
 800d2ac:	e7da      	b.n	800d264 <_vfiprintf_r+0x20>
 800d2ae:	89ab      	ldrh	r3, [r5, #12]
 800d2b0:	0598      	lsls	r0, r3, #22
 800d2b2:	d4ed      	bmi.n	800d290 <_vfiprintf_r+0x4c>
 800d2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2b6:	f7ff fcf8 	bl	800ccaa <__retarget_lock_release_recursive>
 800d2ba:	e7e9      	b.n	800d290 <_vfiprintf_r+0x4c>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c0:	2320      	movs	r3, #32
 800d2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ca:	2330      	movs	r3, #48	; 0x30
 800d2cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d490 <_vfiprintf_r+0x24c>
 800d2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2d4:	f04f 0901 	mov.w	r9, #1
 800d2d8:	4623      	mov	r3, r4
 800d2da:	469a      	mov	sl, r3
 800d2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e0:	b10a      	cbz	r2, 800d2e6 <_vfiprintf_r+0xa2>
 800d2e2:	2a25      	cmp	r2, #37	; 0x25
 800d2e4:	d1f9      	bne.n	800d2da <_vfiprintf_r+0x96>
 800d2e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ea:	d00b      	beq.n	800d304 <_vfiprintf_r+0xc0>
 800d2ec:	465b      	mov	r3, fp
 800d2ee:	4622      	mov	r2, r4
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f7ff ff93 	bl	800d21e <__sfputs_r>
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	f000 80aa 	beq.w	800d452 <_vfiprintf_r+0x20e>
 800d2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d300:	445a      	add	r2, fp
 800d302:	9209      	str	r2, [sp, #36]	; 0x24
 800d304:	f89a 3000 	ldrb.w	r3, [sl]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 80a2 	beq.w	800d452 <_vfiprintf_r+0x20e>
 800d30e:	2300      	movs	r3, #0
 800d310:	f04f 32ff 	mov.w	r2, #4294967295
 800d314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d318:	f10a 0a01 	add.w	sl, sl, #1
 800d31c:	9304      	str	r3, [sp, #16]
 800d31e:	9307      	str	r3, [sp, #28]
 800d320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d324:	931a      	str	r3, [sp, #104]	; 0x68
 800d326:	4654      	mov	r4, sl
 800d328:	2205      	movs	r2, #5
 800d32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d32e:	4858      	ldr	r0, [pc, #352]	; (800d490 <_vfiprintf_r+0x24c>)
 800d330:	f7f2 ff4e 	bl	80001d0 <memchr>
 800d334:	9a04      	ldr	r2, [sp, #16]
 800d336:	b9d8      	cbnz	r0, 800d370 <_vfiprintf_r+0x12c>
 800d338:	06d1      	lsls	r1, r2, #27
 800d33a:	bf44      	itt	mi
 800d33c:	2320      	movmi	r3, #32
 800d33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d342:	0713      	lsls	r3, r2, #28
 800d344:	bf44      	itt	mi
 800d346:	232b      	movmi	r3, #43	; 0x2b
 800d348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d34c:	f89a 3000 	ldrb.w	r3, [sl]
 800d350:	2b2a      	cmp	r3, #42	; 0x2a
 800d352:	d015      	beq.n	800d380 <_vfiprintf_r+0x13c>
 800d354:	9a07      	ldr	r2, [sp, #28]
 800d356:	4654      	mov	r4, sl
 800d358:	2000      	movs	r0, #0
 800d35a:	f04f 0c0a 	mov.w	ip, #10
 800d35e:	4621      	mov	r1, r4
 800d360:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d364:	3b30      	subs	r3, #48	; 0x30
 800d366:	2b09      	cmp	r3, #9
 800d368:	d94e      	bls.n	800d408 <_vfiprintf_r+0x1c4>
 800d36a:	b1b0      	cbz	r0, 800d39a <_vfiprintf_r+0x156>
 800d36c:	9207      	str	r2, [sp, #28]
 800d36e:	e014      	b.n	800d39a <_vfiprintf_r+0x156>
 800d370:	eba0 0308 	sub.w	r3, r0, r8
 800d374:	fa09 f303 	lsl.w	r3, r9, r3
 800d378:	4313      	orrs	r3, r2
 800d37a:	9304      	str	r3, [sp, #16]
 800d37c:	46a2      	mov	sl, r4
 800d37e:	e7d2      	b.n	800d326 <_vfiprintf_r+0xe2>
 800d380:	9b03      	ldr	r3, [sp, #12]
 800d382:	1d19      	adds	r1, r3, #4
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	9103      	str	r1, [sp, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	bfbb      	ittet	lt
 800d38c:	425b      	neglt	r3, r3
 800d38e:	f042 0202 	orrlt.w	r2, r2, #2
 800d392:	9307      	strge	r3, [sp, #28]
 800d394:	9307      	strlt	r3, [sp, #28]
 800d396:	bfb8      	it	lt
 800d398:	9204      	strlt	r2, [sp, #16]
 800d39a:	7823      	ldrb	r3, [r4, #0]
 800d39c:	2b2e      	cmp	r3, #46	; 0x2e
 800d39e:	d10c      	bne.n	800d3ba <_vfiprintf_r+0x176>
 800d3a0:	7863      	ldrb	r3, [r4, #1]
 800d3a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a4:	d135      	bne.n	800d412 <_vfiprintf_r+0x1ce>
 800d3a6:	9b03      	ldr	r3, [sp, #12]
 800d3a8:	1d1a      	adds	r2, r3, #4
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	9203      	str	r2, [sp, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	bfb8      	it	lt
 800d3b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3b6:	3402      	adds	r4, #2
 800d3b8:	9305      	str	r3, [sp, #20]
 800d3ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4a0 <_vfiprintf_r+0x25c>
 800d3be:	7821      	ldrb	r1, [r4, #0]
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	4650      	mov	r0, sl
 800d3c4:	f7f2 ff04 	bl	80001d0 <memchr>
 800d3c8:	b140      	cbz	r0, 800d3dc <_vfiprintf_r+0x198>
 800d3ca:	2340      	movs	r3, #64	; 0x40
 800d3cc:	eba0 000a 	sub.w	r0, r0, sl
 800d3d0:	fa03 f000 	lsl.w	r0, r3, r0
 800d3d4:	9b04      	ldr	r3, [sp, #16]
 800d3d6:	4303      	orrs	r3, r0
 800d3d8:	3401      	adds	r4, #1
 800d3da:	9304      	str	r3, [sp, #16]
 800d3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e0:	482c      	ldr	r0, [pc, #176]	; (800d494 <_vfiprintf_r+0x250>)
 800d3e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3e6:	2206      	movs	r2, #6
 800d3e8:	f7f2 fef2 	bl	80001d0 <memchr>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	d03f      	beq.n	800d470 <_vfiprintf_r+0x22c>
 800d3f0:	4b29      	ldr	r3, [pc, #164]	; (800d498 <_vfiprintf_r+0x254>)
 800d3f2:	bb1b      	cbnz	r3, 800d43c <_vfiprintf_r+0x1f8>
 800d3f4:	9b03      	ldr	r3, [sp, #12]
 800d3f6:	3307      	adds	r3, #7
 800d3f8:	f023 0307 	bic.w	r3, r3, #7
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	9303      	str	r3, [sp, #12]
 800d400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d402:	443b      	add	r3, r7
 800d404:	9309      	str	r3, [sp, #36]	; 0x24
 800d406:	e767      	b.n	800d2d8 <_vfiprintf_r+0x94>
 800d408:	fb0c 3202 	mla	r2, ip, r2, r3
 800d40c:	460c      	mov	r4, r1
 800d40e:	2001      	movs	r0, #1
 800d410:	e7a5      	b.n	800d35e <_vfiprintf_r+0x11a>
 800d412:	2300      	movs	r3, #0
 800d414:	3401      	adds	r4, #1
 800d416:	9305      	str	r3, [sp, #20]
 800d418:	4619      	mov	r1, r3
 800d41a:	f04f 0c0a 	mov.w	ip, #10
 800d41e:	4620      	mov	r0, r4
 800d420:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d424:	3a30      	subs	r2, #48	; 0x30
 800d426:	2a09      	cmp	r2, #9
 800d428:	d903      	bls.n	800d432 <_vfiprintf_r+0x1ee>
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d0c5      	beq.n	800d3ba <_vfiprintf_r+0x176>
 800d42e:	9105      	str	r1, [sp, #20]
 800d430:	e7c3      	b.n	800d3ba <_vfiprintf_r+0x176>
 800d432:	fb0c 2101 	mla	r1, ip, r1, r2
 800d436:	4604      	mov	r4, r0
 800d438:	2301      	movs	r3, #1
 800d43a:	e7f0      	b.n	800d41e <_vfiprintf_r+0x1da>
 800d43c:	ab03      	add	r3, sp, #12
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	462a      	mov	r2, r5
 800d442:	4b16      	ldr	r3, [pc, #88]	; (800d49c <_vfiprintf_r+0x258>)
 800d444:	a904      	add	r1, sp, #16
 800d446:	4630      	mov	r0, r6
 800d448:	f3af 8000 	nop.w
 800d44c:	4607      	mov	r7, r0
 800d44e:	1c78      	adds	r0, r7, #1
 800d450:	d1d6      	bne.n	800d400 <_vfiprintf_r+0x1bc>
 800d452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d454:	07d9      	lsls	r1, r3, #31
 800d456:	d405      	bmi.n	800d464 <_vfiprintf_r+0x220>
 800d458:	89ab      	ldrh	r3, [r5, #12]
 800d45a:	059a      	lsls	r2, r3, #22
 800d45c:	d402      	bmi.n	800d464 <_vfiprintf_r+0x220>
 800d45e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d460:	f7ff fc23 	bl	800ccaa <__retarget_lock_release_recursive>
 800d464:	89ab      	ldrh	r3, [r5, #12]
 800d466:	065b      	lsls	r3, r3, #25
 800d468:	f53f af12 	bmi.w	800d290 <_vfiprintf_r+0x4c>
 800d46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d46e:	e711      	b.n	800d294 <_vfiprintf_r+0x50>
 800d470:	ab03      	add	r3, sp, #12
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	462a      	mov	r2, r5
 800d476:	4b09      	ldr	r3, [pc, #36]	; (800d49c <_vfiprintf_r+0x258>)
 800d478:	a904      	add	r1, sp, #16
 800d47a:	4630      	mov	r0, r6
 800d47c:	f000 f880 	bl	800d580 <_printf_i>
 800d480:	e7e4      	b.n	800d44c <_vfiprintf_r+0x208>
 800d482:	bf00      	nop
 800d484:	0800e194 	.word	0x0800e194
 800d488:	0800e1b4 	.word	0x0800e1b4
 800d48c:	0800e174 	.word	0x0800e174
 800d490:	0800e1d4 	.word	0x0800e1d4
 800d494:	0800e1de 	.word	0x0800e1de
 800d498:	00000000 	.word	0x00000000
 800d49c:	0800d21f 	.word	0x0800d21f
 800d4a0:	0800e1da 	.word	0x0800e1da

0800d4a4 <_printf_common>:
 800d4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a8:	4616      	mov	r6, r2
 800d4aa:	4699      	mov	r9, r3
 800d4ac:	688a      	ldr	r2, [r1, #8]
 800d4ae:	690b      	ldr	r3, [r1, #16]
 800d4b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	bfb8      	it	lt
 800d4b8:	4613      	movlt	r3, r2
 800d4ba:	6033      	str	r3, [r6, #0]
 800d4bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4c0:	4607      	mov	r7, r0
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	b10a      	cbz	r2, 800d4ca <_printf_common+0x26>
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	6033      	str	r3, [r6, #0]
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	0699      	lsls	r1, r3, #26
 800d4ce:	bf42      	ittt	mi
 800d4d0:	6833      	ldrmi	r3, [r6, #0]
 800d4d2:	3302      	addmi	r3, #2
 800d4d4:	6033      	strmi	r3, [r6, #0]
 800d4d6:	6825      	ldr	r5, [r4, #0]
 800d4d8:	f015 0506 	ands.w	r5, r5, #6
 800d4dc:	d106      	bne.n	800d4ec <_printf_common+0x48>
 800d4de:	f104 0a19 	add.w	sl, r4, #25
 800d4e2:	68e3      	ldr	r3, [r4, #12]
 800d4e4:	6832      	ldr	r2, [r6, #0]
 800d4e6:	1a9b      	subs	r3, r3, r2
 800d4e8:	42ab      	cmp	r3, r5
 800d4ea:	dc26      	bgt.n	800d53a <_printf_common+0x96>
 800d4ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4f0:	1e13      	subs	r3, r2, #0
 800d4f2:	6822      	ldr	r2, [r4, #0]
 800d4f4:	bf18      	it	ne
 800d4f6:	2301      	movne	r3, #1
 800d4f8:	0692      	lsls	r2, r2, #26
 800d4fa:	d42b      	bmi.n	800d554 <_printf_common+0xb0>
 800d4fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d500:	4649      	mov	r1, r9
 800d502:	4638      	mov	r0, r7
 800d504:	47c0      	blx	r8
 800d506:	3001      	adds	r0, #1
 800d508:	d01e      	beq.n	800d548 <_printf_common+0xa4>
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	68e5      	ldr	r5, [r4, #12]
 800d50e:	6832      	ldr	r2, [r6, #0]
 800d510:	f003 0306 	and.w	r3, r3, #6
 800d514:	2b04      	cmp	r3, #4
 800d516:	bf08      	it	eq
 800d518:	1aad      	subeq	r5, r5, r2
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	6922      	ldr	r2, [r4, #16]
 800d51e:	bf0c      	ite	eq
 800d520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d524:	2500      	movne	r5, #0
 800d526:	4293      	cmp	r3, r2
 800d528:	bfc4      	itt	gt
 800d52a:	1a9b      	subgt	r3, r3, r2
 800d52c:	18ed      	addgt	r5, r5, r3
 800d52e:	2600      	movs	r6, #0
 800d530:	341a      	adds	r4, #26
 800d532:	42b5      	cmp	r5, r6
 800d534:	d11a      	bne.n	800d56c <_printf_common+0xc8>
 800d536:	2000      	movs	r0, #0
 800d538:	e008      	b.n	800d54c <_printf_common+0xa8>
 800d53a:	2301      	movs	r3, #1
 800d53c:	4652      	mov	r2, sl
 800d53e:	4649      	mov	r1, r9
 800d540:	4638      	mov	r0, r7
 800d542:	47c0      	blx	r8
 800d544:	3001      	adds	r0, #1
 800d546:	d103      	bne.n	800d550 <_printf_common+0xac>
 800d548:	f04f 30ff 	mov.w	r0, #4294967295
 800d54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d550:	3501      	adds	r5, #1
 800d552:	e7c6      	b.n	800d4e2 <_printf_common+0x3e>
 800d554:	18e1      	adds	r1, r4, r3
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	2030      	movs	r0, #48	; 0x30
 800d55a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d55e:	4422      	add	r2, r4
 800d560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d568:	3302      	adds	r3, #2
 800d56a:	e7c7      	b.n	800d4fc <_printf_common+0x58>
 800d56c:	2301      	movs	r3, #1
 800d56e:	4622      	mov	r2, r4
 800d570:	4649      	mov	r1, r9
 800d572:	4638      	mov	r0, r7
 800d574:	47c0      	blx	r8
 800d576:	3001      	adds	r0, #1
 800d578:	d0e6      	beq.n	800d548 <_printf_common+0xa4>
 800d57a:	3601      	adds	r6, #1
 800d57c:	e7d9      	b.n	800d532 <_printf_common+0x8e>
	...

0800d580 <_printf_i>:
 800d580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d584:	7e0f      	ldrb	r7, [r1, #24]
 800d586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d588:	2f78      	cmp	r7, #120	; 0x78
 800d58a:	4691      	mov	r9, r2
 800d58c:	4680      	mov	r8, r0
 800d58e:	460c      	mov	r4, r1
 800d590:	469a      	mov	sl, r3
 800d592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d596:	d807      	bhi.n	800d5a8 <_printf_i+0x28>
 800d598:	2f62      	cmp	r7, #98	; 0x62
 800d59a:	d80a      	bhi.n	800d5b2 <_printf_i+0x32>
 800d59c:	2f00      	cmp	r7, #0
 800d59e:	f000 80d8 	beq.w	800d752 <_printf_i+0x1d2>
 800d5a2:	2f58      	cmp	r7, #88	; 0x58
 800d5a4:	f000 80a3 	beq.w	800d6ee <_printf_i+0x16e>
 800d5a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5b0:	e03a      	b.n	800d628 <_printf_i+0xa8>
 800d5b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5b6:	2b15      	cmp	r3, #21
 800d5b8:	d8f6      	bhi.n	800d5a8 <_printf_i+0x28>
 800d5ba:	a101      	add	r1, pc, #4	; (adr r1, 800d5c0 <_printf_i+0x40>)
 800d5bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5c0:	0800d619 	.word	0x0800d619
 800d5c4:	0800d62d 	.word	0x0800d62d
 800d5c8:	0800d5a9 	.word	0x0800d5a9
 800d5cc:	0800d5a9 	.word	0x0800d5a9
 800d5d0:	0800d5a9 	.word	0x0800d5a9
 800d5d4:	0800d5a9 	.word	0x0800d5a9
 800d5d8:	0800d62d 	.word	0x0800d62d
 800d5dc:	0800d5a9 	.word	0x0800d5a9
 800d5e0:	0800d5a9 	.word	0x0800d5a9
 800d5e4:	0800d5a9 	.word	0x0800d5a9
 800d5e8:	0800d5a9 	.word	0x0800d5a9
 800d5ec:	0800d739 	.word	0x0800d739
 800d5f0:	0800d65d 	.word	0x0800d65d
 800d5f4:	0800d71b 	.word	0x0800d71b
 800d5f8:	0800d5a9 	.word	0x0800d5a9
 800d5fc:	0800d5a9 	.word	0x0800d5a9
 800d600:	0800d75b 	.word	0x0800d75b
 800d604:	0800d5a9 	.word	0x0800d5a9
 800d608:	0800d65d 	.word	0x0800d65d
 800d60c:	0800d5a9 	.word	0x0800d5a9
 800d610:	0800d5a9 	.word	0x0800d5a9
 800d614:	0800d723 	.word	0x0800d723
 800d618:	682b      	ldr	r3, [r5, #0]
 800d61a:	1d1a      	adds	r2, r3, #4
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	602a      	str	r2, [r5, #0]
 800d620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d628:	2301      	movs	r3, #1
 800d62a:	e0a3      	b.n	800d774 <_printf_i+0x1f4>
 800d62c:	6820      	ldr	r0, [r4, #0]
 800d62e:	6829      	ldr	r1, [r5, #0]
 800d630:	0606      	lsls	r6, r0, #24
 800d632:	f101 0304 	add.w	r3, r1, #4
 800d636:	d50a      	bpl.n	800d64e <_printf_i+0xce>
 800d638:	680e      	ldr	r6, [r1, #0]
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	2e00      	cmp	r6, #0
 800d63e:	da03      	bge.n	800d648 <_printf_i+0xc8>
 800d640:	232d      	movs	r3, #45	; 0x2d
 800d642:	4276      	negs	r6, r6
 800d644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d648:	485e      	ldr	r0, [pc, #376]	; (800d7c4 <_printf_i+0x244>)
 800d64a:	230a      	movs	r3, #10
 800d64c:	e019      	b.n	800d682 <_printf_i+0x102>
 800d64e:	680e      	ldr	r6, [r1, #0]
 800d650:	602b      	str	r3, [r5, #0]
 800d652:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d656:	bf18      	it	ne
 800d658:	b236      	sxthne	r6, r6
 800d65a:	e7ef      	b.n	800d63c <_printf_i+0xbc>
 800d65c:	682b      	ldr	r3, [r5, #0]
 800d65e:	6820      	ldr	r0, [r4, #0]
 800d660:	1d19      	adds	r1, r3, #4
 800d662:	6029      	str	r1, [r5, #0]
 800d664:	0601      	lsls	r1, r0, #24
 800d666:	d501      	bpl.n	800d66c <_printf_i+0xec>
 800d668:	681e      	ldr	r6, [r3, #0]
 800d66a:	e002      	b.n	800d672 <_printf_i+0xf2>
 800d66c:	0646      	lsls	r6, r0, #25
 800d66e:	d5fb      	bpl.n	800d668 <_printf_i+0xe8>
 800d670:	881e      	ldrh	r6, [r3, #0]
 800d672:	4854      	ldr	r0, [pc, #336]	; (800d7c4 <_printf_i+0x244>)
 800d674:	2f6f      	cmp	r7, #111	; 0x6f
 800d676:	bf0c      	ite	eq
 800d678:	2308      	moveq	r3, #8
 800d67a:	230a      	movne	r3, #10
 800d67c:	2100      	movs	r1, #0
 800d67e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d682:	6865      	ldr	r5, [r4, #4]
 800d684:	60a5      	str	r5, [r4, #8]
 800d686:	2d00      	cmp	r5, #0
 800d688:	bfa2      	ittt	ge
 800d68a:	6821      	ldrge	r1, [r4, #0]
 800d68c:	f021 0104 	bicge.w	r1, r1, #4
 800d690:	6021      	strge	r1, [r4, #0]
 800d692:	b90e      	cbnz	r6, 800d698 <_printf_i+0x118>
 800d694:	2d00      	cmp	r5, #0
 800d696:	d04d      	beq.n	800d734 <_printf_i+0x1b4>
 800d698:	4615      	mov	r5, r2
 800d69a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d69e:	fb03 6711 	mls	r7, r3, r1, r6
 800d6a2:	5dc7      	ldrb	r7, [r0, r7]
 800d6a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6a8:	4637      	mov	r7, r6
 800d6aa:	42bb      	cmp	r3, r7
 800d6ac:	460e      	mov	r6, r1
 800d6ae:	d9f4      	bls.n	800d69a <_printf_i+0x11a>
 800d6b0:	2b08      	cmp	r3, #8
 800d6b2:	d10b      	bne.n	800d6cc <_printf_i+0x14c>
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	07de      	lsls	r6, r3, #31
 800d6b8:	d508      	bpl.n	800d6cc <_printf_i+0x14c>
 800d6ba:	6923      	ldr	r3, [r4, #16]
 800d6bc:	6861      	ldr	r1, [r4, #4]
 800d6be:	4299      	cmp	r1, r3
 800d6c0:	bfde      	ittt	le
 800d6c2:	2330      	movle	r3, #48	; 0x30
 800d6c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6cc:	1b52      	subs	r2, r2, r5
 800d6ce:	6122      	str	r2, [r4, #16]
 800d6d0:	f8cd a000 	str.w	sl, [sp]
 800d6d4:	464b      	mov	r3, r9
 800d6d6:	aa03      	add	r2, sp, #12
 800d6d8:	4621      	mov	r1, r4
 800d6da:	4640      	mov	r0, r8
 800d6dc:	f7ff fee2 	bl	800d4a4 <_printf_common>
 800d6e0:	3001      	adds	r0, #1
 800d6e2:	d14c      	bne.n	800d77e <_printf_i+0x1fe>
 800d6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e8:	b004      	add	sp, #16
 800d6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ee:	4835      	ldr	r0, [pc, #212]	; (800d7c4 <_printf_i+0x244>)
 800d6f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d6f4:	6829      	ldr	r1, [r5, #0]
 800d6f6:	6823      	ldr	r3, [r4, #0]
 800d6f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6fc:	6029      	str	r1, [r5, #0]
 800d6fe:	061d      	lsls	r5, r3, #24
 800d700:	d514      	bpl.n	800d72c <_printf_i+0x1ac>
 800d702:	07df      	lsls	r7, r3, #31
 800d704:	bf44      	itt	mi
 800d706:	f043 0320 	orrmi.w	r3, r3, #32
 800d70a:	6023      	strmi	r3, [r4, #0]
 800d70c:	b91e      	cbnz	r6, 800d716 <_printf_i+0x196>
 800d70e:	6823      	ldr	r3, [r4, #0]
 800d710:	f023 0320 	bic.w	r3, r3, #32
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	2310      	movs	r3, #16
 800d718:	e7b0      	b.n	800d67c <_printf_i+0xfc>
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	f043 0320 	orr.w	r3, r3, #32
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	2378      	movs	r3, #120	; 0x78
 800d724:	4828      	ldr	r0, [pc, #160]	; (800d7c8 <_printf_i+0x248>)
 800d726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d72a:	e7e3      	b.n	800d6f4 <_printf_i+0x174>
 800d72c:	0659      	lsls	r1, r3, #25
 800d72e:	bf48      	it	mi
 800d730:	b2b6      	uxthmi	r6, r6
 800d732:	e7e6      	b.n	800d702 <_printf_i+0x182>
 800d734:	4615      	mov	r5, r2
 800d736:	e7bb      	b.n	800d6b0 <_printf_i+0x130>
 800d738:	682b      	ldr	r3, [r5, #0]
 800d73a:	6826      	ldr	r6, [r4, #0]
 800d73c:	6961      	ldr	r1, [r4, #20]
 800d73e:	1d18      	adds	r0, r3, #4
 800d740:	6028      	str	r0, [r5, #0]
 800d742:	0635      	lsls	r5, r6, #24
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	d501      	bpl.n	800d74c <_printf_i+0x1cc>
 800d748:	6019      	str	r1, [r3, #0]
 800d74a:	e002      	b.n	800d752 <_printf_i+0x1d2>
 800d74c:	0670      	lsls	r0, r6, #25
 800d74e:	d5fb      	bpl.n	800d748 <_printf_i+0x1c8>
 800d750:	8019      	strh	r1, [r3, #0]
 800d752:	2300      	movs	r3, #0
 800d754:	6123      	str	r3, [r4, #16]
 800d756:	4615      	mov	r5, r2
 800d758:	e7ba      	b.n	800d6d0 <_printf_i+0x150>
 800d75a:	682b      	ldr	r3, [r5, #0]
 800d75c:	1d1a      	adds	r2, r3, #4
 800d75e:	602a      	str	r2, [r5, #0]
 800d760:	681d      	ldr	r5, [r3, #0]
 800d762:	6862      	ldr	r2, [r4, #4]
 800d764:	2100      	movs	r1, #0
 800d766:	4628      	mov	r0, r5
 800d768:	f7f2 fd32 	bl	80001d0 <memchr>
 800d76c:	b108      	cbz	r0, 800d772 <_printf_i+0x1f2>
 800d76e:	1b40      	subs	r0, r0, r5
 800d770:	6060      	str	r0, [r4, #4]
 800d772:	6863      	ldr	r3, [r4, #4]
 800d774:	6123      	str	r3, [r4, #16]
 800d776:	2300      	movs	r3, #0
 800d778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d77c:	e7a8      	b.n	800d6d0 <_printf_i+0x150>
 800d77e:	6923      	ldr	r3, [r4, #16]
 800d780:	462a      	mov	r2, r5
 800d782:	4649      	mov	r1, r9
 800d784:	4640      	mov	r0, r8
 800d786:	47d0      	blx	sl
 800d788:	3001      	adds	r0, #1
 800d78a:	d0ab      	beq.n	800d6e4 <_printf_i+0x164>
 800d78c:	6823      	ldr	r3, [r4, #0]
 800d78e:	079b      	lsls	r3, r3, #30
 800d790:	d413      	bmi.n	800d7ba <_printf_i+0x23a>
 800d792:	68e0      	ldr	r0, [r4, #12]
 800d794:	9b03      	ldr	r3, [sp, #12]
 800d796:	4298      	cmp	r0, r3
 800d798:	bfb8      	it	lt
 800d79a:	4618      	movlt	r0, r3
 800d79c:	e7a4      	b.n	800d6e8 <_printf_i+0x168>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	4632      	mov	r2, r6
 800d7a2:	4649      	mov	r1, r9
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	47d0      	blx	sl
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	d09b      	beq.n	800d6e4 <_printf_i+0x164>
 800d7ac:	3501      	adds	r5, #1
 800d7ae:	68e3      	ldr	r3, [r4, #12]
 800d7b0:	9903      	ldr	r1, [sp, #12]
 800d7b2:	1a5b      	subs	r3, r3, r1
 800d7b4:	42ab      	cmp	r3, r5
 800d7b6:	dcf2      	bgt.n	800d79e <_printf_i+0x21e>
 800d7b8:	e7eb      	b.n	800d792 <_printf_i+0x212>
 800d7ba:	2500      	movs	r5, #0
 800d7bc:	f104 0619 	add.w	r6, r4, #25
 800d7c0:	e7f5      	b.n	800d7ae <_printf_i+0x22e>
 800d7c2:	bf00      	nop
 800d7c4:	0800e1e5 	.word	0x0800e1e5
 800d7c8:	0800e1f6 	.word	0x0800e1f6

0800d7cc <_sbrk_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	4d06      	ldr	r5, [pc, #24]	; (800d7e8 <_sbrk_r+0x1c>)
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	4608      	mov	r0, r1
 800d7d6:	602b      	str	r3, [r5, #0]
 800d7d8:	f7f4 fe6a 	bl	80024b0 <_sbrk>
 800d7dc:	1c43      	adds	r3, r0, #1
 800d7de:	d102      	bne.n	800d7e6 <_sbrk_r+0x1a>
 800d7e0:	682b      	ldr	r3, [r5, #0]
 800d7e2:	b103      	cbz	r3, 800d7e6 <_sbrk_r+0x1a>
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}
 800d7e8:	200037dc 	.word	0x200037dc

0800d7ec <__sread>:
 800d7ec:	b510      	push	{r4, lr}
 800d7ee:	460c      	mov	r4, r1
 800d7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f4:	f000 f8f8 	bl	800d9e8 <_read_r>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	bfab      	itete	ge
 800d7fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7fe:	89a3      	ldrhlt	r3, [r4, #12]
 800d800:	181b      	addge	r3, r3, r0
 800d802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d806:	bfac      	ite	ge
 800d808:	6563      	strge	r3, [r4, #84]	; 0x54
 800d80a:	81a3      	strhlt	r3, [r4, #12]
 800d80c:	bd10      	pop	{r4, pc}

0800d80e <__swrite>:
 800d80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d812:	461f      	mov	r7, r3
 800d814:	898b      	ldrh	r3, [r1, #12]
 800d816:	05db      	lsls	r3, r3, #23
 800d818:	4605      	mov	r5, r0
 800d81a:	460c      	mov	r4, r1
 800d81c:	4616      	mov	r6, r2
 800d81e:	d505      	bpl.n	800d82c <__swrite+0x1e>
 800d820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d824:	2302      	movs	r3, #2
 800d826:	2200      	movs	r2, #0
 800d828:	f000 f868 	bl	800d8fc <_lseek_r>
 800d82c:	89a3      	ldrh	r3, [r4, #12]
 800d82e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d836:	81a3      	strh	r3, [r4, #12]
 800d838:	4632      	mov	r2, r6
 800d83a:	463b      	mov	r3, r7
 800d83c:	4628      	mov	r0, r5
 800d83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d842:	f000 b817 	b.w	800d874 <_write_r>

0800d846 <__sseek>:
 800d846:	b510      	push	{r4, lr}
 800d848:	460c      	mov	r4, r1
 800d84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d84e:	f000 f855 	bl	800d8fc <_lseek_r>
 800d852:	1c43      	adds	r3, r0, #1
 800d854:	89a3      	ldrh	r3, [r4, #12]
 800d856:	bf15      	itete	ne
 800d858:	6560      	strne	r0, [r4, #84]	; 0x54
 800d85a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d85e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d862:	81a3      	strheq	r3, [r4, #12]
 800d864:	bf18      	it	ne
 800d866:	81a3      	strhne	r3, [r4, #12]
 800d868:	bd10      	pop	{r4, pc}

0800d86a <__sclose>:
 800d86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d86e:	f000 b813 	b.w	800d898 <_close_r>
	...

0800d874 <_write_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	4d07      	ldr	r5, [pc, #28]	; (800d894 <_write_r+0x20>)
 800d878:	4604      	mov	r4, r0
 800d87a:	4608      	mov	r0, r1
 800d87c:	4611      	mov	r1, r2
 800d87e:	2200      	movs	r2, #0
 800d880:	602a      	str	r2, [r5, #0]
 800d882:	461a      	mov	r2, r3
 800d884:	f7f4 fdc3 	bl	800240e <_write>
 800d888:	1c43      	adds	r3, r0, #1
 800d88a:	d102      	bne.n	800d892 <_write_r+0x1e>
 800d88c:	682b      	ldr	r3, [r5, #0]
 800d88e:	b103      	cbz	r3, 800d892 <_write_r+0x1e>
 800d890:	6023      	str	r3, [r4, #0]
 800d892:	bd38      	pop	{r3, r4, r5, pc}
 800d894:	200037dc 	.word	0x200037dc

0800d898 <_close_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4d06      	ldr	r5, [pc, #24]	; (800d8b4 <_close_r+0x1c>)
 800d89c:	2300      	movs	r3, #0
 800d89e:	4604      	mov	r4, r0
 800d8a0:	4608      	mov	r0, r1
 800d8a2:	602b      	str	r3, [r5, #0]
 800d8a4:	f7f4 fdcf 	bl	8002446 <_close>
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	d102      	bne.n	800d8b2 <_close_r+0x1a>
 800d8ac:	682b      	ldr	r3, [r5, #0]
 800d8ae:	b103      	cbz	r3, 800d8b2 <_close_r+0x1a>
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	200037dc 	.word	0x200037dc

0800d8b8 <_fstat_r>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	4d07      	ldr	r5, [pc, #28]	; (800d8d8 <_fstat_r+0x20>)
 800d8bc:	2300      	movs	r3, #0
 800d8be:	4604      	mov	r4, r0
 800d8c0:	4608      	mov	r0, r1
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	602b      	str	r3, [r5, #0]
 800d8c6:	f7f4 fdca 	bl	800245e <_fstat>
 800d8ca:	1c43      	adds	r3, r0, #1
 800d8cc:	d102      	bne.n	800d8d4 <_fstat_r+0x1c>
 800d8ce:	682b      	ldr	r3, [r5, #0]
 800d8d0:	b103      	cbz	r3, 800d8d4 <_fstat_r+0x1c>
 800d8d2:	6023      	str	r3, [r4, #0]
 800d8d4:	bd38      	pop	{r3, r4, r5, pc}
 800d8d6:	bf00      	nop
 800d8d8:	200037dc 	.word	0x200037dc

0800d8dc <_isatty_r>:
 800d8dc:	b538      	push	{r3, r4, r5, lr}
 800d8de:	4d06      	ldr	r5, [pc, #24]	; (800d8f8 <_isatty_r+0x1c>)
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	4608      	mov	r0, r1
 800d8e6:	602b      	str	r3, [r5, #0]
 800d8e8:	f7f4 fdc9 	bl	800247e <_isatty>
 800d8ec:	1c43      	adds	r3, r0, #1
 800d8ee:	d102      	bne.n	800d8f6 <_isatty_r+0x1a>
 800d8f0:	682b      	ldr	r3, [r5, #0]
 800d8f2:	b103      	cbz	r3, 800d8f6 <_isatty_r+0x1a>
 800d8f4:	6023      	str	r3, [r4, #0]
 800d8f6:	bd38      	pop	{r3, r4, r5, pc}
 800d8f8:	200037dc 	.word	0x200037dc

0800d8fc <_lseek_r>:
 800d8fc:	b538      	push	{r3, r4, r5, lr}
 800d8fe:	4d07      	ldr	r5, [pc, #28]	; (800d91c <_lseek_r+0x20>)
 800d900:	4604      	mov	r4, r0
 800d902:	4608      	mov	r0, r1
 800d904:	4611      	mov	r1, r2
 800d906:	2200      	movs	r2, #0
 800d908:	602a      	str	r2, [r5, #0]
 800d90a:	461a      	mov	r2, r3
 800d90c:	f7f4 fdc2 	bl	8002494 <_lseek>
 800d910:	1c43      	adds	r3, r0, #1
 800d912:	d102      	bne.n	800d91a <_lseek_r+0x1e>
 800d914:	682b      	ldr	r3, [r5, #0]
 800d916:	b103      	cbz	r3, 800d91a <_lseek_r+0x1e>
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	bd38      	pop	{r3, r4, r5, pc}
 800d91c:	200037dc 	.word	0x200037dc

0800d920 <memcpy>:
 800d920:	440a      	add	r2, r1
 800d922:	4291      	cmp	r1, r2
 800d924:	f100 33ff 	add.w	r3, r0, #4294967295
 800d928:	d100      	bne.n	800d92c <memcpy+0xc>
 800d92a:	4770      	bx	lr
 800d92c:	b510      	push	{r4, lr}
 800d92e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d932:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d936:	4291      	cmp	r1, r2
 800d938:	d1f9      	bne.n	800d92e <memcpy+0xe>
 800d93a:	bd10      	pop	{r4, pc}

0800d93c <memmove>:
 800d93c:	4288      	cmp	r0, r1
 800d93e:	b510      	push	{r4, lr}
 800d940:	eb01 0402 	add.w	r4, r1, r2
 800d944:	d902      	bls.n	800d94c <memmove+0x10>
 800d946:	4284      	cmp	r4, r0
 800d948:	4623      	mov	r3, r4
 800d94a:	d807      	bhi.n	800d95c <memmove+0x20>
 800d94c:	1e43      	subs	r3, r0, #1
 800d94e:	42a1      	cmp	r1, r4
 800d950:	d008      	beq.n	800d964 <memmove+0x28>
 800d952:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d95a:	e7f8      	b.n	800d94e <memmove+0x12>
 800d95c:	4402      	add	r2, r0
 800d95e:	4601      	mov	r1, r0
 800d960:	428a      	cmp	r2, r1
 800d962:	d100      	bne.n	800d966 <memmove+0x2a>
 800d964:	bd10      	pop	{r4, pc}
 800d966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d96a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d96e:	e7f7      	b.n	800d960 <memmove+0x24>

0800d970 <__malloc_lock>:
 800d970:	4801      	ldr	r0, [pc, #4]	; (800d978 <__malloc_lock+0x8>)
 800d972:	f7ff b999 	b.w	800cca8 <__retarget_lock_acquire_recursive>
 800d976:	bf00      	nop
 800d978:	200037d0 	.word	0x200037d0

0800d97c <__malloc_unlock>:
 800d97c:	4801      	ldr	r0, [pc, #4]	; (800d984 <__malloc_unlock+0x8>)
 800d97e:	f7ff b994 	b.w	800ccaa <__retarget_lock_release_recursive>
 800d982:	bf00      	nop
 800d984:	200037d0 	.word	0x200037d0

0800d988 <_realloc_r>:
 800d988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d98c:	4680      	mov	r8, r0
 800d98e:	4614      	mov	r4, r2
 800d990:	460e      	mov	r6, r1
 800d992:	b921      	cbnz	r1, 800d99e <_realloc_r+0x16>
 800d994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d998:	4611      	mov	r1, r2
 800d99a:	f7ff ba59 	b.w	800ce50 <_malloc_r>
 800d99e:	b92a      	cbnz	r2, 800d9ac <_realloc_r+0x24>
 800d9a0:	f7ff f9ea 	bl	800cd78 <_free_r>
 800d9a4:	4625      	mov	r5, r4
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ac:	f000 f82e 	bl	800da0c <_malloc_usable_size_r>
 800d9b0:	4284      	cmp	r4, r0
 800d9b2:	4607      	mov	r7, r0
 800d9b4:	d802      	bhi.n	800d9bc <_realloc_r+0x34>
 800d9b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9ba:	d812      	bhi.n	800d9e2 <_realloc_r+0x5a>
 800d9bc:	4621      	mov	r1, r4
 800d9be:	4640      	mov	r0, r8
 800d9c0:	f7ff fa46 	bl	800ce50 <_malloc_r>
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d0ed      	beq.n	800d9a6 <_realloc_r+0x1e>
 800d9ca:	42bc      	cmp	r4, r7
 800d9cc:	4622      	mov	r2, r4
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	bf28      	it	cs
 800d9d2:	463a      	movcs	r2, r7
 800d9d4:	f7ff ffa4 	bl	800d920 <memcpy>
 800d9d8:	4631      	mov	r1, r6
 800d9da:	4640      	mov	r0, r8
 800d9dc:	f7ff f9cc 	bl	800cd78 <_free_r>
 800d9e0:	e7e1      	b.n	800d9a6 <_realloc_r+0x1e>
 800d9e2:	4635      	mov	r5, r6
 800d9e4:	e7df      	b.n	800d9a6 <_realloc_r+0x1e>
	...

0800d9e8 <_read_r>:
 800d9e8:	b538      	push	{r3, r4, r5, lr}
 800d9ea:	4d07      	ldr	r5, [pc, #28]	; (800da08 <_read_r+0x20>)
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	4608      	mov	r0, r1
 800d9f0:	4611      	mov	r1, r2
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	602a      	str	r2, [r5, #0]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	f7f4 fcec 	bl	80023d4 <_read>
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	d102      	bne.n	800da06 <_read_r+0x1e>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	b103      	cbz	r3, 800da06 <_read_r+0x1e>
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	200037dc 	.word	0x200037dc

0800da0c <_malloc_usable_size_r>:
 800da0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da10:	1f18      	subs	r0, r3, #4
 800da12:	2b00      	cmp	r3, #0
 800da14:	bfbc      	itt	lt
 800da16:	580b      	ldrlt	r3, [r1, r0]
 800da18:	18c0      	addlt	r0, r0, r3
 800da1a:	4770      	bx	lr

0800da1c <_init>:
 800da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1e:	bf00      	nop
 800da20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da22:	bc08      	pop	{r3}
 800da24:	469e      	mov	lr, r3
 800da26:	4770      	bx	lr

0800da28 <_fini>:
 800da28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2a:	bf00      	nop
 800da2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da2e:	bc08      	pop	{r3}
 800da30:	469e      	mov	lr, r3
 800da32:	4770      	bx	lr
